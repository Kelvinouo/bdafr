
-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.BaseMotor);
local v2 = setmetatable({}, v1);
v2.__index = v2;
local u1 = require(script.Parent.isMotor);
local u2 = require(script.Parent.SingleMotor);
local function u3(p1)
	if u1(p1) then
		return p1;
	end;
	local v3 = typeof(p1);
	if v3 == "number" then
		return u2.new(p1, false);
	end;
	if v3 == "table" then
		return v2.new(p1, false);
	end;
	error(("Unable to convert %q to motor; type %s is unsupported"):format(p1, v3), 2);
end;
function v2.new(p2, p3)
	assert(p2, "Missing argument #1: initialValues");
	assert(typeof(p2) == "table", "initialValues must be a table!");
	assert(not p2.step, "initialValues contains disallowed property \"step\". Did you mean to put a table of values here?");
	local v4 = setmetatable(v1.new(), v2);
	if p3 ~= nil then
		v4._useImplicitConnections = p3;
	else
		v4._useImplicitConnections = true;
	end;
	v4._complete = true;
	v4._motors = {};
	for v5, v6 in pairs(p2) do
		v4._motors[v5] = u3(v6);
	end;
	return v4;
end;
function v2.step(p4, p5)
	if p4._complete then
		return true;
	end;
	local v7 = true;
	for v8, v9 in pairs(p4._motors) do
		if not v9:step(p5) then
			v7 = false;
		end;
	end;
	p4._onStep:fire(p4:getValue());
	if v7 then
		if p4._useImplicitConnections then
			p4:stop();
		end;
		p4._complete = true;
		p4._onComplete:fire();
	end;
	return v7;
end;
function v2.setGoal(p6, p7)
	assert(not p7.step, "goals contains disallowed property \"step\". Did you mean to put a table of goals here?");
	p6._complete = false;
	p6._onStart:fire();
	for v10, v11 in pairs(p7) do
		assert(p6._motors[v10], ("Unknown motor for key %s"):format(v10)):setGoal(v11);
	end;
	if p6._useImplicitConnections then
		p6:start();
	end;
end;
function v2.getValue(p8)
	local v12 = {};
	for v13, v14 in pairs(p8._motors) do
		v12[v13] = v14:getValue();
	end;
	return v12;
end;
function v2.__tostring(p9)
	return "Motor(Group)";
end;
return v2;

