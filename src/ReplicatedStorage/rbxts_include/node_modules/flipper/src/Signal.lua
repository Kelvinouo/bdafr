
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
function v1.new(p1, p2)
	return setmetatable({
		signal = p1, 
		connected = true, 
		_handler = p2
	}, v1);
end;
function v1.disconnect(p3)
	local v2 = nil;
	local v3 = nil;
	local v4 = nil;
	local v5 = nil;
	local v6 = nil;
	local v7 = nil;
	local v8 = nil;
	local v9 = nil;
	local v10 = nil;
	local v11 = nil;
	local v12 = nil;
	local v13 = nil;
	local v14 = nil;
	if p3.connected then
		p3.connected = false;
		local v15, v16, v17 = pairs(p3.signal._connections);
		while true do
			local v18 = nil;
			v2, v18 = v15(v16, v17);
			if not v2 then
				break;
			end;
			v17 = v2;
			if v18 == p3 then
				v10 = table.remove;
				v3 = "signal";
				v4 = p3;
				v5 = v3;
				v6 = v4[v5];
				local v19 = "_connections";
				v7 = v6;
				v8 = v19;
				v11 = v7[v8];
				v9 = v2;
				local v20 = v9;
				v12 = v10;
				v13 = v11;
				v14 = v20;
				v12(v13, v14);
				return;
			end;		
		end;
		return;
	else
		return;
	end;
	v10 = table.remove;
	v3 = "signal";
	v4 = p3;
	v5 = v3;
	v6 = v4[v5];
	v19 = "_connections";
	v7 = v6;
	v8 = v19;
	v11 = v7[v8];
	v9 = v2;
	v20 = v9;
	v12 = v10;
	v13 = v11;
	v14 = v20;
	v12(v13, v14);
end;
local v21 = {};
v21.__index = v21;
function v21.new()
	return setmetatable({
		_connections = {}, 
		_threads = {}
	}, v21);
end;
function v21.fire(p4, ...)
	for v22, v23 in pairs(p4._connections) do
		v23._handler(...);
	end;
	for v24, v25 in pairs(p4._threads) do
		coroutine.resume(v25, ...);
	end;
	p4._threads = {};
end;
function v21.connect(p5, p6)
	local v26 = v1.new(p5, p6);
	table.insert(p5._connections, v26);
	return v26;
end;
function v21.wait(p7)
	table.insert(p7._threads, coroutine.running());
	return coroutine.yield();
end;
return v21;

