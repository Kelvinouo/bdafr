
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
function v1.new(p1, p2)
	assert(p1, "Missing argument #1: targetValue");
	p2 = p2 or {};
	return setmetatable({
		_targetValue = p1, 
		_frequency = p2.frequency and 4, 
		_dampingRatio = p2.dampingRatio and 1
	}, v1);
end;
function v1.step(p3, p4, p5)
	local l___dampingRatio__2 = p3._dampingRatio;
	local v3 = p3._frequency * 2 * math.pi;
	local l___targetValue__4 = p3._targetValue;
	local v5 = p4.velocity and 0;
	local v6 = p4.value - l___targetValue__4;
	local v7 = math.exp(-l___dampingRatio__2 * v3 * p5);
	if l___dampingRatio__2 == 1 then
		local v8 = (v6 * (1 + v3 * p5) + v5 * p5) * v7 + l___targetValue__4;
		local v9 = (v5 * (1 - v3 * p5) - v6 * (v3 * v3 * p5)) * v7;
	elseif l___dampingRatio__2 < 1 then
		local v10 = math.sqrt(1 - l___dampingRatio__2 * l___dampingRatio__2);
		local v11 = math.cos(v3 * v10 * p5);
		local v12 = math.sin(v3 * v10 * p5);
		if v10 > 0.0001 then
			local v13 = v12 / v10;
		else
			local v14 = p5 * v3;
			v13 = v14 + (v14 * v14 * (v10 * v10) * (v10 * v10) / 20 - v10 * v10) * (v14 * v14 * v14) / 6;
		end;
		if v3 * v10 > 0.0001 then
			local v15 = v12 / (v3 * v10);
		else
			local v16 = v3 * v10;
			v15 = p5 + (p5 * p5 * (v16 * v16) * (v16 * v16) / 20 - v16 * v16) * (p5 * p5 * p5) / 6;
		end;
		v8 = (v6 * (v11 + l___dampingRatio__2 * v13) + v5 * v15) * v7 + l___targetValue__4;
		v9 = (v5 * (v11 - v13 * l___dampingRatio__2) - v6 * (v13 * v3)) * v7;
	else
		local v17 = math.sqrt(l___dampingRatio__2 * l___dampingRatio__2 - 1);
		local v18 = -v3 * (l___dampingRatio__2 - v17);
		local v19 = -v3 * (l___dampingRatio__2 + v17);
		local v20 = (v5 - v6 * v18) / (2 * v3 * v17);
		local v21 = (v6 - v20) * math.exp(v18 * p5);
		local v22 = v20 * math.exp(v19 * p5);
		v8 = v21 + v22 + l___targetValue__4;
		v9 = v21 * v18 + v22 * v19;
	end;
	local v23 = false;
	if math.abs(v9) < 0.001 then
		v23 = math.abs(v8 - l___targetValue__4) < 0.001;
	end;
	return {
		complete = v23, 
		value = v23 and l___targetValue__4 or v8, 
		velocity = v9
	};
end;
return v1;

