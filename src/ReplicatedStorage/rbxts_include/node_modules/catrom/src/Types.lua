-- Script Hash: decce9985eceabc4a5a98636362de7c11e220e1ccc7df3dbd5aa0e63954b90cad16a112d8e6b06d89dfed951bcb9846f
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local function v2(p1)
	return function(p2)
		local v3 = typeof(p2);
		if v3 == p1 then
			return true;
		end;
		return false, string.format("%s expected, got %s", p1, v3);
	end;
end;
v1.callback = v2("function");
v1.Vector2 = v2("Vector2");
v1.Vector3 = v2("Vector3");
v1.CFrame = v2("CFrame");
function v1.optional(p3)
	assert(v1.callback(p3));
	return function(p4)
		if p4 == nil then
			return true;
		end;
		local v4, v5 = p3(p4);
		if v4 then
			return true;
		end;
		return false, string.format("(optional) %s", v5 and "");
	end;
end;
function v1.number(p5)
	local v6 = typeof(p5);
	if v6 ~= "number" then
		return false, string.format("number expected, got %s", v6);
	end;
	if p5 == p5 then
		return true;
	end;
	return false, "unexpected NaN value";
end;
function v1.numberMax(p6)
	return function(p7)
		local v7, v8 = v1.number(p7);
		if not v7 then
			return false, v8;
		end;
		if p7 <= p6 then
			return true;
		end;
		return false, string.format("number <= %s expected, got %s", p6, p7);
	end;
end;
function v1.numberMin(p8)
	return function(p9)
		local v9, v10 = v1.number(p9);
		if not v9 then
			return false, v10 and "";
		end;
		if p8 <= p9 then
			return true;
		end;
		return false, string.format("number >= %s expected, got %s", p8, p9);
	end;
end;
function v1.numberConstrained(p10, p11)
	assert(v1.number(p10));
	assert(v1.number(p11));
	local u1 = v1.numberMin(p10);
	local u2 = v1.numberMax(p11);
	return function(p12)
		local v11, v12 = u1(p12);
		if not v11 then
			return false, v12 and "";
		end;
		local v13, v14 = u2(p12);
		if v13 then
			return true;
		end;
		return false, v14 and "";
	end;
end;
local v15 = v1.numberConstrained(0, 1);
return {
	tUnitInterval = v15, 
	tOptionalUnitInterval = v1.optional(v15), 
	tKnots = function(p13, p14, p15, p16)
		local v16 = v1[typeof(p13)];
		return v16(p14) and (v16(p15) and v16(p16));
	end
};
