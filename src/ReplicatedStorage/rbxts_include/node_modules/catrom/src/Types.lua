-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local u1 = "function";
function v1.callback(p1)
	local v2 = typeof(p1);
	if v2 == u1 then
		return true;
	end;
	return false, string.format("%s expected, got %s", u1, v2);
end;
u1 = "Vector2";
function v1.Vector2(p2)
	local v3 = typeof(p2);
	if v3 == u1 then
		return true;
	end;
	return false, string.format("%s expected, got %s", u1, v3);
end;
u1 = "Vector3";
function v1.Vector3(p3)
	local v4 = typeof(p3);
	if v4 == u1 then
		return true;
	end;
	return false, string.format("%s expected, got %s", u1, v4);
end;
u1 = "CFrame";
function v1.CFrame(p4)
	local v5 = typeof(p4);
	if v5 == u1 then
		return true;
	end;
	return false, string.format("%s expected, got %s", u1, v5);
end;
function v1.optional(p5)
	assert(v1.callback(p5));
	return function(p6)
		if p6 == nil then
			return true;
		end;
		local v6, v7 = p5(p6);
		if v6 then
			return true;
		end;
		return false, string.format("(optional) %s", v7 and "");
	end;
end;
function v1.number(p7)
	local v8 = typeof(p7);
	if v8 ~= "number" then
		return false, string.format("number expected, got %s", v8);
	end;
	if p7 == p7 then
		return true;
	end;
	return false, "unexpected NaN value";
end;
function v1.numberMax(p8)
	return function(p9)
		local v9, v10 = v1.number(p9);
		if not v9 then
			return false, v10;
		end;
		if p9 <= p8 then
			return true;
		end;
		return false, string.format("number <= %s expected, got %s", p8, p9);
	end;
end;
function v1.numberMin(p10)
	return function(p11)
		local v11, v12 = v1.number(p11);
		if not v11 then
			return false, v12 and "";
		end;
		if p10 <= p11 then
			return true;
		end;
		return false, string.format("number >= %s expected, got %s", p10, p11);
	end;
end;
function v1.numberConstrained(p12, p13)
	assert(v1.number(p12));
	assert(v1.number(p13));
	local u2 = v1.numberMin(p12);
	local u3 = v1.numberMax(p13);
	return function(p14)
		local v13, v14 = u2(p14);
		if not v13 then
			return false, v14 and "";
		end;
		local v15, v16 = u3(p14);
		if v15 then
			return true;
		end;
		return false, v16 and "";
	end;
end;
u1 = 0;
local v17 = v1.numberConstrained(u1, 1);
u1 = v1.optional;
u1 = u1(v17);
return {
	tUnitInterval = v17, 
	tOptionalUnitInterval = u1, 
	tKnots = function(p15, p16, p17, p18)
		local v18 = v1[typeof(p15)];
		return v18(p16) and (v18(p17) and v18(p18));
	end
};
