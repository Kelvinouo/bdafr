-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
function v1.new(p1, p2)
	return setmetatable({
		queue = {}, 
		refs = {}, 
		invisibilityTimeout = p2 and 30
	}, v1);
end;
function v1.GetRef(p3, p4)
	return p3.refs[p4];
end;
local u1 = require(script.Parent.MockMemoryStoreQuota);
local l__HttpService__2 = game:GetService("HttpService");
local u3 = require(script.Parent.ArrayUtil);
function v1.ReadAsync(p5, p6, p7, p8)
	assert(typeof(p6) == "number", "Expected count (number)");
	local v2 = false;
	if p6 < 100 then
		v2 = p6 >= 0;
	end;
	assert(v2, "Expected count of 0 - 100");
	if p7 then
		p7 = p7;
	else
		p7 = false;
	end;
	if p8 then
		p8 = p8;
	else
		p8 = -1;
	end;
	assert(type(p7) == "boolean");
	assert(type(p8) == "number");
	u1:ProcessReadRequest();
	local v3 = 0;
	while true do
		print("yield", v3);
		v3 = v3 + task.wait();
		if p8 ~= -1 and p8 <= v3 then
			break;
		end;
		if not p7 then
			break;
		end;
		if p6 <= #p5.queue then
			break;
		end;	
	end;
	local v4 = #p5.queue;
	local v5 = table.move(p5.queue, v4 + 1 - p6, v4, 1, {});
	local v6 = l__HttpService__2:GenerateGUID(false);
	p5.queue = table.move(p5.queue, 1, #p5.queue - p6, 1, {});
	p5.refs[v6] = {
		results = v5, 
		timeout = tick() + p5.invisibilityTimeout
	};
	return u3.Map(v5, function(p9)
		return p9.value;
	end), v6, {
		time = v3, 
		queue = p5.queue, 
		refs = p5.refs
	};
end;
function v1.HandleTimeouts(p10)
	for v7, v8 in ipairs(p10.queue) do
		if v8.expiration < tick() then
			table.remove(p10.queue, v7);
		end;
	end;
	for v9, v10 in pairs(p10.refs) do
		if v10.timeout < tick() then
			p10.refs[v9] = nil;
			for v11, v12 in pairs(v10.results) do
				p10:AddAsyncInternal(v12);
			end;
		end;
	end;
end;
function v1.RemoveAsync(p11, p12)
	u1:ProcessWriteRequest();
	if p11.refs[p12] then
		p11.refs[p12] = nil;
	end;
end;
function v1.AddAsyncInternal(p13, p14)
	table.insert(p13.queue, 1, p14);
	table.sort(p13.queue, function(p15, p16)
		return p16.priority < p15.priority;
	end);
end;
function v1.AddAsync(p17, p18, p19, p20)
	assert(typeof(p19) == "number", "Expected 'expirationSeconds' (number) at argument #2");
	u1:ProcessWriteRequest();
	p17:AddAsyncInternal({
		value = p18, 
		expiration = tick() + p19, 
		priority = p20 and 3
	});
end;
return v1;
