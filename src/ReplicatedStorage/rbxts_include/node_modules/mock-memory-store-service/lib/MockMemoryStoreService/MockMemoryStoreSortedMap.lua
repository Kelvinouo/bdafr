-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
function v1.new(p1)
	return setmetatable({
		mapValues = {}
	}, v1);
end;
local u1 = require(script.Parent.MockMemoryStoreUtils);
local u2 = require(script.Parent.MockMemoryStoreQuota);
function v1.GetAsync(p2, p3)
	u1.AssertKeyIsValid(p3);
	u2:ProcessReadRequest();
	local v2 = p2.mapValues[p3];
	if not v2 then
		return nil;
	end;
	return v2.innerValue;
end;
function v1.SetAsync(p4, p5, p6, p7)
	u1.AssertKeyIsValid(p5);
	assert(p7, "Expiration required");
	assert(p7 <= u1.MAX_EXPIRATION_SECONDS, "Exceeds max expiration time");
	local v3 = {
		innerValue = p6, 
		expiration = tick() + p7
	};
	u2:ProcessWriteRequest();
	p4.mapValues[p5] = v3;
	return p4.mapValues[p5] ~= nil;
end;
function v1.UpdateAsync(p8, p9, p10, p11)
	assert(typeof(p9) == "string", "Expects key (argument #1)");
	assert(typeof(p10) == "function", "Expects transformFunction (argument #2)");
	assert(typeof(p11) == "number", "Expects expiration (argument #3)");
	local v4 = p10((p8:GetAsync(p9)));
	if v4 == nil then
		return nil;
	end;
	p8:SetAsync(p9, v4, p11);
	return v4;
end;
function v1.RemoveAsync(p12, p13)
	u2:ProcessWriteRequest();
	p12.mapValues[p13] = nil;
end;
function v1.RemoveExpiringKey(p14, p15)
	p14.mapValues[p15] = nil;
end;
function v1.GetRangeAsync(p16, p17, p18, p19, p20)
	error("Not yet implemented", 2);
end;
return v1;
