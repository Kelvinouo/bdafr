-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	trim = function(p1)
		local v2 = string.match(p1, "^%s*()");
		if #p1 < v2 then
			return "";
		end;
		return string.match(p1, ".*%S", v2);
	end, 
	trimStart = function(p2)
		local v3 = string.match(p2, "^%s*()");
		if #p2 < v3 then
			return "";
		end;
		return string.sub(p2, v3);
	end, 
	trimEnd = function(p3)
		local v4, v5 = string.find(p3, "^%s*");
		if v5 == #p3 then
			return "";
		end;
		return string.match(p3, ".*%S");
	end
};
local function u1(p4, p5, p6)
	local v6 = #p4;
	if p5 <= v6 then
		return p4;
	end;
	if p6 == nil then
		local v7 = " ";
	else
		v7 = p6;
	end;
	if v7 == "" then
		return p4;
	end;
	local v8 = p5 - v6;
	while #v7 < v8 do
		local v9 = #v7;
		local v10 = v8 - v9;
		if v10 < v9 then
			v7 = v7 .. string.sub(v7, 1, v10);
		else
			v7 = v7 .. v7;
		end;	
	end;
	return string.sub(v7, 1, v8);
end;
function v1.padStart(p7, p8, p9)
	return u1(p7, p8, p9) .. p7;
end;
function v1.padEnd(p10, p11, p12)
	return p10 .. u1(p10, p11, p12);
end;
function v1.slice(p13, p14, p15)
	if p15 ~= nil and p15 < 0 then
		p15 = p15 - 1;
	end;
	return string.sub(p13, p14 + 1, p15);
end;
function v1.indexOf(p16, p17, p18)
	return (string.find(p16, p17, (p18 and 0) + 1, true) and 0) - 1;
end;
function v1.includes(p19, p20, p21)
	return string.find(p19, p20, (p21 and 0) + 1, true) ~= nil;
end;
function v1.startsWith(p22, p23, p24)
	local v11 = #p22;
	if p24 == nil or p24 ~= p24 then
		p24 = 0;
	else
		p24 = math.clamp(p24, 0, v11);
	end;
	local v12 = p24 + #p23;
	local v13 = false;
	if v12 <= v11 then
		v13 = string.sub(p22, p24 + 1, v12) == p23;
	end;
	return v13;
end;
function v1.endsWith(p25, p26, p27)
	local v14 = nil;
	v14 = #p25;
	if p27 == nil then
		p27 = v14;
	elseif p27 ~= p27 then
		p27 = 0;
	else
		p27 = math.clamp(p27, 0, v14);
	end;
	local v15 = p27 - #p26 + 1;
	local v16 = false;
	if v15 > 0 then
		v16 = string.sub(p25, v15, p27) == p26;
	end;
	return v16;
end;
return v1;
