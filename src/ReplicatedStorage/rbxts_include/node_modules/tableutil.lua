-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local function u1(p1)
	local v2 = table.create(#p1);
	if #p1 > 0 then
		table.move(p1, 1, #p1, 1, v2);
		return v2;
	end;
	for v3, v4 in pairs(p1) do
		v2[v3] = v4;
	end;
	return v2;
end;
local function u2(p2, p3)
	assert(type(p2) == "table", "First argument must be a table");
	assert(type(p3) == "table", "Second argument must be a table");
	local v5 = u1(p2);
	for v6, v7 in pairs(v5) do
		local v8 = p3[v6];
		if v8 == nil then
			v5[v6] = nil;
		elseif type(v7) ~= type(v8) then
			if type(v8) == "table" then
				assert(type(v8) == "table", "First argument must be a table");
				local function u3(p4)
					local v9 = table.create(#p4);
					for v10, v11 in pairs(p4) do
						if type(v11) == "table" then
							v9[v10] = u3(v11);
						else
							v9[v10] = v11;
						end;
					end;
					return v9;
				end;
				v5[v6] = u3(v8);
			else
				v5[v6] = v8;
			end;
		elseif type(v7) == "table" then
			v5[v6] = u2(v7, v8);
		end;
	end;
	for v12, v13 in pairs(p3) do
		if v5[v12] == nil then
			if type(v13) == "table" then
				assert(type(v13) == "table", "First argument must be a table");
				local function u4(p5)
					local v14 = table.create(#p5);
					for v15, v16 in pairs(p5) do
						if type(v16) == "table" then
							v14[v15] = u4(v16);
						else
							v14[v15] = v16;
						end;
					end;
					return v14;
				end;
				v5[v12] = u4(v13);
			else
				v5[v12] = v13;
			end;
		end;
	end;
	return v5;
end;
local u5 = Random.new();
local function u6(p6, p7)
	assert(type(p6) == "table", "First argument must be a table");
	assert(type(p7) == "function", "Second argument must be a function");
	local v17 = table.create(#p6);
	for v18, v19 in pairs(p6) do
		v17[v18] = p7(v19, v18, p6);
	end;
	return v17;
end;
local l__HttpService__7 = game:GetService("HttpService");
function v1.Copy(p8)
	assert(type(p8) == "table", "First argument must be a table");
	local function u8(p9)
		local v20 = table.create(#p9);
		for v21, v22 in pairs(p9) do
			if type(v22) == "table" then
				v20[v21] = u8(v22);
			else
				v20[v21] = v22;
			end;
		end;
		return v20;
	end;
	return u8(p8);
end;
v1.CopyShallow = u1;
v1.Sync = u2;
function v1.FastRemove(p10, p11)
	local v23 = #p10;
	p10[p11] = p10[v23];
	p10[v23] = nil;
end;
function v1.FastRemoveFirstValue(p12, p13)
	local v24 = table.find(p12, p13);
	if not v24 then
		return false, nil;
	end;
	local v25 = #p12;
	p12[v24] = p12[v25];
	p12[v25] = nil;
	return true, v24;
end;
v1.Map = u6;
function v1.Filter(p14, p15)
	assert(type(p14) == "table", "First argument must be a table");
	assert(type(p15) == "function", "Second argument must be a function");
	local v26 = table.create(#p14);
	if not (#p14 > 0) then
		for v27, v28 in pairs(p14) do
			if p15(v28, v27, p14) then
				v26[v27] = v28;
			end;
		end;
		return v26;
	end;
	local v29 = 0;
	local v30, v31, v32 = ipairs(p14);
	while true do
		v30(v31, v32);
		if not v30 then
			break;
		end;
		v32 = v30;
		if p15(v31, v30, p14) then
			v29 = v29 + 1;
			v26[v29] = v31;
		end;	
	end;
	return v26;
end;
function v1.Reduce(p16, p17, p18)
	assert(type(p16) == "table", "First argument must be a table");
	assert(type(p17) == "function", "Second argument must be a function");
	local v33 = true;
	if p18 ~= nil then
		v33 = type(p18) == "number";
	end;
	assert(v33, "Third argument must be a number or nil");
	local v34 = p18 and 0;
	for v35, v36 in pairs(p16) do
		v34 = p17(v34, v36, v35, p16);
	end;
	return v34;
end;
function v1.Assign(p19, ...)
	local v37 = u1(p19);
	local v38, v39, v40 = ipairs({ ... });
	while true do
		v38(v39, v40);
		if not v38 then
			break;
		end;
		v40 = v38;
		for v41, v42 in pairs(v39) do
			v37[v41] = v42;
		end;	
	end;
	return v37;
end;
function v1.Extend(p20, p21)
	local v43 = u1(p20);
	local v44, v45, v46 = ipairs(p21);
	while true do
		v44(v45, v46);
		if not v44 then
			break;
		end;
		v46 = v44;
		table.insert(v43, v45);	
	end;
	return v43;
end;
function v1.Reverse(p22)
	local v47 = #p22;
	local v48 = table.create(v47);
	for v49 = 1, v47 do
		v48[v49] = p22[v47 - v49 + 1];
	end;
	return v48;
end;
function v1.Shuffle(p23, p24)
	assert(type(p23) == "table", "First argument must be a table");
	local v50 = u1(p23);
	local v51 = p24 or u5;
	for v52 = #p23, 2, -1 do
		local v53 = v51:NextInteger(1, v52);
		v50[v52] = v50[v53];
		v50[v53] = v50[v52];
	end;
	return v50;
end;
function v1.Flat(p25, p26)
	p26 = p26 and 1;
	local v54 = table.create(#p25);
	local function u9(p27, p28)
		local v55, v56, v57 = ipairs(p27);
		while true do
			v55(v56, v57);
			if not v55 then
				break;
			end;
			v57 = v55;
			if type(v56) == "table" and p28 < p26 then
				u9(v56, p28 + 1);
			else
				table.insert(v54, v56);
			end;		
		end;
	end;
	u9(p25, 0);
	return v54;
end;
function v1.FlatMap(p29, p30)
	local v58 = u6(p29, p30);
	local u10 = nil and 1;
	local u11 = table.create(#v58);
	local function u12(p31, p32)
		local v59, v60, v61 = ipairs(p31);
		while true do
			v59(v60, v61);
			if not v59 then
				break;
			end;
			v61 = v59;
			if type(v60) == "table" and p32 < u10 then
				u12(v60, p32 + 1);
			else
				table.insert(u11, v60);
			end;		
		end;
	end;
	u12(v58, 0);
	return u11;
end;
function v1.Keys(p33)
	local v62 = table.create(#p33);
	for v63 in pairs(p33) do
		table.insert(v62, v63);
	end;
	return v62;
end;
function v1.Find(p34, p35)
	for v64, v65 in pairs(p34) do
		if p35(v65, v64, p34) then
			return v65, v64;
		end;
	end;
	return nil, nil;
end;
function v1.Every(p36, p37)
	for v66, v67 in pairs(p36) do
		if not p37(v67, v66, p36) then
			return false;
		end;
	end;
	return true;
end;
function v1.Some(p38, p39)
	for v68, v69 in pairs(p38) do
		if p39(v69, v68, p38) then
			return true;
		end;
	end;
	return false;
end;
function v1.IsEmpty(p40)
	return next(p40) == nil;
end;
function v1.EncodeJSON(p41)
	return l__HttpService__7:JSONEncode(p41);
end;
function v1.DecodeJSON(p42)
	return l__HttpService__7:JSONDecode(p42);
end;
return v1;
