-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	["\007"] = "\\a", 
	["\008"] = "\\b", 
	["\012"] = "\\f", 
	["\n"] = "\\n", 
	["\r"] = "\\r", 
	["\t"] = "\\t", 
	["\011"] = "\\v"
};
local v2 = {};
for v3 = 0, 31 do
	local v4 = string.char(v3);
	if not v1[v4] then
		v1[v4] = "\\" .. v3;
		v2[v4] = string.format("\\%03d", v3);
	end;
end;
local u1 = {
	number = 1, 
	boolean = 2, 
	string = 3, 
	table = 4, 
	["function"] = 5, 
	userdata = 6, 
	thread = 7
};
local function u2(p1)
	local v5 = 1;
	local v6 = rawget(p1, v5);
	while v6 ~= nil do
		v5 = v5 + 1;
		v6 = rawget(p1, v5);	
	end;
	return v5 - 1;
end;
local function u3(p2)
	return next, p2, nil;
end;
local function u4(p3, p4)
	local v7 = false;
	if type(p3) == "number" then
		v7 = false;
		if p3 >= 1 then
			v7 = false;
			if p3 <= p4 then
				v7 = math.floor(p3) == p3;
			end;
		end;
	end;
	return v7;
end;
local function u5(p5, p6)
	local v8 = type(p5);
	local v9 = type(p6);
	if v8 == v9 and (v8 == "string" or v8 == "number") then
		return p5 < p6;
	end;
	local v10 = u1[v8];
	local v11 = u1[v9];
	if v10 and v11 then
		return u1[v8] < u1[v9];
	end;
	if v10 then
		return true;
	end;
	if v11 then
		return false;
	end;
	return v8 < v9;
end;
local function u6(p7, p8)
	local v12 = nil;
	p8 = p8 or {};
	if type(p7) == "table" then
		if p8[p7] then
			p8[p7] = p8[p7] + 1;
			v12 = p8;
			return v12;
		end;
	else
		v12 = p8;
		return v12;
	end;
	p8[p7] = 1;
	for v13, v14 in u3(p7) do
		u6(v13, p8);
		u6(v14, p8);
	end;
	u6(getmetatable(p7), p8);
	return p8;
end;
local function u7(p9)
	local v15 = {};
	local v16 = #p9;
	for v17 = 1, v16 do
		v15[v17] = p9[v17];
	end;
	return v15, v16;
end;
local function u8(p10, ...)
	local v18 = { ... };
	local v19, v20 = u7(p10);
	for v21 = 1, #v18 do
		v19[v20 + v21] = v18[v21];
	end;
	return v19;
end;
local u9 = {
	KEY = setmetatable({}, {
		__tostring = function()
			return "inspect.KEY";
		end
	}), 
	METATABLE = setmetatable({}, {
		__tostring = function()
			return "inspect.METATABLE";
		end
	})
};
local function u10(p11, p12, p13, p14)
	if p12 == nil then
		return nil;
	end;
	if p14[p12] then
		return p14[p12];
	end;
	local v22 = p11(p12, p13);
	if type(v22) == "table" then
		local v23 = {};
		p14[p12] = v23;
		for v24, v25 in u3(v22) do
			local v26 = u10(p11, v24, u8(p13, v24, u9.KEY), p14);
			if v26 ~= nil then
				v23[v26] = u10(p11, v25, u8(p13, v26), p14);
			end;
		end;
		local v27 = u10(p11, getmetatable(v22), u8(p13, u9.METATABLE), p14);
		if type(v27) ~= "table" then
			v27 = nil;
		end;
		setmetatable(v23, v27);
		v22 = v23;
	end;
	return v22;
end;
local v28 = {
	puts = function(p15, ...)
		local v29 = { ... };
		local l__buffer__30 = p15.buffer;
		local v31 = #l__buffer__30;
		for v32 = 1, #v29 do
			v31 = v31 + 1;
			l__buffer__30[v31] = v29[v32];
		end;
	end, 
	down = function(p16, p17)
		p16.level = p16.level + 1;
		p17();
		p16.level = p16.level - 1;
	end, 
	tabify = function(p18)
		p18:puts(p18.newline, string.rep(p18.indent, p18.level));
	end, 
	alreadyVisited = function(p19, p20)
		return p19.ids[p20] ~= nil;
	end
};
local l__tostring__11 = tostring;
function v28.getId(p21, p22)
	local v33 = p21.ids[p22];
	if not v33 then
		local v34 = type(p22);
		v33 = (p21.maxIds[v34] and 0) + 1;
		p21.maxIds[v34] = v33;
		p21.ids[p22] = v33;
	end;
	return l__tostring__11(v33);
end;
local function u12(p23)
	local v35 = false;
	if type(p23) == "string" then
		v35 = p23:match("^[_%a][_%a%d]*$");
	end;
	return v35;
end;
function v28.putKey(p24, p25)
	if u12(p25) then
		return p24:puts(p25);
	end;
	p24:puts("[");
	p24:putValue(p25);
	p24:puts("]");
end;
local function u13(p26)
	local v36 = {};
	local v37 = 0;
	local v38 = u2(p26);
	for v39, v40 in u3(p26) do
		if not u4(v39, v38) then
			v37 = v37 + 1;
			v36[v37] = v39;
		end;
	end;
	table.sort(v36, u5);
	return v36, v37, v38;
end;
function v28.putTable(p27, p28)
	if p28 == u9.KEY or p28 == u9.METATABLE then
		p27:puts(l__tostring__11(p28));
		return;
	end;
	if p27:alreadyVisited(p28) then
		p27:puts("<table ", p27:getId(p28), ">");
		return;
	end;
	if p27.depth <= p27.level then
		p27:puts("{...}");
		return;
	end;
	if p27.tableAppearances[p28] > 1 then
		p27:puts("<", p27:getId(p28), ">");
	end;
	local v41, v42, v43 = u13(p28);
	local v44 = getmetatable(p28);
	p27:puts("{");
	p27:down(function()
		local v45 = nil;
		v45 = 0;
		for v46 = 1, v43 do
			if v45 > 0 then
				p27:puts(",");
			end;
			p27:puts(" ");
			p27:putValue(p28[v46]);
			v45 = v45 + 1;
		end;
		for v47 = 1, v42 do
			local v48 = v41[v47];
			if local v49 > 0 then
				p27:puts(",");
			end;
			p27:tabify();
			p27:putKey(v48);
			p27:puts(" = ");
			p27:putValue(p28[v48]);
		end;
		if type(v44) == "table" then
			if local v50 > 0 then
				p27:puts(",");
			end;
			p27:tabify();
			p27:puts("<metatable> = ");
			p27:putValue(v44);
		end;
	end);
	if v42 > 0 or type(v44) == "table" then
		p27:tabify();
	elseif v43 > 0 then
		p27:puts(" ");
	end;
	p27:puts("}");
end;
local v51 = {
	number = l__tostring__11, 
	boolean = l__tostring__11, 
	nil = l__tostring__11, 
	Instance = function(p29)
		return string.format("Instance( %s )", p29:GetFullName());
	end, 
	Axes = function(p30)
		return string.format("Axes( %s )", l__tostring__11(p30));
	end, 
	BrickColor = function(p31)
		return string.format("BrickColor( %s )", l__tostring__11(p31));
	end, 
	CFrame = function(p32)
		return string.format("CFrame( %s )", l__tostring__11(p32));
	end, 
	Color3 = function(p33)
		return string.format("Color3( %s )", l__tostring__11(p33));
	end, 
	DockWidgetPluginGuiInfo = function(p34)
		return string.format("DockWidgetPluginGuiInfo( %s )", l__tostring__11(p34));
	end, 
	Faces = function(p35)
		return string.format("Faces( %s )", l__tostring__11(p35));
	end, 
	PathWaypoint = function(p36)
		return string.format("PathWaypoint( %s )", l__tostring__11(p36));
	end, 
	PhysicalProperties = function(p37)
		return string.format("PhysicalProperties( %s )", l__tostring__11(p37));
	end, 
	Random = function(p38)
		return "Random";
	end, 
	Ray = function(p39)
		return string.format("Ray( %s )", l__tostring__11(p39));
	end, 
	Rect = function(p40)
		return string.format("Rect( %s )", l__tostring__11(p40));
	end, 
	Region3 = function(p41)
		return string.format("Region3( %s )", l__tostring__11(p41));
	end, 
	Region3int16 = function(p42)
		return string.format("Region3int16( %s )", l__tostring__11(p42));
	end, 
	TweenInfo = function(p43)
		return string.format("TweenInfo( %s )", l__tostring__11(p43));
	end, 
	UDim = function(p44)
		return string.format("UDim( %s )", l__tostring__11(p44));
	end, 
	UDim2 = function(p45)
		return string.format("UDim2( %s )", l__tostring__11(p45));
	end, 
	Vector2 = function(p46)
		return string.format("Vector2( %s )", l__tostring__11(p46));
	end, 
	Vector2int16 = function(p47)
		return string.format("Vector2int16( %s )", l__tostring__11(p47));
	end, 
	Vector3 = function(p48)
		return string.format("Vector3( %s )", l__tostring__11(p48));
	end, 
	Vector3int16 = function(p49)
		return string.format("Vector3int16( %s )", l__tostring__11(p49));
	end
};
local function u14(p50)
	return string.match(p50, "^%s*(.-)%s*$");
end;
function v51.ColorSequence(p51)
	return string.format("ColorSequence( %s )", u14(l__tostring__11(p51)));
end;
function v51.ColorSequenceKeypoint(p52)
	return string.format("ColorSequenceKeypoint( %s )", u14(l__tostring__11(p52)));
end;
function v51.NumberRange(p53)
	return string.format("NumberRange( %s )", u14(l__tostring__11(p53)));
end;
function v51.NumberSequence(p54)
	return string.format("NumberSequence( %s )", u14(l__tostring__11(p54)));
end;
function v51.NumberSequenceKeypoint(p55)
	return string.format("NumberSequenceKeypoint( %s )", u14(l__tostring__11(p55)));
end;
local function u15(p56)
	if p56:match("\"") and not p56:match("'") then
		return "'" .. p56 .. "'";
	end;
	return "\"" .. p56:gsub("\"", "\\\"") .. "\"";
end;
local function u16(p57)
	return p57:gsub("\\", "\\\\"):gsub("(%c)%f[0-9]", v2):gsub("%c", v1);
end;
function v28.putValue(p58, p59)
	local v52 = typeof(p59);
	if v52 == "string" then
		p58:puts(u15(u16(p59)));
		return;
	end;
	if v52 == "table" then
		p58:putTable(p59);
		return;
	end;
	local v53 = v51[v52];
	if v53 then
		p58:puts(v53(p59));
		return;
	end;
	p58:puts("<", v52, " ", p58:getId(p59), ">");
end;
local u17 = {
	__index = v28
};
function u9.inspect(p60, p61)
	p61 = p61 or {};
	local l__process__54 = p61.process;
	if l__process__54 then
		p60 = u10(l__process__54, p60, {}, {});
	end;
	local v55 = setmetatable({
		depth = p61.depth or math.huge, 
		level = 0, 
		buffer = {}, 
		ids = {}, 
		maxIds = {}, 
		newline = p61.newline and "\n", 
		indent = p61.indent and "  ", 
		tableAppearances = u6(p60)
	}, u17);
	v55:putValue(p60);
	return table.concat(v55.buffer);
end;
setmetatable(u9, {
	__call = function(p62, ...)
		return u9.inspect(...);
	end
});
return u9;
