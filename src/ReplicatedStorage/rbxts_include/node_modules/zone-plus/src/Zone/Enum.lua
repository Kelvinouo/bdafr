-- Script Hash: f93095e563345713700c19047c310d7517f841e1ef845e93d5c1ca5627fe4e34b0755426d72c9ff3c017be0ede740f32
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local v2 = {};
v1.enums = v2;
function v1.createEnum(p1, p2)
	assert(typeof(p1) == "string", "bad argument #1 - enums must be created using a string name!");
	assert(typeof(p2) == "table", "bad argument #2 - enums must be created using a table!");
	assert(not v2[p1], ("enum '%s' already exists!"):format(p1));
	local v3 = {};
	local v4 = {};
	local u1 = {};
	local u2 = {};
	function v4.getName(p3)
		p3 = tostring(p3);
		local v5 = u1[p3] or u2[p3];
		if not v5 then
			return;
		end;
		return p2[v5][1];
	end;
	local u3 = {};
	function v4.getValue(p4)
		p4 = tostring(p4);
		local v6 = u3[p4] or u2[p4];
		if not v6 then
			return;
		end;
		return p2[v6][2];
	end;
	function v4.getProperty(p5)
		p5 = tostring(p5);
		local v7 = u3[p5] or u1[p5];
		if not v7 then
			return;
		end;
		return p2[v7][3];
	end;
	local v8, v9, v10 = pairs(p2);
	while true do
		local v11, v12 = v8(v9, v10);
		if not v11 then
			break;
		end;
		assert(typeof(v12) == "table", ("bad argument #2.%s - details must only be comprised of tables!"):format(v11));
		local v13 = v12[1];
		assert(typeof(v13) == "string", ("bad argument #2.%s.1 - detail name must be a string!"):format(v11));
		assert(typeof(not u3[v13]), ("bad argument #2.%s.1 - the detail name '%s' already exists!"):format(v11, v13));
		assert(typeof(not v4[v13]), ("bad argument #2.%s.1 - that name is reserved."):format(v11, v13));
		u3[tostring(v13)] = v11;
		local v14 = v12[2];
		local v15 = tostring(v14);
		assert(typeof(not u1[v15]), ("bad argument #2.%s.2 - the detail value '%s' already exists!"):format(v11, v15));
		u1[v15] = v11;
		local v16 = v12[3];
		if v16 then
			assert(typeof(not u2[v16]), ("bad argument #2.%s.3 - the detail property '%s' already exists!"):format(v11, tostring(v16)));
			u2[tostring(v16)] = v11;
		end;
		v3[v13] = v14;
		local v17 = {};
		function v17.__index(p6, p7)
			return v4[p7];
		end;
		setmetatable(v3, v17);	
	end;
	v2[p1] = v3;
	return v3;
end;
function v1.getEnums()
	return v2;
end;
local l__createEnum__18 = v1.createEnum;
for v19, v20 in pairs(script:GetChildren()) do
	if v20:IsA("ModuleScript") then
		l__createEnum__18(v20.Name, (require(v20)));
	end;
end;
return v1;
