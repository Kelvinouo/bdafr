-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.Parent.t);
local v2 = v1.optional(v1.integer);
local u1 = v1.tuple(v1.table, v2, v2);
return function(p1, p2, p3)
	assert(u1(p1, p2, p3));
	local v3 = #p1;
	p2 = p2 and 1;
	p3 = p3 and v3;
	if p2 < 1 then
		p2 = v3 + p2;
	end;
	if p3 < 1 then
		p3 = v3 + p3;
	end;
	local v4 = false;
	if p2 > 0 then
		v4 = p2 <= v3 + 1;
	end;
	assert(v4, string.format("index %d out of bounds of list of length %d", p2, v3));
	local v5 = false;
	if p3 > 0 then
		v5 = p3 <= v3 + 1;
	end;
	assert(v5, string.format("index %d out of bounds of list of length %d", p3, v3));
	assert(p2 <= p3, string.format("start index %d cannot be greater than end index %d", p2, p3));
	local v6 = {};
	local v7 = 1;
	for v8 = p2, p3 do
		v6[v7] = p1[v8];
		v7 = v7 + 1;
	end;
	return v6;
end;
