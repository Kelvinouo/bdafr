
-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.Parent.t);
local v2 = v1.optional(v1.integer);
local u1 = v1.tuple(v1.table, v2, v2);
return function(p1, p2, p3, ...)
	local v3 = nil;
	assert(u1(p1, p2, p3));
	local v4 = #p1;
	p2 = p2 and 1;
	p3 = p3 or v4 + 1;
	if p2 < 1 then
		p2 = v4 + p2;
	end;
	if p3 < 1 then
		p3 = v4 + p3;
	end;
	local v5 = false;
	if p2 > 0 then
		v5 = p2 <= v4 + 1;
	end;
	assert(v5, string.format("index %d out of bounds of list of length %d", p2, v4));
	local v6 = false;
	if p3 > 0 then
		v6 = p3 <= v4 + 1;
	end;
	assert(v6, string.format("index %d out of bounds of list of length %d", p3, v4));
	assert(p2 <= p3, string.format("start index %d cannot be greater than end index %d", p2, p3));
	local v7 = {};
	v3 = 1;
	for v8 = 1, p2 - 1 do
		v7[v3] = p1[v8];
		v3 = v3 + 1;
	end;
	for v9 = 1, select("#", ...) do
		v7[local v10] = select(v9, ...);
	end;
	for v11 = p3 + 1, v4 do
		v7[local v12] = p1[v11];
	end;
	return v7;
end;

