-- Decompiled with the Synapse X Luau decompiler.

local l__Parent__1 = script.Parent;
local v2 = require(l__Parent__1.Parent.t);
local v3 = v2.optional(v2.callback);
local u1 = v2.tuple(v2.table, v2.integer, v3, v3);
local function u2(p1)
	return p1;
end;
local u3 = require(l__Parent__1.copy);
local function u4(p2, ...)
	if type(p2) ~= "function" then
		return;
	end;
	return p2(...);
end;
return function(p3, p4, p5, p6)
	assert(u1(p3, p4, p5, p6));
	local v4 = #p3;
	if p4 < 0 then
		p4 = v4 + p4;
	end;
	local v5 = false;
	if p4 > 0 then
		v5 = p4 <= v4 + 1;
	end;
	assert(v5, string.format("index %d out of bounds of list of length %d", p4, v4));
	p5 = p5 or u2;
	local v6 = u3(p3);
	if v6[p4] == nil then
		v6[p4] = u4(p6, p4);
		return v6;
	end;
	v6[p4] = p5(v6[p4], p4);
	return v6;
end;
