-- Script Hash: 2475052b39ef6685dee4783d85ccc7e5edab153ef0d076ba31736e964954388a46592492bf3ffe958cd13613e1dddecc
-- Decompiled with the Synapse X Luau decompiler.

local u1 = typeof or type;
local function v1(p1)
	return function(p2)
		local v2 = u1(p2);
		if v2 == p1 then
			return true;
		end;
		return false, string.format("%s expected, got %s", p1, v2);
	end;
end;
local v3 = {
	any = function(p3)
		if p3 ~= nil then
			return true;
		end;
		return false, "any expected, got nil";
	end, 
	boolean = v1("boolean"), 
	thread = v1("thread"), 
	callback = v1("function")
};
v3["function"] = v3.callback;
v3.none = v1("nil");
v3.nil = v3.none;
v3.string = v1("string");
v3.table = v1("table");
v3.userdata = v1("userdata");
function v3.number(p4)
	local v4 = u1(p4);
	if v4 ~= "number" then
		return false, string.format("number expected, got %s", v4);
	end;
	if p4 == p4 then
		return true;
	end;
	return false, "unexpected NaN value";
end;
function v3.nan(p5)
	if p5 ~= p5 then
		return true;
	end;
	return false, "unexpected non-NaN value";
end;
v3.Axes = v1("Axes");
v3.BrickColor = v1("BrickColor");
v3.CFrame = v1("CFrame");
v3.Color3 = v1("Color3");
v3.ColorSequence = v1("ColorSequence");
v3.ColorSequenceKeypoint = v1("ColorSequenceKeypoint");
v3.DockWidgetPluginGuiInfo = v1("DockWidgetPluginGuiInfo");
v3.Faces = v1("Faces");
v3.Instance = v1("Instance");
v3.NumberRange = v1("NumberRange");
v3.NumberSequence = v1("NumberSequence");
v3.NumberSequenceKeypoint = v1("NumberSequenceKeypoint");
v3.PathWaypoint = v1("PathWaypoint");
v3.PhysicalProperties = v1("PhysicalProperties");
v3.Random = v1("Random");
v3.Ray = v1("Ray");
v3.Rect = v1("Rect");
v3.Region3 = v1("Region3");
v3.Region3int16 = v1("Region3int16");
v3.TweenInfo = v1("TweenInfo");
v3.UDim = v1("UDim");
v3.UDim2 = v1("UDim2");
v3.Vector2 = v1("Vector2");
v3.Vector3 = v1("Vector3");
v3.Vector3int16 = v1("Vector3int16");
v3.Enum = v1("Enum");
v3.EnumItem = v1("EnumItem");
v3.RBXScriptSignal = v1("RBXScriptSignal");
v3.RBXScriptConnection = v1("RBXScriptConnection");
function v3.literal(...)
	local v5 = select("#", ...);
	if v5 == 1 then
		local u2 = ...;
		return function(p6)
			if p6 == u2 then
				return true;
			end;
			return false, string.format("expected %s, got %s", tostring(u2), tostring(p6));
		end;
	end;
	local v6 = {};
	for v7 = 1, v5 do
		v6[v7] = v3.literal((select(v7, ...)));
	end;
	return v3.union(table.unpack(v6, 1, v5));
end;
v3.exactly = v3.literal;
function v3.keyOf(p7)
	local v8 = {};
	local v9 = 0;
	for v10 in pairs(p7) do
		v9 = v9 + 1;
		v8[v9] = v10;
	end;
	return v3.literal(table.unpack(v8, 1, v9));
end;
function v3.valueOf(p8)
	local v11 = {};
	local v12 = 0;
	for v13, v14 in pairs(p8) do
		v12 = v12 + 1;
		v11[v12] = v14;
	end;
	return v3.literal(table.unpack(v11, 1, v12));
end;
function v3.integer(p9)
	local v15, v16 = v3.number(p9);
	if not v15 then
		return false, v16 and "";
	end;
	if p9 % 1 == 0 then
		return true;
	end;
	return false, string.format("integer expected, got %s", p9);
end;
function v3.numberMin(p10)
	return function(p11)
		local v17, v18 = v3.number(p11);
		if not v17 then
			return false, v18 and "";
		end;
		if p10 <= p11 then
			return true;
		end;
		return false, string.format("number >= %s expected, got %s", p10, p11);
	end;
end;
function v3.numberMax(p12)
	return function(p13)
		local v19, v20 = v3.number(p13);
		if not v19 then
			return false, v20;
		end;
		if p13 <= p12 then
			return true;
		end;
		return false, string.format("number <= %s expected, got %s", p12, p13);
	end;
end;
function v3.numberMinExclusive(p14)
	return function(p15)
		local v21, v22 = v3.number(p15);
		if not v21 then
			return false, v22 and "";
		end;
		if p14 < p15 then
			return true;
		end;
		return false, string.format("number > %s expected, got %s", p14, p15);
	end;
end;
function v3.numberMaxExclusive(p16)
	return function(p17)
		local v23, v24 = v3.number(p17);
		if not v23 then
			return false, v24 and "";
		end;
		if p17 < p16 then
			return true;
		end;
		return false, string.format("number < %s expected, got %s", p16, p17);
	end;
end;
v3.numberPositive = v3.numberMinExclusive(0);
v3.numberNegative = v3.numberMaxExclusive(0);
function v3.numberConstrained(p18, p19)
	assert(v3.number(p18) and v3.number(p19));
	local u3 = v3.numberMin(p18);
	local u4 = v3.numberMax(p19);
	return function(p20)
		local v25, v26 = u3(p20);
		if not v25 then
			return false, v26 and "";
		end;
		local v27, v28 = u4(p20);
		if v27 then
			return true;
		end;
		return false, v28 and "";
	end;
end;
function v3.numberConstrainedExclusive(p21, p22)
	assert(v3.number(p21) and v3.number(p22));
	local u5 = v3.numberMinExclusive(p21);
	local u6 = v3.numberMaxExclusive(p22);
	return function(p23)
		local v29, v30 = u5(p23);
		if not v29 then
			return false, v30 and "";
		end;
		local v31, v32 = u6(p23);
		if v31 then
			return true;
		end;
		return false, v32 and "";
	end;
end;
function v3.match(p24)
	assert(v3.string(p24));
	return function(p25)
		local v33, v34 = v3.string(p25);
		if not v33 then
			return false, v34;
		end;
		if string.match(p25, p24) ~= nil then
			return true;
		end;
		return false, string.format("%q failed to match pattern %q", p25, p24);
	end;
end;
function v3.optional(p26)
	assert(v3.callback(p26));
	return function(p27)
		if p27 == nil then
			return true;
		end;
		local v35, v36 = p26(p27);
		if v35 then
			return true;
		end;
		return false, string.format("(optional) %s", v36 and "");
	end;
end;
function v3.tuple(...)
	local u7 = { ... };
	return function(...)
		local v37 = { ... };
		for v38, v39 in ipairs(u7) do
			local v40, v41 = v39(v37[v38]);
			if v40 == false then
				return false, string.format("Bad tuple index #%s:\n\t%s", v38, v41 and "");
			end;
		end;
		return true;
	end;
end;
function v3.keys(p28)
	assert(v3.callback(p28));
	return function(p29)
		local v42, v43 = v3.table(p29);
		if v42 == false then
			return false, v43 and "";
		end;
		for v44 in pairs(p29) do
			local v45, v46 = p28(v44);
			if v45 == false then
				return false, string.format("bad key %s:\n\t%s", tostring(v44), v46 and "");
			end;
		end;
		return true;
	end;
end;
function v3.values(p30)
	assert(v3.callback(p30));
	return function(p31)
		local v47, v48 = v3.table(p31);
		if v47 == false then
			return false, v48 and "";
		end;
		for v49, v50 in pairs(p31) do
			local v51, v52 = p30(v50);
			if v51 == false then
				return false, string.format("bad value for key %s:\n\t%s", tostring(v49), v52 and "");
			end;
		end;
		return true;
	end;
end;
function v3.map(p32, p33)
	assert(v3.callback(p32), v3.callback(p33));
	local u8 = v3.keys(p32);
	local u9 = v3.values(p33);
	return function(p34)
		local v53, v54 = u8(p34);
		if not v53 then
			return false, v54 and "";
		end;
		local v55, v56 = u9(p34);
		if v55 then
			return true;
		end;
		return false, v56 and "";
	end;
end;
function v3.set(p35)
	return v3.map(p35, v3.literal(true));
end;
local u10 = v3.keys(v3.integer);
function v3.array(p36)
	assert(v3.callback(p36));
	local u11 = v3.values(p36);
	return function(p37)
		local v57, v58 = u10(p37);
		if v57 == false then
			return false, string.format("[array] %s", v58 and "");
		end;
		local v59 = 0;
		for v60, v61 in ipairs(p37) do
			v59 = v59 + 1;
		end;
		for v62 in pairs(p37) do
			if v62 < 1 then
				return false, string.format("[array] key %s must be sequential", tostring(v62));
			end;
			if v59 < v62 then
				return false, string.format("[array] key %s must be sequential", tostring(v62));
			end;
		end;
		local v63, v64 = u11(p37);
		if v63 then
			return true;
		end;
		return false, string.format("[array] %s", v64 and "");
	end;
end;
function v3.strictArray(...)
	local v65 = { ... };
	assert(v3.array(v3.callback)(v65));
	return function(p38)
		local v66, v67 = u10(p38);
		if v66 == false then
			return false, string.format("[strictArray] %s", v67 and "");
		end;
		if #v65 < #p38 then
			return false, string.format("[strictArray] Array size exceeds limit of %d", #v65);
		end;
		for v68, v69 in pairs(v65) do
			local v70, v71 = v69(p38[v68]);
			if not v70 then
				return false, string.format("[strictArray] Array index #%d - %s", v68, v71);
			end;
		end;
		return true;
	end;
end;
u10 = v3.array;
u10 = u10(v3.callback);
function v3.union(...)
	local v72 = { ... };
	assert(u10(v72));
	return function(p39)
		for v73, v74 in ipairs(v72) do
			if v74(p39) then
				return true;
			end;
		end;
		return false, "bad type for union";
	end;
end;
v3.some = v3.union;
function v3.intersection(...)
	local v75 = { ... };
	assert(u10(v75));
	return function(p40)
		for v76, v77 in ipairs(v75) do
			local v78, v79 = v77(p40);
			if not v78 then
				return false, v79 and "";
			end;
		end;
		return true;
	end;
end;
v3.every = v3.intersection;
u10 = v3.map;
u10 = u10(v3.any, v3.callback);
function v3.interface(p41)
	assert(u10(p41));
	return function(p42)
		local v80, v81 = v3.table(p42);
		if v80 == false then
			return false, v81 and "";
		end;
		for v82, v83 in pairs(p41) do
			local v84, v85 = v83(p42[v82]);
			if v84 == false then
				return false, string.format("[interface] bad value for %s:\n\t%s", tostring(v82), v85 and "");
			end;
		end;
		return true;
	end;
end;
function v3.strictInterface(p43)
	assert(u10(p43));
	return function(p44)
		local v86, v87 = v3.table(p44);
		if v86 == false then
			return false, v87 and "";
		end;
		for v88, v89 in pairs(p43) do
			local v90, v91 = v89(p44[v88]);
			if v90 == false then
				return false, string.format("[interface] bad value for %s:\n\t%s", tostring(v88), v91 and "");
			end;
		end;
		for v92 in pairs(p44) do
			if not p43[v92] then
				return false, string.format("[interface] unexpected field %q", tostring(v92));
			end;
		end;
		return true;
	end;
end;
u10 = function(p45, p46)
	assert(v3.string(p45));
	local v93 = nil;
	if p46 ~= nil then
		v93 = v3.children(p46);
	end;
	return function(p47)
		local v94, v95 = v3.Instance(p47);
		if not v94 then
			return false, v95 and "";
		end;
		if p47.ClassName ~= p45 then
			return false, string.format("%s expected, got %s", p45, p47.ClassName);
		end;
		if v93 then
			local v96, v97 = v93(p47);
			if not v96 then
				return false, v97;
			end;
		end;
		return true;
	end;
end;
v3.instanceOf = u10;
u10 = v3.instanceOf;
v3.instance = u10;
u10 = function(p48, p49)
	assert(v3.string(p48));
	local v98 = nil;
	if p49 ~= nil then
		v98 = v3.children(p49);
	end;
	return function(p50)
		local v99, v100 = v3.Instance(p50);
		if not v99 then
			return false, v100 and "";
		end;
		if not p50:IsA(p48) then
			return false, string.format("%s expected, got %s", p48, p50.ClassName);
		end;
		if v98 then
			local v101, v102 = v98(p50);
			if not v101 then
				return false, v102;
			end;
		end;
		return true;
	end;
end;
v3.instanceIsA = u10;
u10 = function(p51)
	assert(v3.Enum(p51));
	return function(p52)
		local v103, v104 = v3.EnumItem(p52);
		if not v103 then
			return false, v104;
		end;
		if p52.EnumType == p51 then
			return true;
		end;
		return false, string.format("enum of %s expected, got enum of %s", tostring(p51), tostring(p52.EnumType));
	end;
end;
v3.enum = u10;
u10 = v3.tuple;
u10 = u10(v3.callback, v3.callback);
function v3.wrap(p53, p54)
	assert(u10(p53, p54));
	return function(...)
		assert(p54(...));
		return p53(...);
	end;
end;
u10 = function(p55)
	return function(...)
		assert(p55(...));
	end;
end;
v3.strict = u10;
u10 = v3.map;
u10 = u10(v3.string, v3.callback);
function v3.children(p56)
	assert(u10(p56));
	return function(p57)
		local v105, v106 = v3.Instance(p57);
		if not v105 then
			return false, v106 and "";
		end;
		local v107 = {};
		for v108, v109 in ipairs(p57:GetChildren()) do
			local l__Name__110 = v109.Name;
			if p56[l__Name__110] then
				if v107[l__Name__110] then
					return false, string.format("Cannot process multiple children with the same name %q", l__Name__110);
				end;
				v107[l__Name__110] = v109;
			end;
		end;
		for v111, v112 in pairs(p56) do
			local v113, v114 = v112(v107[v111]);
			if not v113 then
				return false, string.format("[%s.%s] %s", p57:GetFullName(), v111, v114 and "");
			end;
		end;
		return true;
	end;
end;
return v3;
