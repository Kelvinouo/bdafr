-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out.MessageTemplateToken);
local v3 = setmetatable({}, {
	__tostring = function()
		return "Logger";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__LogLevel__1 = v1.import(script, script.Parent, "Core").LogLevel;
function v3.constructor(p1)
	p1.logLevel = l__LogLevel__1.Information;
	p1.sinks = {};
	p1.enrichers = {};
end;
local l__LogConfiguration__2 = v1.import(script, script.Parent, "Configuration").LogConfiguration;
function v3.configure(p2)
	return l__LogConfiguration__2.new(v3.new());
end;
function v3.SetSinks(p3, p4)
	p3.sinks = p4;
end;
function v3.SetEnrichers(p5, p6)
	p5.enrichers = p6;
end;
function v3.SetMinLogLevel(p7, p8)
	p7.logLevel = p8;
end;
function v3.default(p9)
	return p9.defaultLogger;
end;
function v3._serializeValue(p10, p11)
	if typeof(p11) == "Vector3" then
		return {
			X = p11.X, 
			Y = p11.Y, 
			Z = p11.Z
		};
	end;
	if typeof(p11) == "Vector2" then
		return {
			X = p11.X, 
			Y = p11.Y
		};
	end;
	if typeof(p11) == "Instance" then
		return p11:GetFullName();
	end;
	if typeof(p11) == "EnumItem" then
		return tostring(p11);
	end;
	if type(p11) ~= "string" and type(p11) ~= "number" and type(p11) ~= "boolean" and type(p11) ~= "table" then
		return tostring(p11);
	end;
	return p11;
end;
local l__MessageTemplateParser__3 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out.MessageTemplateParser).MessageTemplateParser;
local l__TemplateTokenKind__4 = v2.TemplateTokenKind;
local l__DestructureMode__5 = v2.DestructureMode;
local l__RbxSerializer__6 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out.RbxSerializer).RbxSerializer;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out).PlainTextMessageTemplateRenderer;
function v3.Write(p12, p13, p14, ...)
	local v5 = { ... };
	local v6 = {
		Level = p13, 
		SourceContext = nil, 
		Template = p14, 
		Timestamp = DateTime.now():ToIsoDate()
	};
	local v7 = l__MessageTemplateParser__3.GetTokens(p14);
	local v8 = {};
	local v9 = 0;
	local v10, v11, v12 = ipairs(v7);
	while true do
		v10(v11, v12);
		if not v10 then
			break;
		end;
		if v11.kind == l__TemplateTokenKind__4.Property == true then
			v9 = v9 + 1;
			v8[v9] = v11;
		end;	
	end;
	local v13 = 0;
	local v14, v15, v16 = ipairs(v8);
	while true do
		v14(v15, v16);
		if not v14 then
			break;
		end;
		v16 = v14;
		v13 = v13 + 1;
		local v17 = v5[v13 + 1];
		if v13 <= #v5 and v17 ~= nil then
			if v15.destructureMode == l__DestructureMode__5.ToString then
				v6[v15.propertyName] = tostring(v17);
			else
				if type(v17) == "table" then
					local v18 = v17;
				else
					v18 = l__RbxSerializer__6.Serialize(v17);
				end;
				v6[v15.propertyName] = v18;
			end;
		end;	
	end;
	local v19, v20, v21 = ipairs(p12.enrichers);
	while true do
		v19(v20, v21);
		if not v19 then
			break;
		end;
		v21 = v19;
		local v22 = {};
		v20:Enrich(v6, v22);
		for v23, v24 in pairs(v22) do
			if type(v24) == "table" then
				local v25 = v24;
			else
				v25 = l__RbxSerializer__6.Serialize(v24);
			end;
			v6[v23] = v25;
		end;	
	end;
	local v26, v27, v28 = ipairs(p12.sinks);
	while true do
		v26(v27, v28);
		if not v26 then
			break;
		end;
		v28 = v26;
		v27:Emit(v6);	
	end;
	return u7.new(v7):Render(v6);
end;
function v3.GetLevel(p15)
	return p15.logLevel;
end;
function v3.Verbose(p16, p17, ...)
	if l__LogLevel__1.Verbose < p16:GetLevel() then
		return nil;
	end;
	p16:Write(l__LogLevel__1.Verbose, p17, unpack({ ... }));
end;
function v3.Info(p18, p19, ...)
	if l__LogLevel__1.Information < p18:GetLevel() then
		return nil;
	end;
	p18:Write(l__LogLevel__1.Information, p19, unpack({ ... }));
end;
function v3.Debug(p20, p21, ...)
	if l__LogLevel__1.Debugging < p20:GetLevel() then
		return nil;
	end;
	p20:Write(l__LogLevel__1.Debugging, p21, unpack({ ... }));
end;
function v3.Warn(p22, p23, ...)
	if l__LogLevel__1.Warning < p22:GetLevel() then
		return nil;
	end;
	p22:Write(l__LogLevel__1.Warning, p23, unpack({ ... }));
end;
function v3.Error(p24, p25, ...)
	if l__LogLevel__1.Error < p24:GetLevel() then
		return nil;
	end;
	return p24:Write(l__LogLevel__1.Error, p25, unpack({ ... }));
end;
function v3.Fatal(p26, p27, ...)
	return p26:Write(l__LogLevel__1.Fatal, p27, unpack({ ... }));
end;
function v3.Copy(p28)
	local v29 = l__LogConfiguration__2.new(v3.new());
	v29:SetMinLogLevel(p28:GetLevel());
	local v30, v31, v32 = ipairs(p28.sinks);
	while true do
		v30(v31, v32);
		if not v30 then
			break;
		end;
		v32 = v30;
		v29:WriteTo(v31);	
	end;
	local v33, v34, v35 = ipairs(p28.enrichers);
	while true do
		v33(v34, v35);
		if not v33 then
			break;
		end;
		v35 = v33;
		v29:Enrich(v34);	
	end;
	return v29;
end;
function v3.ForContext(p29, p30, p31)
	local v36 = p29:Copy();
	if typeof(p30) == "Instance" then
		local v37 = p30:GetFullName();
	else
		v37 = tostring(p30);
	end;
	if p31 ~= nil then
		p31(v36);
	end;
	return v36:EnrichWithProperties({
		SourceContext = v37, 
		SourceKind = "Context"
	}):Create();
end;
function v3.ForScript(p32, p33)
	local v38 = p32:Copy();
	if p33 ~= nil then
		p33(v38);
	end;
	return v38:EnrichWithProperties({
		SourceContext = debug.info(2, "s"), 
		SourceKind = "Script"
	}):Create();
end;
function v3.ForFunction(p34, p35, p36)
	local v39, v40, v41 = debug.info(p35, "nls");
	local v42 = p34:Copy();
	if p36 ~= nil then
		p36(v42);
	end;
	local v43 = {};
	local v44 = v39;
	if v44 == nil then
		v44 = "(anonymous)";
	end;
	v43.SourceContext = "function '" .. v44 .. "'";
	v43.SourceLine = v40;
	v43.SourceFile = v41;
	v43.SourceKind = "Function";
	return v42:EnrichWithProperties(v43):Create();
end;
function v3.ForProperty(p37, p38, p39)
	return p37:Copy():EnrichWithProperty(p38, p39):Create();
end;
function v3.ForProperties(p40, p41)
	return p40:Copy():EnrichWithProperties(p41):Create();
end;
v3.defaultLogger = v3.new();
return {
	Logger = v3
};
