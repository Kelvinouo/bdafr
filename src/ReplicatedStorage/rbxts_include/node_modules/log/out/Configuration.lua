-- Script Hash: 0af5864e057fce21211b242ce0142654fe7473a853b13fe0994293e8c3711a24cced6151c49e9776fdefbab3ea338c56
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "LogConfiguration";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
local l__RunService__1 = game:GetService("RunService");
local l__LogLevel__2 = v1.import(script, script.Parent, "Core").LogLevel;
function v2.constructor(p1, p2)
	p1.logger = p2;
	p1.sinks = {};
	p1.enrichers = {};
	if l__RunService__1:IsStudio() then
		local v4 = l__LogLevel__2.Debugging;
	else
		v4 = l__LogLevel__2.Information;
	end;
	p1.logLevel = v4;
end;
function v2.WriteTo(p3, p4, p5)
	if p5 ~= nil then
		p5(p4);
	end;
	local l__sinks__5 = p3.sinks;
	l__sinks__5[#l__sinks__5 + 1] = p4;
	return p3;
end;
local l__LogEventCallbackSink__3 = v1.import(script, script.Parent, "Core", "LogEventCallbackSink").LogEventCallbackSink;
function v2.WriteToCallback(p6, p7, p8)
	local v6 = l__LogEventCallbackSink__3.new(p7);
	if p8 ~= nil then
		p8(v6);
	end;
	local l__sinks__7 = p6.sinks;
	l__sinks__7[#l__sinks__7 + 1] = v6;
	return p6;
end;
function v2.Enrich(p9, p10)
	if type(p10) == "function" then
		return p9;
	end;
	local l__enrichers__8 = p9.enrichers;
	l__enrichers__8[#l__enrichers__8 + 1] = p10;
	return p9;
end;
function v2.EnrichWithProperty(p11, p12, p13, p14)
	return p11:EnrichWithProperties({
		[p12] = p13
	}, p14);
end;
local l__LogEventPropertyEnricher__4 = v1.import(script, script.Parent, "Core", "LogEventPropertyEnricher").LogEventPropertyEnricher;
function v2.EnrichWithProperties(p15, p16, p17)
	local v9 = l__LogEventPropertyEnricher__4.new(p16);
	if p17 ~= nil then
		p17(v9);
	end;
	local l__enrichers__10 = p15.enrichers;
	l__enrichers__10[#l__enrichers__10 + 1] = v9;
	return p15;
end;
function v2.SetMinLogLevel(p18, p19)
	p18.logLevel = p19;
	return p18;
end;
function v2.Create(p20)
	p20.logger:_setSinks(p20.sinks);
	p20.logger:_setEnrichers(p20.enrichers);
	p20.logger:_setMinLogLevel(p20.logLevel);
	return p20.logger;
end;
return {
	LogConfiguration = v2
};
