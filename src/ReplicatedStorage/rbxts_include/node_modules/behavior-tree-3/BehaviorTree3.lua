-- Decompiled with the Synapse X Luau decompiler.

local l__RunService__1 = game:GetService("RunService");
local l__CollectionService__2 = game:GetService("CollectionService");
local v3 = l__RunService__1:IsRunning() and l__RunService__1:IsStudio();
local v4 = {};
local v5 = {};
local v6 = nil;
if v3 then
	local v7 = Instance.new("Camera", script);
	v7.Name = "NonReplicated";
	v6 = Instance.new("Folder", v7);
	v6.Name = "RunningTrees(debug)";
	l__CollectionService__2:AddTag(v6, "_btRunningTrees");
end;
v4.SharedBlackboards = {};
local function u1(p1, p2)
	if p1.type == "task" then
		assert(p1.params.run, "Can't process tree; task leaf node has no run func parameter");
		local v8 = {
			type = "task"
		};
		p2[#p2 + 1] = v8;
		v8.start = p1.params.start;
		v8.run = p1.params.run;
		v8.finish = p1.params.finish;
		v8.onsuccess = true;
		v8.onfail = false;
		v8.nodefolder = p1.params.nodefolder;
		return;
	end;
	if p1.type == "blackboard" then
		local v9 = {
			type = "blackboard"
		};
		p2[#p2 + 1] = v9;
		v9.onsuccess = true;
		v9.onfail = false;
		v9.key = p1.params.key;
		v9.board = p1.params.board;
		local v10 = p1.params.value:lower();
		local v11 = false;
		if v10 == "true" then
			v9.returntype = 1;
		elseif v10 == "false" then
			v9.returntype = 2;
		elseif v10 == "unset" or v10 == "nil" then
			v9.returntype = 3;
		elseif v10 == "set" then
			v9.returntype = 4;
		else
			v11 = true;
			v9.returntype = p1.params.value;
		end;
		v9.comparestring = v11;
		return;
	end;
	if p1.type == "tree" then
		assert(p1.params.tree, "Can't process tree; tree leaf node has no linked tree object");
		local v12 = {
			type = "tree"
		};
		p2[#p2 + 1] = v12;
		v12.tree = p1.params.tree;
		v12.onsuccess = true;
		v12.onfail = false;
		v12.nodefolder = p1.params.nodefolder;
		return;
	end;
	if p1.type == "always_succeed" then
		assert(#p1.params.nodes <= 1, "Can't process tree; succeed decorator with multiple children");
		if p1.params.nodes[1] then
			local u2 = 0;
			local u3 = nil;
			local u4 = nil;
			local u5 = 0;
			local function v13()
				u2 = u2 + 1;
				if u2 == #p2 + 1 then
					u3 = nil;
				end;
				if not u3 then
					if u4 then
						return nil;
					end;
					u5 = u5 + 1;
					u3 = p1.params.nodes[u5];
					u4 = u5 == #p1.params.nodes;
					u2 = #p2 + 1;
					u1(u3, p2);
				end;
				return p2[u2], #p2 + 1, u4;
			end;
			local v14 = nil;
			local v15 = nil;
			while true do
				local v16, v17, v18 = v13(v14, v15);
				if not v16 then
					break;
				end;
				if v16.onsuccess == false then
					v16.onsuccess = true;
				end;
				if v16.onfail == false then
					v16.onfail = true;
				end;			
			end;
			return;
		else
			local v19 = {
				type = "succeed"
			};
			p2[#p2 + 1] = v19;
			v19.onsuccess = true;
			return;
		end;
	end;
	if p1.type == "always_fail" then
		assert(#p1.params.nodes <= 1, "Can't process tree; fail decorator with multiple children");
		if p1.params.nodes[1] then
			local u6 = 0;
			local u7 = nil;
			local u8 = nil;
			local u9 = 0;
			local function v20()
				u6 = u6 + 1;
				if u6 == #p2 + 1 then
					u7 = nil;
				end;
				if not u7 then
					if u8 then
						return nil;
					end;
					u9 = u9 + 1;
					u7 = p1.params.nodes[u9];
					u8 = u9 == #p1.params.nodes;
					u6 = #p2 + 1;
					u1(u7, p2);
				end;
				return p2[u6], #p2 + 1, u8;
			end;
			local v21 = nil;
			local v22 = nil;
			while true do
				local v23, v24, v25 = v20(v21, v22);
				if not v23 then
					break;
				end;
				if v23.onsuccess == true then
					v23.onsuccess = false;
				end;
				if v23.onfail == true then
					v23.onfail = false;
				end;			
			end;
			return;
		else
			local v26 = {
				type = "fail"
			};
			p2[#p2 + 1] = v26;
			v26.onfail = false;
			return;
		end;
	end;
	if p1.type == "invert" then
		assert(#p1.params.nodes <= 1, "Can't process tree; invert decorator with multiple children");
		assert(#p1.params.nodes == 1, "Can't process tree; hanging invert decorator");
		local u10 = 0;
		local u11 = nil;
		local u12 = nil;
		local u13 = 0;
		local function v27()
			u10 = u10 + 1;
			if u10 == #p2 + 1 then
				u11 = nil;
			end;
			if not u11 then
				if u12 then
					return nil;
				end;
				u13 = u13 + 1;
				u11 = p1.params.nodes[u13];
				u12 = u13 == #p1.params.nodes;
				u10 = #p2 + 1;
				u1(u11, p2);
			end;
			return p2[u10], #p2 + 1, u12;
		end;
		local v28 = nil;
		local v29 = nil;
		while true do
			local v30, v31, v32 = v27(v28, v29);
			if not v30 then
				break;
			end;
			if v30.onsuccess == true then
				v30.onsuccess = false;
			elseif v30.onsuccess == false then
				v30.onsuccess = true;
			end;
			if v30.onfail == false then
				v30.onfail = true;
			elseif v30.onfail == true then
				v30.onfail = false;
			end;		
		end;
		return;
	end;
	if p1.type == "repeat" then
		assert(#p1.params.nodes <= 1, "Can't process tree; repeat decorator with multiple children");
		assert(#p1.params.nodes == 1, "Can't process tree; hanging repeat decorator");
		local v33 = #p2 + 1;
		if p1.params.count then
			local v34 = p1.params.count > 0 and p1.params.count or nil;
		else
			v34 = nil;
		end;
		if v34 and v34 > 0 then
			p2[#p2 + 1] = {
				type = "repeat-start"
			};
			local v35 = {
				type = "repeat"
			};
			p2[#p2 + 1] = v35;
			v35.repeatGoal = v34;
			v35.repeatCount = 0;
			v35.onsuccess = true;
			v35.onfail = false;
			v33 = #p2;
		end;
		local l__breakonfail__36 = p1.params.breakonfail;
		local u14 = 0;
		local u15 = nil;
		local u16 = nil;
		local u17 = 0;
		local function v37()
			u14 = u14 + 1;
			if u14 == #p2 + 1 then
				u15 = nil;
			end;
			if not u15 then
				if u16 then
					return nil;
				end;
				u17 = u17 + 1;
				u15 = p1.params.nodes[u17];
				u16 = u17 == #p1.params.nodes;
				u14 = #p2 + 1;
				u1(u15, p2);
			end;
			return p2[u14], #p2 + 1, u16;
		end;
		local v38 = nil;
		local v39 = nil;
		while true do
			local v40, v41, v42 = v37(v38, v39);
			if not v40 then
				break;
			end;
			if v40.onsuccess == true then
				v40.onsuccess = v33;
			elseif v40.onsuccess == false and not l__breakonfail__36 then
				v40.onsuccess = v33;
			end;
			if v40.onfail == false and not l__breakonfail__36 then
				v40.onfail = v33;
			elseif v40.onfail == true then
				v40.onfail = v33;
			end;		
		end;
		return;
	end;
	if p1.type == "while" then
		assert(#p1.params.nodes == 2, "Can't process tree; while composite without 2 children");
		local v43 = #p2 + 1;
		if p1.params.count then
			local v44 = p1.params.count > 0 and p1.params.count or nil;
		else
			v44 = nil;
		end;
		if v44 and v44 > 0 then
			p2[#p2 + 1] = {
				type = "repeat-start"
			};
			local v45 = {
				type = "repeat"
			};
			p2[#p2 + 1] = v45;
			v45.repeatGoal = v44;
			v45.repeatCount = 0;
			v45.onsuccess = false;
			v45.onfail = false;
			v43 = #p2;
		end;
		u1(p1.params.nodes[1], p2);
		local v46 = #p2 + 1;
		u1(p1.params.nodes[2], p2);
		for v47 = #p2 + 1, v46 - 1 do
			local v48 = p2[v47];
			if v48.onsuccess == true then
				v48.onsuccess = v46;
			end;
			if v48.onfail == true then
				v48.onfail = v46;
			end;
		end;
		for v49 = v46, #p2 do
			local v50 = p2[v49];
			if v50.onsuccess == false then
				v50.onsuccess = v43;
			end;
			if v50.onfail == false then
				v50.onfail = v43;
			end;
		end;
		return;
	end;
	if p1.type == "sequence" then
		assert(#p1.params.nodes >= 1, "Can't process tree; sequence composite node has no children");
		local u18 = 0;
		local u19 = nil;
		local u20 = nil;
		local u21 = 0;
		local function v51()
			u18 = u18 + 1;
			if u18 == #p2 + 1 then
				u19 = nil;
			end;
			if not u19 then
				if u20 then
					return nil;
				end;
				u21 = u21 + 1;
				u19 = p1.params.nodes[u21];
				u20 = u21 == #p1.params.nodes;
				u18 = #p2 + 1;
				u1(u19, p2);
			end;
			return p2[u18], #p2 + 1, u20;
		end;
		local v52 = nil;
		local v53 = nil;
		while true do
			local v54, v55, v56 = v51(v52, v53);
			if not v54 then
				break;
			end;
			if v54.onsuccess == true then
				v54.onsuccess = not v56 and v55 or true;
			end;
			if v54.onfail == true then
				v54.onfail = not v56 and v55 or true;
			end;		
		end;
		return;
	end;
	if p1.type == "selector" then
		assert(#p1.params.nodes >= 1, "Can't process tree; selector composite node has no children");
		local u22 = 0;
		local u23 = nil;
		local u24 = nil;
		local u25 = 0;
		local function v57()
			u22 = u22 + 1;
			if u22 == #p2 + 1 then
				u23 = nil;
			end;
			if not u23 then
				if u24 then
					return nil;
				end;
				u25 = u25 + 1;
				u23 = p1.params.nodes[u25];
				u24 = u25 == #p1.params.nodes;
				u22 = #p2 + 1;
				u1(u23, p2);
			end;
			return p2[u22], #p2 + 1, u24;
		end;
		local v58 = nil;
		local v59 = nil;
		while true do
			local v60, v61, v62 = v57(v58, v59);
			if not v60 then
				break;
			end;
			if v60.onsuccess == false then
				v60.onsuccess = not v62 and v61 or false;
			end;
			if v60.onfail == false then
				v60.onfail = not v62 and v61 or false;
			end;		
		end;
		return;
	end;
	if p1.type ~= "random" then
		if p1.type == "root" then
			assert(#p2 == 0, "Can't process tree; root node found at nonroot location");
			u1(p1.tree, p2);
			for v63 = 1, #p2 do
				local v64 = p2[v63];
				if v64.onsuccess == true then
					v64.onsuccess = #p2 + 1;
				elseif v64.onsuccess == false then
					v64.onsuccess = #p2 + 2;
				end;
				if v64.onfail == true then
					v64.onfail = #p2 + 1;
				elseif v64.onfail == false then
					v64.onfail = #p2 + 2;
				end;
			end;
			return;
		else
			error("ProcessNode: bad node.type " .. tostring(p1.type));
			return;
		end;
	end;
	assert(#p1.params.nodes >= 1, "Can't process tree; random composite node has no children");
	local v65 = {
		type = "random"
	};
	p2[#p2 + 1] = v65;
	v65.indices = {};
	for v66, v67 in pairs(p1.params.nodes) do
		if v67.weight then
			local v68 = #v65.indices;
			local v69 = #p2 + 1;
			for v70 = 1, v67.weight do
				v65.indices[v68 + v70] = v69;
			end;
		else
			v65.indices[#v65.indices + 1] = #p2 + 1;
		end;
		u1(v67, p2);
	end;
end;
local v71 = {
	abort = function(p3, p4, ...)
		assert(typeof(p4) == "table", "The first argument of a behavior tree's abort method must be a table!");
		local v72 = p3.IndexLookup[p4];
		if not v72 then
			return;
		end;
		local v73 = p3.nodes[v72];
		if v73.type == "task" and v73.finish then
			v73.finish(p4, 2, ...);
		end;
		p3.IndexLookup[p4] = 1;
	end
};
function v71.run(p5, p6, ...)
	assert(typeof(p6) == "table", "The first argument of a behavior tree's run method must be a table!");
	local v74 = nil;
	if v3 and p5.folder then
		local l__Name__75 = p5.folder.Name;
		local v76 = tostring(p6);
		local v77 = v6:FindFirstChild(l__Name__75);
		if not v77 then
			v77 = Instance.new("Folder");
			v77.Name = l__Name__75;
			v77.Parent = v6;
		end;
		local v78 = v77:FindFirstChild(v76);
		if not v78 then
			local v79 = Instance.new("Folder");
			v79.Name = v76;
			Instance.new("ObjectValue", v79).Name = "Node";
			local v80 = Instance.new("ObjectValue", v79);
			v80.Name = "TreeFolder";
			v80.Value = p5.folder;
			local v81 = p6.name or p6.Name;
			if v81 and typeof(v81) ~= "string" then
				v81 = nil;
			end;
			if not v81 then
				for v82, v83 in pairs(p6) do
					if typeof(v83) == "Instance" then
						v81 = v83.Name;
					end;
				end;
			end;
			if v81 then
				local v84 = Instance.new("StringValue", v78);
				v84.Name = "Name";
				v84.Value = v81;
			end;
			v78.Parent = v77;
		end;
		v74 = v78.Node;
	end;
	if p5.running then
		return;
	end;
	local l__nodes__85 = p5.nodes;
	local v86 = p5.IndexLookup[p6] and 1;
	local v87 = p6.Blackboard;
	if not v87 then
		v87 = {};
		p6.Blackboard = v87;
	end;
	if not p6.SharedBlackboards then
		p6.SharedBlackboards = v4.SharedBlackboards;
	end;
	local v88 = #l__nodes__85;
	local v89 = p5.paused;
	p5.paused = false;
	p5.running = true;
	while v86 <= v88 do
		local v90 = l__nodes__85[v86];
		if v3 and p5.folder then
			v74.Value = v90.nodefolder;
		end;
		if v90.type == "task" then
			if v89 then
				v89 = false;
			elseif v90.start then
				v90.start(p6, ...);
			end;
			local v91 = v90.run(p6, ...);
			if v91 == nil then
				warn("node.run did not call success, running or fail, acting as fail");
				v91 = 2;
			end;
			if v91 == 3 then
				p5.paused = true;
				break;
			end;
			if v91 == 1 then
				if v90.finish then
					v90.finish(p6, v91, ...);
				end;
				v86 = v90.onsuccess;
			elseif v91 == 2 then
				if v90.finish then
					v90.finish(p6, v91, ...);
				end;
				v86 = v90.onfail;
			else
				error("bad node.status");
			end;
		elseif v90.type == "blackboard" then
			local v92 = false;
			if v90.board == "Entity" then
				local v93 = v87;
			else
				local v94 = v4.SharedBlackboards[v90.board];
				if not v94 then
					warn(string.format("Shared Blackboard %s is not registered, acting as fail"), v90.board);
				end;
				v93 = v94;
			end;
			if v93 then
				local v95 = v93[v90.key];
				local v96 = tostring(v95);
				if v90.comparestring then
					v92 = v96 and v96 == v90.returntype;
				elseif v90.returntype == 1 then
					v92 = v95 == true;
				elseif v90.returntype == 2 then
					v92 = v95 == false;
				elseif v90.returntype == 3 then
					if v95 ~= nil then
						v92 = false;
					else
						v92 = true;
					end;
				elseif v90.returntype == 4 then
					if v95 == nil then
						v92 = false;
					else
						v92 = true;
					end;
				end;
			end;
			v86 = v92 == true and v90.onsuccess or v90.onfail;
		elseif v90.type == "tree" then
			local v97 = v90.tree:run(p6, ...);
			if v97 == 3 then
				p5.paused = true;
				break;
			end;
			if v97 == 1 then
				v86 = v90.onsuccess;
			elseif v97 == 2 then
				v86 = v90.onfail;
			else
				error("bad tree result");
			end;
		elseif v90.type == "random" then
			v86 = v90.indices[math.random(1, #v90.indices)];
		elseif v90.type == "repeat-start" then
			v86 = v86 + 1;
			l__nodes__85[v86].repeatCount = 0;
		elseif v90.type == "repeat" then
			v90.repeatCount = v90.repeatCount + 1;
			if v90.repeatGoal < v90.repeatCount then
				v86 = v90.onsuccess;
			else
				v86 = v86 + 1;
			end;
		elseif v90.type == "succeed" then
			v86 = v90.onsuccess;
		elseif v90.type == "fail" then
			v86 = v90.onfail;
		else
			error("bad node.type");
		end;	
	end;
	if v86 == v88 + 1 then
		local v98 = 1;
	elseif v86 == v88 + 2 then
		v98 = 2;
	else
		v98 = 3;
	end;
	p5.IndexLookup[p6] = v86 <= v88 and v86 or 1;
	p5.running = false;
	return v98;
end;
v71.Run = v71.run;
v71.Abort = v71.abort;
function v4.new(p7)
	local v99 = {};
	u1({
		type = "root", 
		tree = p7.tree, 
		params = {}
	}, v99);
	return setmetatable({
		nodes = v99, 
		IndexLookup = {}, 
		folder = p7.treeFolder
	}, {
		__index = v71
	});
end;
function v4.Sequence(p8)
	return {
		type = "sequence", 
		params = p8
	};
end;
function v4.Selector(p9)
	return {
		type = "selector", 
		params = p9
	};
end;
function v4.Random(p10)
	return {
		type = "random", 
		params = p10
	};
end;
function v4.While(p11)
	return {
		type = "while", 
		params = p11
	};
end;
function v4.Succeed(p12)
	return {
		type = "always_succeed", 
		params = p12
	};
end;
function v4.Fail(p13)
	return {
		type = "always_fail", 
		params = p13
	};
end;
function v4.Invert(p14)
	return {
		type = "invert", 
		params = p14
	};
end;
function v4.Repeat(p15)
	return {
		type = "repeat", 
		params = p15
	};
end;
function v4.Task(p16)
	return {
		type = "task", 
		params = p16
	};
end;
function v4.Tree(p17)
	return {
		type = "tree", 
		params = p17
	};
end;
v4["Blackboard Query"] = function(p18)
	return {
		type = "blackboard", 
		params = p18
	};
end;
return v4;
