-- Script Hash: a04cfb16d91b4dd6bcc8c4e1e4dee1ad4d4005dc15e9af031bf8af518734e5fb8d070c323941d4ab1c0df4b84ce492b6
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	Create = function(p1, p2)
		assert(p2, "Invalid parameters, expecting treeFolder, object");
		local v2 = p1:_getTree(p2);
		if v2 then
			return v2;
		end;
		warn("Couldn't get tree for ", p2);
	end
};
local u1 = require(script.Parent.BehaviorTree3);
function v1.RegisterSharedBlackboard(p3, p4, p5)
	local v3 = p4;
	if v3 then
		v3 = p5;
		if v3 then
			v3 = false;
			if typeof(p4) == "string" then
				v3 = typeof(p5) == "table";
			end;
		end;
	end;
	assert(v3, "RegisterSharedBlackboard takes two arguments in the form of [string] index,[table] table");
	u1.SharedBlackboards[p4] = p5;
end;
local u2 = {};
local function u3(p6)
	local v4 = nil;
	local v5 = p6:FindFirstChildWhichIsA("ModuleScript");
	if v5 then
		return v5;
	end;
	local l__Link__6 = p6:FindFirstChild("Link");
	if l__Link__6 then
		v4 = l__Link__6.Value;
		if not v4 then
			return;
		end;
	else
		return;
	end;
	return u3(v4);
end;
local function u4(p7)
	local v7 = u2[p7];
	if v7 then
		return v7;
	end;
	local v8 = require(p7);
	u2[p7] = v8;
	return v8;
end;
function v1._getSourceTask(p8, p9)
	local v9 = u3(p9);
	if not v9 then
		return;
	end;
	return u4(v9);
end;
function v1._buildNode(p10, p11)
	local l__Value__10 = p11.Type.Value;
	local v11 = p11:FindFirstChild("Weight") and p11.Weight.Value or 1;
	local v12 = p11.Outputs:GetChildren();
	local v13 = {};
	for v14 = 1, #v12 do
		table.insert(v13, v12[v14]);
	end;
	table.sort(v13, function(p12, p13)
		return tonumber(p12.Name) < tonumber(p13.Name);
	end);
	for v15 = 1, #v13 do
		v13[v15] = p10:_buildNode(v13[v15].Value);
	end;
	local v16 = {};
	for v17, v18 in pairs(p11.Parameters:GetChildren()) do
		if v18.Name ~= "Index" then
			v16[string.lower(v18.Name)] = v18.Value;
		end;
	end;
	v16.nodes = v13;
	v16.nodefolder = p11;
	if l__Value__10 == "Task" then
		local v19 = p10:_getSourceTask(p11);
		assert(v19, "could't build tree; task node had no module");
		v16.start = v19.start;
		v16.run = v19.run;
		v16.finish = v19.finish;
	elseif l__Value__10 == "Tree" then
		local v20 = p10:_getTreeFromId(v16.treeid);
		assert(v20, string.format("could't build tree; couldn't get tree object for tree node with TreeID:  %s!", tostring(v16.treeid)));
		v16.tree = v20;
	end;
	local v21 = u1[l__Value__10](v16);
	v21.weight = v11;
	return v21;
end;
local u5 = {};
local u6 = {};
function v1._createTree(p14, p15)
	print("Attempt create tree: ", p15);
	local l__Root__22 = p15.Nodes:FindFirstChild("Root");
	assert(l__Root__22, string.format("Could not find Root under BehaviorTrees.Trees.%s.Nodes!", p15.Name));
	assert(#l__Root__22.Outputs:GetChildren() == 1, string.format("The root node does not have exactly one connection for %s!", p15.Name));
	local v23 = u1.new({
		tree = p14:_buildNode(l__Root__22.Outputs:GetChildren()[1].Value), 
		treeFolder = p15
	});
	u5[p15] = v23;
	u6[p15.Name] = v23;
	return v23;
end;
function v1._getTree(p16, p17)
	return u5[p17] or p16:_createTree(p17);
end;
local l__CollectionService__7 = game:GetService("CollectionService");
function v1._getTreeFromId(p18, p19)
	local v24 = u6[p19];
	if v24 then
		return v24;
	end;
	for v25, v26 in pairs(l__CollectionService__7:GetTagged("_BTree")) do
		if v26.Name == p19 then
			return p18:_getTree(v26);
		end;
	end;
end;
return v1;
