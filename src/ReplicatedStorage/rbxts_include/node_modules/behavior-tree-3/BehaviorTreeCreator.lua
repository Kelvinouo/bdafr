-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	Create = function(p1, p2)
		assert(p2, "Invalid parameters, expecting treeFolder, object");
		local v2 = p1:_getTree(p2);
		if v2 then
			return v2;
		end;
		warn("Couldn't get tree for ", p2);
	end
};
local u1 = require(script.Parent.BehaviorTree3);
function v1.RegisterSharedBlackboard(p3, p4, p5)
	local v3 = p4;
	if v3 then
		v3 = p5;
		if v3 then
			v3 = false;
			if typeof(p4) == "string" then
				v3 = typeof(p5) == "table";
			end;
		end;
	end;
	assert(v3, "RegisterSharedBlackboard takes two arguments in the form of [string] index,[table] table");
	u1.SharedBlackboards[p4] = p5;
end;
local u2 = {};
local function u3(p6)
	local v4 = nil;
	local v5 = p6:FindFirstChildWhichIsA("ModuleScript");
	if v5 then
		return v5;
	end;
	local l__Link__6 = p6:FindFirstChild("Link");
	if l__Link__6 then
		v4 = l__Link__6.Value;
		if not v4 then
			return;
		end;
	else
		return;
	end;
	return u3(v4);
end;
function v1._getSourceTask(p7, p8)
	local v7 = p8:FindFirstChildWhichIsA("ModuleScript");
	if v7 then
		local v8 = v7;
	else
		local l__Link__9 = p8:FindFirstChild("Link");
		if l__Link__9 then
			local l__Value__10 = l__Link__9.Value;
			if l__Value__10 then
				v8 = u3(l__Value__10);
			else
				v8 = nil;
			end;
		else
			v8 = nil;
		end;
	end;
	if not v8 then
		return;
	end;
	local v11 = u2[v8];
	if v11 then
		return v11;
	end;
	local v12 = require(v8);
	u2[v8] = v12;
	return v12;
end;
function v1._buildNode(p9, p10)
	local l__Value__13 = p10.Type.Value;
	local v14 = p10:FindFirstChild("Weight") and p10.Weight.Value or 1;
	local v15 = p10.Outputs:GetChildren();
	local v16 = {};
	for v17 = 1, #v15 do
		table.insert(v16, v15[v17]);
	end;
	table.sort(v16, function(p11, p12)
		return tonumber(p11.Name) < tonumber(p12.Name);
	end);
	for v18 = 1, #v16 do
		v16[v18] = p9:_buildNode(v16[v18].Value);
	end;
	local v19 = {};
	for v20, v21 in pairs(p10.Parameters:GetChildren()) do
		if v21.Name ~= "Index" then
			v19[string.lower(v21.Name)] = v21.Value;
		end;
	end;
	v19.nodes = v16;
	v19.nodefolder = p10;
	if l__Value__13 == "Task" then
		local v22 = p9:_getSourceTask(p10);
		assert(v22, "could't build tree; task node had no module");
		v19.start = v22.start;
		v19.run = v22.run;
		v19.finish = v22.finish;
	elseif l__Value__13 == "Tree" then
		local v23 = p9:_getTreeFromId(v19.treeid);
		assert(v23, string.format("could't build tree; couldn't get tree object for tree node with TreeID:  %s!", tostring(v19.treeid)));
		v19.tree = v23;
	end;
	local v24 = u1[l__Value__13](v19);
	v24.weight = v14;
	return v24;
end;
local u4 = {};
local u5 = {};
function v1._createTree(p13, p14)
	print("Attempt create tree: ", p14);
	local l__Root__25 = p14.Nodes:FindFirstChild("Root");
	assert(l__Root__25, string.format("Could not find Root under BehaviorTrees.Trees.%s.Nodes!", p14.Name));
	assert(#l__Root__25.Outputs:GetChildren() == 1, string.format("The root node does not have exactly one connection for %s!", p14.Name));
	local v26 = u1.new({
		tree = p13:_buildNode(l__Root__25.Outputs:GetChildren()[1].Value), 
		treeFolder = p14
	});
	u4[p14] = v26;
	u5[p14.Name] = v26;
	return v26;
end;
function v1._getTree(p15, p16)
	return u4[p16] or p15:_createTree(p16);
end;
local l__CollectionService__6 = game:GetService("CollectionService");
function v1._getTreeFromId(p17, p18)
	local v27 = u5[p18];
	if v27 then
		return v27;
	end;
	for v28, v29 in pairs(l__CollectionService__6:GetTagged("_BTree")) do
		if v29.Name == p18 then
			return p17:_getTree(v29);
		end;
	end;
end;
return v1;
