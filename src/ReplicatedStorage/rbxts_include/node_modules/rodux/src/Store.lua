
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	_flushEvent = game:GetService("RunService").Heartbeat
};
v1.__index = v1;
local u1 = {
	reportReducerError = function(p1, p2, p3)
		error(string.format("Received error: %s\n\n%s", p3.message, p3.thrownValue));
	end, 
	reportUpdateError = function(p4, p5, p6, p7)
		error(string.format("Received error: %s\n\n%s", p7.message, p7.thrownValue));
	end
};
local function u2(p8)
	return debug.traceback(tostring(p8));
end;
local u3 = require(script.Parent.Signal);
function v1.new(p9, p10, p11, p12)
	assert(typeof(p9) == "function", "Bad argument #1 to Store.new, expected function.");
	local v2 = true;
	if p11 ~= nil then
		v2 = typeof(p11) == "table";
	end;
	assert(v2, "Bad argument #3 to Store.new, expected nil or table.");
	if p11 ~= nil then
		for v3 = 1, #p11 do
			assert(typeof(p11[v3]) == "function", ("Expected the middleware ('%s') at index %d to be a function."):format(tostring(p11[v3]), v3));
		end;
	end;
	local v4 = {
		_errorReporter = p12 or u1, 
		_isDispatching = false, 
		_reducer = p9
	};
	local v5 = {
		type = "@@INIT"
	};
	v4._actionLog = { v5 };
	local v6, v7 = xpcall(function()
		v4._state = p9(p10, v5);
	end, u2);
	if not v6 then
		v4._errorReporter.reportReducerError(p10, v5, {
			message = "Caught error in reducer with init", 
			thrownValue = v7
		});
		v4._state = p10;
	end;
	v4._lastState = v4._state;
	v4._mutatedSinceFlush = false;
	v4._connections = {};
	v4.changed = u3.new(v4);
	setmetatable(v4, v1);
	table.insert(v4._connections, (v4._flushEvent:Connect(function()
		v4:flush();
	end)));
	if p11 then
		local v8 = nil;
		local l__dispatch__4 = v4.dispatch;
		v8 = function(...)
			return l__dispatch__4(v4, ...);
		end;
		for v9 = #p11, 1, -1 do
			v8 = p11[v9](v8, v4);
		end;
		function v4.dispatch(p13, ...)
			return local v10(...);
		end;
	end;
	return v4;
end;
function v1.getState(p14)
	if p14._isDispatching then
		error(("You may not call store:getState() while the reducer is executing. The reducer (%s) has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store."):format(tostring(p14._reducer)));
	end;
	return p14._state;
end;
function v1.dispatch(p15, p16)
	if typeof(p16) ~= "table" then
		error(("Actions must be tables. Use custom middleware for %q actions."):format(typeof(p16)), 2);
	end;
	if p16.type == nil then
		error("Actions may not have an undefined 'type' property. " .. "Have you misspelled a constant? \n" .. tostring(p16), 2);
	end;
	if p15._isDispatching then
		error("Reducers may not dispatch actions.");
	end;
	local v11, v12 = pcall(function()
		p15._isDispatching = true;
		p15._state = p15._reducer(p15._state, p16);
		p15._mutatedSinceFlush = true;
	end);
	p15._isDispatching = false;
	if not v11 then
		p15._errorReporter.reportReducerError(p15._state, p16, {
			message = "Caught error in reducer", 
			thrownValue = v12
		});
	end;
	if #p15._actionLog == 3 then
		table.remove(p15._actionLog, 1);
	end;
	table.insert(p15._actionLog, p16);
end;
function v1.destruct(p17)
	for v13, v14 in ipairs(p17._connections) do
		v14:Disconnect();
	end;
	p17._connections = nil;
end;
local u5 = require(script.Parent.NoYield);
function v1.flush(p18)
	if not p18._mutatedSinceFlush then
		return;
	end;
	p18._mutatedSinceFlush = false;
	local l___state__6 = p18._state;
	local v15, v16 = xpcall(function()
		u5(function()
			p18.changed:fire(l___state__6, p18._lastState);
		end);
	end, u2);
	if not v15 then
		p18._errorReporter.reportUpdateError(p18._lastState, l___state__6, p18._actionLog, {
			message = "Caught error flushing store updates", 
			thrownValue = v16
		});
	end;
	p18._lastState = l___state__6;
end;
return v1;

