-- Script Hash: c72a3e1928a53564b3fdacddb48abe37d83f73f9067d191b215c02ed21cfe1c315db6cdfba5d6c01841777cf0b509cb4
-- Decompiled with the Synapse X Luau decompiler.

local l__RunService__1 = game:GetService("RunService");
local v2 = {};
v2.__index = v2;
local u1 = { workspace, (game:GetService("Players")) };
local u2 = {};
function v2.FromTag(p1)
	return u2[p1];
end;
function v2.Auto(p2)
	local function v3(p3)
		local v4 = require(p3);
		assert(type(v4) == "table", "Expected table for component");
		assert(type(v4.Tag) == "string", "Expected .Tag property");
		v2.new(v4.Tag, v4, v4.RenderPriority);
	end;
	for v5, v6 in ipairs(p2:GetDescendants()) do
		if v6:IsA("ModuleScript") then
			v3(v6);
		end;
	end;
	p2.DescendantAdded:Connect(function(p4)
		if p4:IsA("ModuleScript") then
			v3(p4);
		end;
	end);
end;
local u3 = require(script.Parent.Signal);
local u4 = require(script.Parent.Maid);
local l__CollectionService__5 = game:GetService("CollectionService");
local function u6(p5)
	for v7, v8 in ipairs(u1) do
		if p5:IsDescendantOf(v8) then
			return true;
		end;
	end;
	return false;
end;
function v2.new(p6, p7, p8)
	assert(type(p6) == "string", "Argument #1 (tag) should be a string; got " .. type(p6));
	assert(type(p7) == "table", "Argument #2 (class) should be a table; got " .. type(p7));
	assert(type(p7.new) == "function", "Class must contain a .new constructor function");
	assert(type(p7.Destroy) == "function", "Class must contain a :Destroy function");
	assert(u2[p6] == nil, "Component already bound to this tag");
	local v9 = setmetatable({}, v2);
	v9.Added = u3.new();
	v9.Removed = u3.new();
	v9._maid = u4.new();
	v9._lifecycleMaid = u4.new();
	v9._tag = p6;
	v9._class = p7;
	v9._objects = {};
	v9._instancesToObjects = {};
	v9._hasHeartbeatUpdate = type(p7.HeartbeatUpdate) == "function";
	v9._hasSteppedUpdate = type(p7.SteppedUpdate) == "function";
	v9._hasRenderUpdate = type(p7.RenderUpdate) == "function";
	v9._hasInit = type(p7.Init) == "function";
	v9._hasDeinit = type(p7.Deinit) == "function";
	v9._renderPriority = p8 or Enum.RenderPriority.Last.Value;
	v9._lifecycle = false;
	v9._nextId = 0;
	v9._maid:GiveTask(l__CollectionService__5:GetInstanceAddedSignal(p6):Connect(function(p9)
		if u6(p9) then
			v9:_instanceAdded(p9);
		end;
	end));
	v9._maid:GiveTask(l__CollectionService__5:GetInstanceRemovedSignal(p6):Connect(function(p10)
		v9:_instanceRemoved(p10);
	end));
	v9._maid:GiveTask(v9._lifecycleMaid);
	local v10 = Instance.new("BindableEvent");
	for v11, v12 in ipairs(l__CollectionService__5:GetTagged(p6)) do
		if u6(v12) then
			local v13 = v10.Event:Connect(function()
				v9:_instanceAdded(v12);
			end);
			v10:Fire();
			v13:Disconnect();
		end;
	end;
	v10:Destroy();
	u2[p6] = v9;
	v9._maid:GiveTask(function()
		u2[p6] = nil;
	end);
	return v9;
end;
function v2._startHeartbeatUpdate(p11)
	local l___objects__7 = p11._objects;
	p11._heartbeatUpdate = l__RunService__1.Heartbeat:Connect(function(p12)
		for v14, v15 in ipairs(l___objects__7) do
			v15:HeartbeatUpdate(p12);
		end;
	end);
	p11._lifecycleMaid:GiveTask(p11._heartbeatUpdate);
end;
function v2._startSteppedUpdate(p13)
	local l___objects__8 = p13._objects;
	p13._steppedUpdate = l__RunService__1.Stepped:Connect(function(p14, p15)
		for v16, v17 in ipairs(l___objects__8) do
			v17:SteppedUpdate(p15);
		end;
	end);
	p13._lifecycleMaid:GiveTask(p13._steppedUpdate);
end;
function v2._startRenderUpdate(p16)
	p16._renderName = p16._tag .. "RenderUpdate";
	local l___objects__9 = p16._objects;
	l__RunService__1:BindToRenderStep(p16._renderName, p16._renderPriority, function(p17)
		for v18, v19 in ipairs(l___objects__9) do
			v19:RenderUpdate(p17);
		end;
	end);
	p16._lifecycleMaid:GiveTask(function()
		l__RunService__1:UnbindFromRenderStep(p16._renderName);
	end);
end;
function v2._startLifecycle(p18)
	p18._lifecycle = true;
	if p18._hasHeartbeatUpdate then
		p18:_startHeartbeatUpdate();
	end;
	if p18._hasSteppedUpdate then
		p18:_startSteppedUpdate();
	end;
	if p18._hasRenderUpdate then
		p18:_startRenderUpdate();
	end;
end;
function v2._stopLifecycle(p19)
	p19._lifecycle = false;
	p19._lifecycleMaid:DoCleaning();
end;
local u10 = l__RunService__1:IsServer();
local u11 = require(script.Parent.Thread);
function v2._instanceAdded(p20, p21)
	if p20._instancesToObjects[p21] then
		return;
	end;
	if not p20._lifecycle then
		p20:_startLifecycle();
	end;
	p20._nextId = p20._nextId + 1;
	local v20 = p20._tag .. tostring(p20._nextId);
	if u10 then
		p21:SetAttribute("ComponentServerId", v20);
	end;
	local v21 = p20._class.new(p21);
	v21.Instance = p21;
	v21._id = v20;
	p20._instancesToObjects[p21] = v21;
	table.insert(p20._objects, v21);
	if p20._hasInit then
		u11.Spawn(function()
			if p20._instancesToObjects[p21] ~= v21 then
				return;
			end;
			v21:Init();
		end);
	end;
	p20.Added:Fire(v21);
	return v21;
end;
local function u12(p22, p23)
	local v22 = #p22;
	p22[p23] = p22[v22];
	p22[v22] = nil;
end;
function v2._instanceRemoved(p24, p25)
	p24._instancesToObjects[p25] = nil;
	for v23, v24 in ipairs(p24._objects) do
		if v24.Instance == p25 then
			if p24._hasDeinit then
				v24:Deinit();
			end;
			if u10 and p25.Parent and p25:GetAttribute("ComponentServerId") ~= nil then
				p25:SetAttribute("ComponentServerId", nil);
			end;
			p24.Removed:Fire(v24);
			v24:Destroy();
			v24._destroyed = true;
			u12(p24._objects, v23);
			break;
		end;
	end;
	if #p24._objects == 0 and p24._lifecycle then
		p24:_stopLifecycle();
	end;
end;
local u13 = require(script.Parent.TableUtil);
function v2.GetAll(p26)
	return u13.CopyShallow(p26._objects);
end;
function v2.GetFromInstance(p27, p28)
	return p27._instancesToObjects[p28];
end;
function v2.GetFromID(p29, p30)
	for v25, v26 in ipairs(p29._objects) do
		if v26._id == p30 then
			return v26;
		end;
	end;
	return nil;
end;
function v2.Filter(p31, p32)
	return u13.Filter(p31._objects, p32);
end;
local u14 = require(script.Parent.Promise);
function v2.WaitFor(p33, p34, p35)
	local u15 = type(p34) == "string";
	local function v27(p36)
		if u15 then
			local v28 = true;
			if p36.Instance.Name ~= p34 then
				v28 = not u15 and p36.Instance == p34;
			end;
		else
			v28 = not u15 and p36.Instance == p34;
		end;
		return v28;
	end;
	for v29, v30 in ipairs(p33._objects) do
		if v27(v30) then
			return u14.resolve(v30);
		end;
	end;
	local u16 = nil;
	return u14.FromEvent(p33.Added, function(p37)
		u16 = p37;
		return v27(p37);
	end):Then(function()
		return u16;
	end):Timeout(p35 and 60);
end;
function v2.Destroy(p38)
	p38._maid:Destroy();
end;
return v2;
