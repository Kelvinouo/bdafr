
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
function v1.new(p1, p2)
	return setmetatable({
		_signal = p1, 
		_conn = p2, 
		Connected = true
	}, v1);
end;
function v1.Disconnect(p3)
	if p3._conn then
		p3._conn:Disconnect();
		p3._conn = nil;
	end;
	if not p3._signal then
		return;
	end;
	p3.Connected = false;
	local l___connections__2 = p3._signal._connections;
	local v3 = table.find(l___connections__2, p3);
	if v3 then
		local v4 = #l___connections__2;
		l___connections__2[v3] = l___connections__2[v4];
		l___connections__2[v4] = nil;
	end;
	p3._signal = nil;
end;
function v1.IsConnected(p4)
	if not p4._conn then
		return false;
	end;
	return p4._conn.Connected;
end;
v1.Destroy = v1.Disconnect;
local v5 = {};
v5.__index = v5;
function v5.new(p5)
	local v6 = setmetatable({
		_bindable = Instance.new("BindableEvent"), 
		_connections = {}, 
		_args = {}, 
		_threads = 0, 
		_id = 0
	}, v5);
	if p5 then
		p5:GiveTask(v6);
	end;
	return v6;
end;
function v5.Proxy(p6, p7)
	assert(typeof(p6) == "RBXScriptSignal", "Argument #1 must be of type RBXScriptSignal");
	local v7 = v5.new(p7);
	v7:_setProxy(p6);
	return v7;
end;
function v5.Is(p8)
	local v8 = false;
	if type(p8) == "table" then
		v8 = getmetatable(p8) == v5;
	end;
	return v8;
end;
function v5._setProxy(p9, p10)
	assert(typeof(p10) == "RBXScriptSignal", "Argument #1 must be of type RBXScriptSignal");
	p9:_clearProxy();
	p9._proxyHandle = p10:Connect(function(...)
		p9:Fire(...);
	end);
end;
function v5._clearProxy(p11)
	if p11._proxyHandle then
		p11._proxyHandle:Disconnect();
		p11._proxyHandle = nil;
	end;
end;
function v5.Fire(p12, ...)
	local v9 = #p12._connections + p12._threads;
	if v9 == 0 then
		return;
	end;
	local l___id__10 = p12._id;
	p12._id = p12._id + 1;
	p12._args[l___id__10] = { v9, {
			n = select("#", ...),
			...
		} };
	p12._threads = 0;
	p12._bindable:Fire(l___id__10);
end;
function v5.Wait(p13)
	p13._threads = p13._threads + 1;
	local v11 = p13._bindable.Event:Wait();
	local v12 = p13._args[v11];
	v12[1] = v12[1] - 1;
	if v12[1] <= 0 then
		p13._args[v11] = nil;
	end;
	return table.unpack(v12[2], 1, v12[2].n);
end;
local u1 = require(script.Parent.Promise);
function v5.WaitPromise(p14)
	return u1.new(function(p15)
		p15(p14:Wait());
	end);
end;
function v5.Connect(p16, p17)
	local v13 = v1.new(p16, p16._bindable.Event:Connect(function(p18)
		local v14 = p16._args[p18];
		v14[1] = v14[1] - 1;
		if v14[1] <= 0 then
			p16._args[p18] = nil;
		end;
		p17(table.unpack(v14[2], 1, v14[2].n));
	end));
	table.insert(p16._connections, v13);
	return v13;
end;
function v5.DisconnectAll(p19)
	for v15, v16 in ipairs(p19._connections) do
		if v16._conn then
			v16._conn:Disconnect();
		end;
	end;
	p19._connections = {};
	p19._args = {};
end;
function v5.Destroy(p20)
	p20:DisconnectAll();
	p20:_clearProxy();
	p20._bindable:Destroy();
end;
return v5;

