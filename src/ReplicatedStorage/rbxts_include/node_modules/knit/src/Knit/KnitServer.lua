-- Script Hash: a28b91f1ae618d32201af4d758bf7fa13dc8933c6a1d1af807c9a4c350116519eb8488495d12c9efed5ae7d65e45b4c9
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	Version = script.Parent.Version.Value, 
	Services = {}, 
	Util = script.Parent.Util
};
local v2 = Instance.new("Folder");
v2.Name = "Services";
local function u1(p1, p2)
	local v3 = p1:FindFirstChild(p2);
	if not v3 then
		v3 = Instance.new("Folder");
		v3.Name = p2;
		v3.Parent = p1;
	end;
	return v3;
end;
function v1.IsService(p3)
	local v4 = false;
	if type(p3) == "table" then
		v4 = p3._knit_is_service == true;
	end;
	return v4;
end;
local u2 = require(v1.Util.TableUtil);
local function u3(p4)
	local v5 = Instance.new("Folder");
	v5.Name = p4;
	return v5;
end;
function v1.CreateService(p5)
	assert(type(p5) == "table", "Service must be a table; got " .. type(p5));
	assert(type(p5.Name) == "string", "Service.Name must be a string; got " .. type(p5.Name));
	assert(#p5.Name > 0, "Service.Name must be a non-empty string");
	assert(v1.Services[p5.Name] == nil, "Service \"" .. p5.Name .. "\" already exists");
	u2.Extend(p5, {
		_knit_is_service = true, 
		_knit_rf = {}, 
		_knit_re = {}, 
		_knit_rp = {}, 
		_knit_rep_folder = u3(p5.Name)
	});
	if type(p5.Client) ~= "table" then
		p5.Client = {
			Server = p5
		};
	elseif p5.Client.Server ~= p5 then
		p5.Client.Server = p5;
	end;
	v1.Services[p5.Name] = p5;
	return p5;
end;
local u4 = require(v1.Util.Loader);
function v1.AddServices(p6)
	return u4.LoadChildren(p6);
end;
function v1.AddServicesDeep(p7)
	return u4.LoadDescendants(p7);
end;
function v1.GetService(p8)
	assert(type(p8) == "string", "ServiceName must be a string; got " .. type(p8));
	return assert(v1.Services[p8], "Could not find service \"" .. p8 .. "\"");
end;
local function u5(p9, p10, p11)
	if p11 then
		p10.Parent = u1(p9._knit_rep_folder, p11);
	elseif p10:IsA("RemoteFunction") then
		p10.Parent = u1(p9._knit_rep_folder, "RF");
	elseif p10:IsA("RemoteEvent") then
		p10.Parent = u1(p9._knit_rep_folder, "RE");
	elseif p10:IsA("ValueBase") then
		p10.Parent = u1(p9._knit_rep_folder, "RP");
	else
		error("Invalid rep object: " .. p10.ClassName);
	end;
	if not p9._knit_rep_folder.Parent then
		p9._knit_rep_folder.Parent = v2;
	end;
end;
function v1.BindRemoteEvent(p12, p13, p14)
	assert(p12._knit_re[p13] == nil, "RemoteEvent \"" .. p13 .. "\" already exists");
	local l___remote__6 = p14._remote;
	l___remote__6.Name = p13;
	p12._knit_re[p13] = l___remote__6;
	u5(p12, l___remote__6);
end;
local u6 = require(v1.Util.Ser);
function v1.BindRemoteFunction(p15, p16, p17)
	assert(p15._knit_rf[p16] == nil, "RemoteFunction \"" .. p16 .. "\" already exists");
	local v7 = Instance.new("RemoteFunction");
	v7.Name = p16;
	p15._knit_rf[p16] = v7;
	u5(p15, v7);
	function v7.OnServerInvoke(...)
		return u6.SerializeArgsAndUnpack(p17(p15.Client, u6.DeserializeArgsAndUnpack(...)));
	end;
end;
function v1.BindRemoteProperty(p18, p19, p20)
	assert(p18._knit_rp[p19] == nil, "RemoteProperty \"" .. p19 .. "\" already exists");
	p20._object.Name = p19;
	p18._knit_rp[p19] = p20;
	u5(p18, p20._object, "RP");
end;
local u7 = false;
local u8 = require(v1.Util.Promise);
local u9 = require(v1.Util.Remote.RemoteSignal);
local u10 = require(v1.Util.Remote.RemoteProperty);
local u11 = require(v1.Util.Signal);
local u12 = require(v1.Util.Thread);
local u13 = false;
local u14 = Instance.new("BindableEvent");
function v1.Start()
	if u7 then
		return u8.Reject("Knit already started");
	end;
	u7 = true;
	local l__Services__15 = v1.Services;
	return u8.new(function(p21)
		for v8, v9 in pairs(l__Services__15) do
			for v10, v11 in pairs(v9.Client) do
				if type(v11) == "function" then
					v1.BindRemoteFunction(v9, v10, v11);
				elseif u9.Is(v11) then
					v1.BindRemoteEvent(v9, v10, v11);
				elseif u10.Is(v11) then
					v1.BindRemoteProperty(v9, v10, v11);
				elseif u11.Is(v11) then
					warn("Found Signal instead of RemoteSignal (Knit.Util.RemoteSignal). Please change to RemoteSignal. [" .. v9.Name .. ".Client." .. v10 .. "]");
				end;
			end;
		end;
		local v12 = {};
		for v13, v14 in pairs(l__Services__15) do
			if type(v14.KnitInit) == "function" then
				table.insert(v12, u8.new(function(p22)
					v14:KnitInit();
					p22();
				end));
			end;
		end;
		p21(u8.All(v12));
	end):Then(function()
		for v15, v16 in pairs(l__Services__15) do
			if type(v16.KnitStart) == "function" then
				u12.SpawnNow(v16.KnitStart, v16);
			end;
		end;
		u13 = true;
		u14:Fire();
		u12.Spawn(function()
			u14:Destroy();
		end);
		v2.Parent = script.Parent;
	end);
end;
function v1.OnStart()
	if u13 then
		return u8.Resolve();
	end;
	return u8.new(function(p23)
		if u13 then
			p23();
			return;
		end;
		u14.Event:Wait();
		p23();
	end);
end;
return v1;
