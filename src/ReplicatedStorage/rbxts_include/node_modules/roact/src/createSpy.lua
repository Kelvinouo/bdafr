-- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.assertDeepEqual);
return function(p1)
	local u2 = {
		callCount = 0, 
		values = {}, 
		valuesLength = 0
	};
	function u2.value(...)
		u2.callCount = u2.callCount + 1;
		u2.values = { ... };
		u2.valuesLength = select("#", ...);
		if p1 == nil then
			return;
		end;
		return p1(...);
	end;
	function u2.assertCalledWith(p2, ...)
		local v1 = select("#", ...);
		if u2.valuesLength ~= v1 then
			error(("Expected %d arguments, but was called with %d arguments"):format(u2.valuesLength, v1), 2);
		end;
		for v2 = 1, v1 do
			assert(u2.values[v2] == select(v2, ...), "value differs");
		end;
	end;
	function u2.assertCalledWithDeepEqual(p3, ...)
		local v3 = select("#", ...);
		if u2.valuesLength ~= v3 then
			error(("Expected %d arguments, but was called with %d arguments"):format(u2.valuesLength, v3), 2);
		end;
		for v4 = 1, v3 do
			u1(u2.values[v4], (select(v4, ...)));
		end;
	end;
	function u2.captureValues(p4, ...)
		local v5 = select("#", ...);
		local v6 = {};
		assert(u2.valuesLength == v5, "length of expected values differs from stored values");
		for v7 = 1, v5 do
			v6[select(v7, ...)] = u2.values[v7];
		end;
		return v6;
	end;
	setmetatable(u2, {
		__index = function(p5, p6)
			error(("%q is not a valid member of spy"):format(p6));
		end
	});
	return u2;
end;
