-- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.GlobalConfig).get();
local u2 = require(script.Parent.PropMarkers.Children);
local u3 = require(script.Parent.Logging);
local u4 = require(script.Parent.ElementKind);
local u5 = require(script.Parent.Type);
return function(p1, p2, p3)
	if u1.typeChecks then
		assert(p1 ~= nil, "`component` is required");
		local v1 = true;
		if typeof(p2) ~= "table" then
			v1 = p2 == nil;
		end;
		assert(v1, "`props` must be a table or nil");
		local v2 = true;
		if typeof(p3) ~= "table" then
			v2 = p3 == nil;
		end;
		assert(v2, "`children` must be a table or nil");
	end;
	if p2 == nil then
		p2 = {};
	end;
	if p3 ~= nil then
		if p2[u2] ~= nil then
			u3.warnOnce("The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!\nThis can happen when a component passes props through to a child element but also uses the `children` argument:\n\n\tRoact.createElement(\"Frame\", passedProps, {\n\t\tchild = ...\n\t})\n\nInstead, consider using a utility function to merge tables of children together:\n\n\tlocal children = mergeTables(passedProps[Roact.Children], {\n\t\tchild = ...\n\t})\n\n\tlocal fullProps = mergeTables(passedProps, {\n\t\t[Roact.Children] = children\n\t})\n\n\tRoact.createElement(\"Frame\", fullProps)");
		end;
		p2[u2] = p3;
	end;
	local v3 = {
		[u5] = u5.Element, 
		[u4] = u4.fromComponent(p1), 
		component = p1, 
		props = p2
	};
	if u1.elementTracing then
		v3.source = debug.traceback("", 2):sub(2);
	end;
	return v3;
end;
