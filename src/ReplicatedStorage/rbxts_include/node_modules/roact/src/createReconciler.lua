-- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.GlobalConfig).get();
local u2 = require(script.Parent.internalAssert);
local u3 = require(script.Parent.Type);
local u4 = require(script.Parent.ElementUtils);
local u5 = require(script.Parent.ElementKind);
local u6 = require(script.Parent.PropMarkers.Children);
local u7 = require(script.Parent.Symbol).named("InternalData");
return function(p1)
	local u8 = nil;
	local u9 = nil;
	local u10 = nil;
	local function u11(p2, p3, p4)
		if u1.internalTypeChecks then
			u2(u3.of(p2) == u3.VirtualNode, "Expected arg #1 to be of type VirtualNode");
		end;
		local v1 = {};
		for v2, v3 in pairs(p2.children) do
			local v4 = u10(v3, (u4.getElementByKey(p4, v2)));
			if v4 ~= nil then
				p2.children[v2] = v4;
			else
				v1[v2] = true;
			end;
		end;
		for v5 in pairs(v1) do
			p2.children[v5] = nil;
		end;
		local v6, v7, v8 = u4.iterateElements(p4);
		while true do
			local v9, v10 = v6(v7, v8);
			if not v9 then
				break;
			end;
			local v11 = v9;
			if v9 == u4.UseParentKey then
				v11 = p2.hostKey;
			end;
			if p2.children[v9] == nil then
				local v12 = u9(v10, p3, v11, p2.context, p2.legacyContext);
				if v12 ~= nil then
					v12.depth = p2.depth + 1;
					v12.parent = p2;
					p2.children[v9] = v12;
				end;
			end;		
		end;
	end;
	local u12 = nil;
	u8 = function(p5)
		if u1.internalTypeChecks then
			u2(u3.of(p5) == u3.VirtualNode, "Expected arg #1 to be of type VirtualNode");
		end;
		local v13 = u5.of(p5.currentElement);
		if v13 == u5.Host then
			p1.unmountHostNode(u12, p5);
			return;
		end;
		if v13 == u5.Function then
			for v14, v15 in pairs(p5.children) do
				u8(v15);
			end;
			return;
		end;
		if v13 == u5.Stateful then
			p5.instance:__unmount();
			return;
		end;
		if v13 == u5.Portal then
			for v16, v17 in pairs(p5.children) do
				u8(v17);
			end;
			return;
		end;
		if v13 ~= u5.Fragment then
			error(("Unknown ElementKind %q"):format(tostring(v13)), 2);
			return;
		end;
		for v18, v19 in pairs(p5.children) do
			u8(v19);
		end;
	end;
	local function u13(p6, p7, p8)
		if u3.of(p8) == u3.Element or p8 == nil or typeof(p8) == "boolean" then
			u11(p6, p7, p8);
			return;
		end;
		error(("%s\n%s"):format("Component returned invalid children:", p6.currentElement.source and "<enable element tracebacks>"), 0);
	end;
	local function u14(p9, p10)
		local l__target__20 = p10.props.target;
		assert(p1.isHostObject(l__target__20), "Expected target to be host object");
		if l__target__20 == p9.currentElement.props.target then
			u11(p9, l__target__20, p10.props[u6]);
			return p9;
		end;
		u8(p9);
		local v21 = u9(p10, p9.hostParent, p9.hostKey, p9.originalContext or p9.context, p9.parentLegacyContext);
		if v21 ~= nil then
			v21.depth = p9.depth;
			v21.parent = p9.parent;
		end;
		return v21;
	end;
	u10 = function(p11, p12, p13)
		if u1.internalTypeChecks then
			u2(u3.of(p11) == u3.VirtualNode, "Expected arg #1 to be of type VirtualNode");
		end;
		if u1.typeChecks then
			local v22 = true;
			if u3.of(p12) ~= u3.Element then
				v22 = true;
				if typeof(p12) ~= "boolean" then
					v22 = p12 == nil;
				end;
			end;
			assert(v22, "Expected arg #2 to be of type Element, boolean, or nil");
		end;
		if p11.currentElement == p12 and p13 == nil then
			return p11;
		end;
		if typeof(p12) == "boolean" or p12 == nil then
			u8(p11);
			return nil;
		end;
		if p11.currentElement.component ~= p12.component then
			u8(p11);
			local v23 = u9(p12, p11.hostParent, p11.hostKey, p11.originalContext or p11.context, p11.parentLegacyContext);
			if v23 ~= nil then
				v23.depth = p11.depth;
				v23.parent = p11.parent;
			end;
			return v23;
		end;
		local v24 = u5.of(p12);
		local v25 = true;
		if v24 == u5.Host then
			p11 = p1.updateHostNode(u12, p11, p12);
		elseif v24 == u5.Function then
			u13(p11, p11.hostParent, (p12.component(p12.props)));
			p11 = p11;
		elseif v24 == u5.Stateful then
			v25 = p11.instance:__update(p12, p13);
		elseif v24 == u5.Portal then
			p11 = u14(p11, p12);
		elseif v24 == u5.Fragment then
			u11(p11, p11.hostParent, p12.elements);
			p11 = p11;
		else
			error(("Unknown ElementKind %q"):format(tostring(v24)), 2);
		end;
		if not v25 then
			return p11;
		end;
		p11.currentElement = p12;
		return p11;
	end;
	local function u15(p14, p15, p16, p17, p18)
		if u1.internalTypeChecks then
			u2(p1.isHostObject(p15) or p15 == nil, "Expected arg #2 to be a host object");
			local v26 = true;
			if typeof(p17) ~= "table" then
				v26 = p17 == nil;
			end;
			u2(v26, "Expected arg #4 to be of type table or nil");
			local v27 = true;
			if typeof(p18) ~= "table" then
				v27 = p18 == nil;
			end;
			u2(v27, "Expected arg #5 to be of type table or nil");
		end;
		if u1.typeChecks then
			assert(p16 ~= nil, "Expected arg #3 to be non-nil");
			local v28 = true;
			if u3.of(p14) ~= u3.Element then
				v28 = typeof(p14) == "boolean";
			end;
			assert(v28, "Expected arg #1 to be of type Element or boolean");
		end;
		return {
			[u3] = u3.VirtualNode, 
			currentElement = p14, 
			depth = 1, 
			parent = nil, 
			children = {}, 
			hostParent = p15, 
			hostKey = p16, 
			legacyContext = p18, 
			parentLegacyContext = p18, 
			context = p17 or {}, 
			originalContext = nil
		};
	end;
	u9 = function(p19, p20, p21, p22, p23)
		local v29 = nil;
		if u1.internalTypeChecks then
			u2(p1.isHostObject(p20) or p20 == nil, "Expected arg #2 to be a host object");
			local v30 = true;
			if typeof(p23) ~= "table" then
				v30 = p23 == nil;
			end;
			u2(v30, "Expected arg #5 to be of type table or nil");
		end;
		if u1.typeChecks then
			assert(p21 ~= nil, "Expected arg #3 to be non-nil");
			local v31 = true;
			if u3.of(p19) ~= u3.Element then
				v31 = typeof(p19) == "boolean";
			end;
			assert(v31, "Expected arg #1 to be of type Element or boolean");
		end;
		if typeof(p19) == "boolean" then
			return nil;
		end;
		local v32 = u5.of(p19);
		v29 = u15(p19, p20, p21, p22, p23);
		if v32 == u5.Host then
			p1.mountHostNode(u12, v29);
			return v29;
		end;
		if v32 == u5.Function then
			local l__currentElement__33 = v29.currentElement;
			u13(v29, v29.hostParent, (l__currentElement__33.component(l__currentElement__33.props)));
			return v29;
		end;
		if v32 == u5.Stateful then
			p19.component:__mount(u12, v29);
			return v29;
		end;
		if v32 == u5.Portal then
			local l__currentElement__34 = v29.currentElement;
			local l__target__35 = l__currentElement__34.props.target;
			assert(p1.isHostObject(l__target__35), "Expected target to be host object");
			u11(v29, l__target__35, l__currentElement__34.props[u6]);
			return v29;
		end;
		if v32 ~= u5.Fragment then
			error(("Unknown ElementKind %q"):format(tostring(v32)), 2);
			return v29;
		end;
		u11(v29, v29.hostParent, v29.currentElement.elements);
		return v29;
	end;
	u12 = {
		mountVirtualTree = function(p24, p25, p26)
			if u1.typeChecks then
				assert(u3.of(p24) == u3.Element, "Expected arg #1 to be of type Element");
				assert(p1.isHostObject(p25) or p25 == nil, "Expected arg #2 to be a host object");
			end;
			if p26 == nil then
				p26 = "RoactTree";
			end;
			local v36 = {
				[u3] = u3.VirtualTree, 
				[u7] = {
					rootNode = nil, 
					mounted = true
				}
			};
			v36[u7].rootNode = u9(p24, p25, p26);
			return v36;
		end, 
		unmountVirtualTree = function(p27)
			local v37 = p27[u7];
			if u1.typeChecks then
				assert(u3.of(p27) == u3.VirtualTree, "Expected arg #1 to be a Roact handle");
				assert(v37.mounted, "Cannot unmounted a Roact tree that has already been unmounted");
			end;
			v37.mounted = false;
			if v37.rootNode ~= nil then
				u8(v37.rootNode);
			end;
		end, 
		updateVirtualTree = function(p28, p29)
			local v38 = p28[u7];
			if u1.typeChecks then
				assert(u3.of(p28) == u3.VirtualTree, "Expected arg #1 to be a Roact handle");
				assert(u3.of(p29) == u3.Element, "Expected arg #2 to be a Roact Element");
			end;
			v38.rootNode = u10(v38.rootNode, p29);
			return p28;
		end, 
		createVirtualNode = u15, 
		mountVirtualNode = u9, 
		unmountVirtualNode = u8, 
		updateVirtualNode = u10, 
		updateVirtualNodeWithChildren = function(p30, p31, p32)
			u11(p30, p31, p32);
		end, 
		updateVirtualNodeWithRenderResult = u13, 
		suspendParentEvents = function(p33)
			local v39 = p33.parent;
			while v39 do
				if v39.eventManager ~= nil then
					v39.eventManager:suspend();
				end;
				v39 = v39.parent;			
			end;
		end, 
		resumeParentEvents = function(p34)
			local v40 = p34.parent;
			while v40 do
				if v40.eventManager ~= nil then
					v40.eventManager:resume();
				end;
				v40 = v40.parent;			
			end;
		end
	};
	return nil;
end;
