-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local function u1(p1, p2)
	local v2 = {};
	local v3, v4, v5 = ipairs(p1);
	while true do
		v3(v4, v5);
		if not v3 then
			break;
		end;
		v5 = v3;
		local v6 = ("\t"):rep(p2);
		table.insert(v2, v6 .. v4:gsub("\n", "\n" .. v6));	
	end;
	return table.concat(v2, "\n");
end;
function v1.__tostring(p3)
	local v7 = { "LogInfo {" };
	local v8 = #p3.errors;
	local v9 = #p3.warnings;
	local v10 = #p3.infos;
	if v8 + v9 + v10 == 0 then
		table.insert(v7, "\t(no messages)");
	end;
	if v8 > 0 then
		table.insert(v7, ("\tErrors (%d) {"):format(v8));
		table.insert(v7, u1(p3.errors, 2));
		table.insert(v7, "\t}");
	end;
	if v9 > 0 then
		table.insert(v7, ("\tWarnings (%d) {"):format(v9));
		table.insert(v7, u1(p3.warnings, 2));
		table.insert(v7, "\t}");
	end;
	if v10 > 0 then
		table.insert(v7, ("\tInfos (%d) {"):format(v10));
		table.insert(v7, u1(p3.infos, 2));
		table.insert(v7, "\t}");
	end;
	table.insert(v7, "}");
	return table.concat(v7, "\n");
end;
local v11 = {};
local function u2()
	local v12 = {
		errors = {}, 
		warnings = {}, 
		infos = {}
	};
	setmetatable(v12, v1);
	return v12;
end;
local u3 = true;
local u4 = {};
function v11.capture(p4)
	local v13 = u2();
	u3 = false;
	u4[v13] = true;
	local v14, v15 = pcall(p4);
	u4[v13] = nil;
	u3 = u3;
	assert(v14, v15);
	return v13;
end;
function v11.warn(p5, ...)
	local v16 = p5:format(...);
	for v17 in pairs(u4) do
		table.insert(v17.warnings, v16);
	end;
	local v18 = ("\t"):rep(1);
	local v19 = ("%s\n%s"):format(v16, v18 .. debug.traceback("", 2):sub(2):gsub("\n", "\n" .. v18));
	if u3 then
		warn(v19);
	end;
end;
local u5 = {};
function v11.warnOnce(p6, ...)
	local v20 = debug.traceback();
	if u5[v20] then
		return;
	end;
	u5[v20] = true;
	v11.warn(p6, ...);
end;
return v11;
