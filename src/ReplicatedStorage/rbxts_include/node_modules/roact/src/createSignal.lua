-- Decompiled with the Synapse X Luau decompiler.

return function()
	local u1 = false;
	local u2 = {};
	local u3 = {};
	return {
		subscribe = function(p1, p2)
			assert(typeof(p2) == "function", "Can only subscribe to signals with a function.");
			local v1 = {
				callback = p2, 
				disconnected = false
			};
			if u1 and not u2[p2] then
				u3[p2] = v1;
			end;
			u2[p2] = v1;
			return function()
				assert(not v1.disconnected, "Listeners can only be disconnected once.");
				v1.disconnected = true;
				u2[p2] = nil;
				u3[p2] = nil;
			end;
		end, 
		fire = function(p3, ...)
			u1 = true;
			for v2, v3 in pairs(u2) do
				if not v3.disconnected and not u3[v2] then
					v2(...);
				end;
			end;
			u1 = false;
			for v4, v5 in pairs(u3) do
				u3[v4] = nil;
			end;
		end
	};
end;
