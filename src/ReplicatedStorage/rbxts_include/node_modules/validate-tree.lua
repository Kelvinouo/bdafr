-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local function u1(p1)
	return game:GetService(p1);
end;
local function u2(p2, p3, p4)
	if p3["$className"] ~= nil and not p2:IsA(p3["$className"]) then
		return false;
	end;
	local v2 = true;
	if p2.ClassName == "DataModel" then
		for v3, v4 in pairs(p3) do
			if v3 ~= "$className" then
				local v5 = { pcall(u1, v3) };
				if not v5[1] then
					if p4 then
						p4[#p4 + 1] = "game.GetService(\"" .. v3 .. "\")";
					end;
					return false;
				end;
				local v6 = v5[2];
				local v7 = v6;
				if v7 then
					local v8 = type(v4) == "string" or u2(v6, v4, p4);
					v7 = v8;
				end;
				if v7 then
					if v6.Name ~= v3 then
						v6.Name = v3;
					end;
				else
					if not p4 then
						return false;
					end;
					v2 = false;
					p4[#p4 + 1] = "game.GetService(\"" .. v3 .. "\")";
				end;
			end;
		end;
		return v2;
	end;
	local v9 = {
		["$className"] = true
	};
	local v10, v11, v12 = ipairs(p2:GetChildren());
	while true do
		v10(v11, v12);
		if not v10 then
			break;
		end;
		v12 = v10;
		local l__Name__13 = v11.Name;
		if l__Name__13 ~= "$className" then
			local v14 = p3[l__Name__13];
			if type(v14) == "string" then
				local v15 = v11:IsA(v14);
			else
				v15 = v14 and u2(v11, v14, p4);
			end;
			if v15 then
				v9[l__Name__13] = true;
			end;
		end;	
	end;
	for v16 in pairs(p3) do
		if v9[v16] == nil then
			if not p4 then
				return false;
			end;
			v2 = false;
			p4[#p4 + 1] = p2:GetFullName() .. "." .. v16;
		end;
	end;
	return v2;
end;
return {
	validateTree = u2, 
	yieldForTree = v1.async(function(p5, p6)
		if u2(p5, p6) then
			return p5;
		end;
		return v1.await(v1.Promise.new(function(p7, p8, p9)
			local u3 = {};
			local u4 = v1.Promise.delay(5);
			p9(function()
				local v17, v18, v19 = ipairs(u3);
				while true do
					v17(v18, v19);
					if not v17 then
						break;
					end;
					v19 = v17;
					v18:Disconnect();				
				end;
				u4:cancel();
			end);
			local function v20(p10)
				if not u2(p5, p6, p10) then
					return;
				end;
				local v21, v22, v23 = ipairs(u3);
				while true do
					v21(v22, v23);
					if not v21 then
						break;
					end;
					v23 = v21;
					v22:Disconnect();				
				end;
				u4:cancel();
				p7(p5);
				return true;
			end;
			local v24, v25, v26 = ipairs(p5:GetDescendants());
			while true do
				v24(v25, v26);
				if not v24 then
					break;
				end;
				v26 = v24;
				u3[#u3 + 1] = v25:GetPropertyChangedSignal("Name"):Connect(v20);			
			end;
			u3[#u3 + 1] = p5.DescendantAdded:Connect(function(p11)
				u3[#u3 + 1] = p11:GetPropertyChangedSignal("Name"):Connect(v20);
				if not u2(p5, p6, nil) then
					return;
				end;
				local v27, v28, v29 = ipairs(u3);
				while true do
					v27(v28, v29);
					if not v27 then
						break;
					end;
					v29 = v27;
					v28:Disconnect();				
				end;
				u4:cancel();
				p7(p5);
			end);
			u4:andThen(function()
				local v30 = {};
				if u2(p5, p6, v30) then
					local v31, v32, v33 = ipairs(u3);
					while true do
						v31(v32, v33);
						if not v31 then
							break;
						end;
						v33 = v31;
						v32:Disconnect();					
					end;
					u4:cancel();
					p7(p5);
					local v34 = true;
				else
					v34 = nil;
				end;
				if not v34 then
					local v35 = ", ";
					if v35 == nil then
						v35 = ", ";
					end;
					warn("[yieldForTree] Infinite yield possible. Waiting for: " .. table.concat(v30, v35));
				end;
			end);
		end));
	end)
};
