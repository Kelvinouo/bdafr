-- Script Hash: 9ece3bb67c55e6fdfa49685530f279e2864765c2b9c41e1e15de49f124fdfa6a4d0afab3210e9c5fa6890c81da4935ae
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local function u1(p1)
	return game:GetService(p1);
end;
local function u2(p2, p3, p4)
	if p3["$className"] ~= nil and not p2:IsA(p3["$className"]) then
		return false;
	end;
	local v2 = true;
	if p2.ClassName == "DataModel" then
		for v3, v4 in pairs(p3) do
			if v3 ~= "$className" then
				local v5 = { pcall(u1, v3) };
				if not v5[1] then
					if p4 then
						p4[#p4 + 1] = "game.GetService(\"" .. v3 .. "\")";
					end;
					return false;
				end;
				local v6 = v5[2];
				local v7 = v6;
				if v7 then
					local v8 = type(v4) == "string" or u2(v6, v4, p4);
					v7 = v8;
				end;
				if v7 then
					if v6.Name ~= v3 then
						v6.Name = v3;
					end;
				else
					if not p4 then
						return false;
					end;
					v2 = false;
					p4[#p4 + 1] = "game.GetService(\"" .. v3 .. "\")";
				end;
			end;
		end;
		return v2;
	end;
	local v9 = {
		["$className"] = true
	};
	for v10, v11 in ipairs(p2:GetChildren()) do
		local l__Name__12 = v11.Name;
		if l__Name__12 ~= "$className" then
			local v13 = p3[l__Name__12];
			if type(v13) == "string" then
				local v14 = v11:IsA(v13);
			else
				v14 = v13 and u2(v11, v13, p4);
			end;
			if v14 then
				v9[l__Name__12] = true;
			end;
		end;
	end;
	for v15 in pairs(p3) do
		if v9[v15] == nil then
			if not p4 then
				return false;
			end;
			v2 = false;
			p4[#p4 + 1] = p2:GetFullName() .. "." .. v15;
		end;
	end;
	return v2;
end;
return {
	validateTree = u2, 
	yieldForTree = v1.async(function(p5, p6)
		if u2(p5, p6) then
			return p5;
		end;
		return v1.await(v1.Promise.new(function(p7, p8, p9)
			local u3 = {};
			local u4 = v1.Promise.delay(5);
			local function v16()
				for v17, v18 in ipairs(u3) do
					v18:Disconnect();
				end;
				u4:cancel();
			end;
			p9(v16);
			local function v19(p10)
				if not u2(p5, p6, p10) then
					return;
				end;
				v16();
				p7(p5);
				return true;
			end;
			for v20, v21 in ipairs(p5:GetDescendants()) do
				u3[#u3 + 1] = v21:GetPropertyChangedSignal("Name"):Connect(v19);
			end;
			u3[#u3 + 1] = p5.DescendantAdded:Connect(function(p11)
				u3[#u3 + 1] = p11:GetPropertyChangedSignal("Name"):Connect(v19);
				v19();
			end);
			u4:andThen(function()
				local v22 = {};
				if not v19(v22) then
					local v23 = ", ";
					if v23 == nil then
						v23 = ", ";
					end;
					warn("[yieldForTree] Infinite yield possible. Waiting for: " .. table.concat(v22, v23));
				end;
			end);
		end));
	end)
};
