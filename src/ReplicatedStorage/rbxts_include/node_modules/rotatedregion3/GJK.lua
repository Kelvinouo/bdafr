-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
local u1 = Vector3.new(0, 0, 0);
function v1.new(p1, p2, p3, p4, p5, p6)
	local v2 = setmetatable({}, v1);
	v2.SetA = p1;
	v2.SetB = p2;
	v2.CentroidA = p3;
	v2.CentroidB = p4;
	v2.SupportA = p5;
	v2.SupportB = p6;
	return v2;
end;
local function u2(p7, p8, p9)
	local v3 = p8[#p8];
	local v4 = -v3;
	if #p8 == 4 then
		local v5 = p8[3] - v3;
		local v6 = p8[2] - v3;
		local v7 = p8[1] - v3;
		local v8 = v5:Cross(v6);
		local v9 = v6:Cross(v7);
		local v10 = v7:Cross(v5);
		local v11 = v8:Dot(v7) > 0 and -v8 or v8;
		local v12 = v9:Dot(v5) > 0 and -v9 or v9;
		local v13 = v10:Dot(v6) > 0 and -v10 or v10;
		if v11:Dot(v4) > 0 then
			table.remove(p8, 1);
			p9 = v11;
		elseif v12:Dot(v4) > 0 then
			table.remove(p8, 2);
			p9 = v12;
		else
			if not (v13:Dot(v4) > 0) then
				return true;
			end;
			table.remove(p8, 3);
			p9 = v13;
		end;
	elseif #p8 == 3 then
		local v14 = p8[2] - v3;
		local v15 = p8[1] - v3;
		local v16 = v14:Cross(v15);
		local l__Unit__17 = (v14 * v14:Dot(v15) - v15 * v14:Dot(v14)).Unit;
		local l__Unit__18 = (v15 * v15:Dot(v14) - v14 * v15:Dot(v15)).Unit;
		if l__Unit__17:Dot(v4) > 0 then
			table.remove(p8, 1);
			p9 = l__Unit__17;
		elseif l__Unit__18:Dot(v4) > 0 then
			table.remove(p8, 2);
			p9 = l__Unit__18;
		else
			if v3 - v3 ~= u1 then
				return true;
			end;
			p9 = v16:Dot(v4) > 0 and v16 or -v16;
		end;
	else
		local v19 = p8[1] - v3;
		p9 = (v4 * v19:Dot(v19) - v19 * v19:Dot(v4)).Unit;
	end;
	return false, p9;
end;
function v1.IsColliding(p10)
	local l__Unit__20 = (p10.CentroidA - p10.CentroidB).Unit;
	local v21 = { p10.SupportA(p10.SetA, l__Unit__20) - p10.SupportB(p10.SetB, -l__Unit__20) };
	local v22 = -l__Unit__20;
	for v23 = 1, 20 do
		table.insert(v21, p10.SupportA(p10.SetA, v22) - p10.SupportB(p10.SetB, -v22));
		if v21[#v21]:Dot(v22) <= 0 then
			return false;
		end;
		local v24, v25 = u2(p10, v21, v22);
		if v24 then
			return true;
		end;
		v22 = v25;
	end;
	return false;
end;
return v1;
