--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local u1 = nil;
local function u2(p1, ...)
	u1 = nil;
	p1(...);
	u1 = u1;
end;
local v2 = {};
v2.__index = v2;
local function u3(...)
	u2(...);
	while true do
		u2(coroutine.yield());	
	end;
end;
function v2.Disconnect(p2)
	if p2._is_connected == false then
		return;
	end;
	p2._is_connected = false;
	local l___script_signal__3 = p2._script_signal;
	l___script_signal__3._listener_count = l___script_signal__3._listener_count - 1;
	if p2._script_signal._head == p2 then
		p2._script_signal._head = p2._next;
	else
		local v4 = p2._script_signal._head;
		while v4 ~= nil and v4._next ~= p2 do
			v4 = v4._next;		
		end;
		if v4 ~= nil then
			v4._next = p2._next;
		end;
	end;
	if p2._disconnect_listener ~= nil then
		if not u1 then
			u1 = coroutine.create(u3);
		end;
		task.spawn(u1, p2._disconnect_listener, p2._disconnect_param);
		p2._disconnect_listener = nil;
	end;
end;
local v5 = {};
v5.__index = v5;
function v5.Connect(p3, p4, p5, p6)
	local v6 = {
		_listener = p4, 
		_script_signal = p3, 
		_disconnect_listener = p5, 
		_disconnect_param = p6, 
		_next = p3._head, 
		_is_connected = true
	};
	setmetatable(v6, v2);
	p3._head = v6;
	p3._listener_count = p3._listener_count + 1;
	return v6;
end;
function v5.GetListenerCount(p7)
	return p7._listener_count;
end;
function v5.Fire(p8, ...)
	local v7 = p8._head;
	while v7 ~= nil do
		if v7._is_connected == true then
			if not u1 then
				u1 = coroutine.create(u3);
			end;
			task.spawn(u1, v7._listener, ...);
		end;
		v7 = v7._next;	
	end;
end;
function v5.FireUntil(p9, p10, ...)
	local v8 = p9._head;
	while v8 ~= nil do
		if v8._is_connected == true then
			v8._listener(...);
			if p10() ~= true then
				return;
			end;
		end;
		v8 = v8._next;	
	end;
end;
function v1.NewScriptSignal()
	return {
		_head = nil, 
		_listener_count = 0, 
		Connect = v5.Connect, 
		GetListenerCount = v5.GetListenerCount, 
		Fire = v5.Fire, 
		FireUntil = v5.FireUntil
	};
end;
local v9 = {
	NewScriptSignal = v1.NewScriptSignal, 
	ConnectToOnClose = function(p11, p12)
		if game:GetService("RunService"):IsStudio() == false or p12 == true then
			game:BindToClose(p11);
		end;
	end
};
local v10 = {
	ServiceLocked = false, 
	IssueSignal = v9.NewScriptSignal(), 
	CorruptionSignal = v9.NewScriptSignal(), 
	CriticalState = false, 
	CriticalStateSignal = v9.NewScriptSignal(), 
	ServiceIssueCount = 0, 
	_active_profile_stores = {}, 
	_auto_save_list = {}, 
	_issue_queue = {}, 
	_critical_state_start = 0, 
	_mock_data_store = {}, 
	_user_mock_data_store = {}, 
	_use_mock_data_store = false
};
local l__RunService__11 = game:GetService("RunService");
local function u4(p13)
	local v12 = {};
	for v13, v14 in pairs(p13) do
		if type(v14) == "table" then
			v12[v13] = u4(v14);
		else
			v12[v13] = v14;
		end;
	end;
	return v12;
end;
local function u5(p14, p15)
	for v15, v16 in pairs(p15) do
		if type(v15) == "string" then
			if p14[v15] == nil then
				if type(v16) == "table" then
					p14[v15] = u4(v16);
				else
					p14[v15] = v16;
				end;
			elseif type(p14[v15]) == "table" and type(v16) == "table" then
				u5(p14[v15], v16);
			end;
		end;
	end;
end;
local u6 = {};
local u7 = {
	AutoSaveProfiles = 30, 
	RobloxWriteCooldown = 7, 
	ForceLoadMaxSteps = 8, 
	AssumeDeadSessionLock = 1800, 
	IssueCountForCriticalState = 5, 
	IssueLast = 120, 
	CriticalStateLast = 120, 
	MetaTagsUpdatedValues = {
		ProfileCreateTime = true, 
		SessionLoadCount = true, 
		ActiveSession = true, 
		ForceLoadSession = true, 
		LastUpdate = true
	}
};
local u8 = false;
local l___issue_queue__9 = v10._issue_queue;
local function u10(p16)
	local v17 = tostring(p16.VersionId and 0);
	local v18 = {
		CreatedTime = p16.CreatedTime, 
		UpdatedTime = p16.UpdatedTime, 
		Version = string.rep("0", 16) .. "." .. string.rep("0", 10 - string.len(v17)) .. v17 .. "." .. string.rep("0", 16) .. ".01"
	};
	local u11 = p16.MetaData or {};
	function v18.GetMetadata()
		return u4(u11);
	end;
	local u12 = p16.UserIds or {};
	function v18.GetUserIds()
		return u4(u12);
	end;
	return v18;
end;
local l__PlaceId__13 = game.PlaceId;
local l__JobId__14 = game.JobId;
local function u15(p17, p18, p19, p20, p21)
	local v19 = p17[p18];
	if v19 == nil then
		v19 = {};
		p17[p18] = v19;
	end;
	local v20 = math.floor(os.time() * 1000);
	local v21 = v19[p19];
	local v22 = false;
	if v21 == nil then
		v22 = true;
		if p21 ~= true then
			v21 = {
				Data = nil, 
				CreatedTime = v20, 
				UpdatedTime = v20, 
				VersionId = 0, 
				UserIds = {}, 
				MetaData = {}
			};
			v19[p19] = v21;
		end;
	end;
	local v23, v24, v25 = p20(v21 and v21.Data, v22 == false and u10(v21) or nil);
	if v23 == nil then
		return nil;
	end;
	if v21 ~= nil and p21 ~= true then
		v21.Data = v23;
		v21.UserIds = u4(v24 or {});
		v21.MetaData = u4(v25 or {});
		v21.VersionId = v21.VersionId + 1;
		v21.UpdatedTime = v20;
	end;
	return u4(v23), v21 ~= nil and u10(v21) or nil;
end;
local l___user_mock_data_store__16 = v10._user_mock_data_store;
local u17 = false;
local l___mock_data_store__18 = v10._mock_data_store;
local function u19(p22, p23, p24)
	if u6[p23] == nil then
		u6[p23] = {};
	end;
	if u6[p23][p24] == nil then
		u6[p23][p24] = {
			LastWrite = 0, 
			Queue = {}, 
			CleanupJob = nil
		};
	end;
	local v26 = u6[p23][p24];
	local l__Queue__27 = v26.Queue;
	if v26.CleanupJob ~= nil then
		v26.CleanupJob:Disconnect();
		v26.CleanupJob = nil;
	end;
	if u7.RobloxWriteCooldown < os.clock() - v26.LastWrite and #l__Queue__27 == 0 then
		v26.LastWrite = os.clock();
		return p22();
	end;
	table.insert(l__Queue__27, p22);
	while not (u7.RobloxWriteCooldown < os.clock() - v26.LastWrite) or l__Queue__27[1] ~= p22 do
		task.wait();	
	end;
	table.remove(l__Queue__27, 1);
	v26.LastWrite = os.clock();
	return p22();
end;
local function u20(p25, p26, p27, p28)
	warn("[ProfileService]: DataStore API error " .. string.format("[Store:\"%s\";%sKey:\"%s\"]", p26, p27 ~= nil and string.format("Scope:\"%s\";", p27) or "", p28) .. " - \"" .. tostring(p25) .. "\"");
	table.insert(l___issue_queue__9, os.clock());
	v10.IssueSignal:Fire(tostring(p25), p26, p28);
end;
local l___auto_save_list__21 = v10._auto_save_list;
local u22 = 1;
local u23 = os.clock();
local l___active_profile_stores__24 = v10._active_profile_stores;
local function u25(p29)
	local l___profile_store__28 = p29._profile_store;
	(p29._is_user_mock == true and l___profile_store__28._mock_loaded_profiles or l___profile_store__28._loaded_profiles)[p29._profile_key] = nil;
	if next(l___profile_store__28._loaded_profiles) == nil and next(l___profile_store__28._mock_loaded_profiles) == nil then
		local v29 = table.find(l___active_profile_stores__24, l___profile_store__28);
		if v29 ~= nil then
			table.remove(l___active_profile_stores__24, v29);
		end;
	end;
	local v30 = table.find(l___auto_save_list__21, p29);
	if v30 ~= nil then
		table.remove(l___auto_save_list__21, v30);
		if v30 < u22 then
			u22 = u22 - 1;
		end;
		if l___auto_save_list__21[u22] == nil then
			u22 = 1;
		end;
	end;
	local v31 = nil;
	local v32 = nil;
	local l__ActiveSession__33 = p29.MetaData.ActiveSession;
	if l__ActiveSession__33 ~= nil then
		v31 = l__ActiveSession__33[1];
		v32 = l__ActiveSession__33[2];
	end;
	p29._release_listeners:Fire(v31, v32);
end;
local u26 = 0;
local function u27(p30, p31, p32, p33, p34, p35)
	local u28 = nil;
	local u29 = nil;
	local v34, v35 = pcall(function()
		local v36 = nil;
		v36 = function(p36)
			local v37 = false;
			local v38 = false;
			local v39 = { 0, {} };
			if p36 == nil then
				v37 = true;
			elseif type(p36) ~= "table" then
				v37 = true;
				v38 = true;
			end;
			if type(p36) == "table" then
				if type(p36.Data) == "table" and type(p36.MetaData) == "table" and type(p36.GlobalUpdates) == "table" then
					p36.WasCorrupted = false;
					v39 = p36.GlobalUpdates;
					if p32.ExistingProfileHandle ~= nil then
						p32.ExistingProfileHandle(p36);
					end;
				elseif p36.Data == nil and p36.MetaData == nil and type(p36.GlobalUpdates) == "table" then
					p36.WasCorrupted = false;
					v39 = p36.GlobalUpdates and v39;
					v37 = true;
				else
					v37 = true;
					v38 = true;
				end;
			end;
			if v37 == true then
				p36 = {
					GlobalUpdates = v39
				};
				if p32.MissingProfileHandle ~= nil then
					p32.MissingProfileHandle(p36);
				end;
			end;
			if p32.EditProfile ~= nil then
				p32.EditProfile(p36);
			end;
			if v38 == true then
				p36.WasCorrupted = true;
			end;
			return p36, p36.UserIds, p36.RobloxMetaData;
		end;
		if p33 == true then
			local v40, v41 = u15(l___user_mock_data_store__16, p30._profile_store_lookup, p31, v36, p34);
			u28 = v40;
			u29 = v41;
			task.wait();
			return;
		end;
		if u17 ~= true then
			local v42, v43 = u19(function()
				if p34 ~= true then
					return p30._global_data_store:UpdateAsync(p31, v36);
				end;
				local v44 = nil;
				local v45 = nil;
				if p35 ~= nil then
					local u30 = v44;
					local u31 = v45;
					local v46, v47 = pcall(function()
						local v48, v49 = p30._global_data_store:GetVersionAsync(p31, p35);
						u30 = v48;
						u31 = v49;
					end);
					if v46 == false and type(v47) == "string" and string.find(v47, "not valid") ~= nil then
						warn("[ProfileService]: Passed version argument is not valid; Traceback:\n" .. debug.traceback());
					end;
				else
					local v50, v51 = p30._global_data_store:GetAsync(p31);
					v44 = v50;
					v45 = v51;
				end;
				return v36(v44), v45;
			end, p30._profile_store_lookup, p31);
			u28 = v42;
			u29 = v43;
			return;
		end;
		local v52, v53 = u15(l___mock_data_store__18, p30._profile_store_lookup, p31, v36, p34);
		u28 = v52;
		u29 = v53;
		task.wait();
	end);
	if v34 ~= true or type(u28) ~= "table" then
		u20(v35 ~= nil and v35 or "Undefined error", p30._profile_store_name, p30._profile_store_scope, p31);
		return nil;
	end;
	if u28.WasCorrupted == true and p34 ~= true then
		local l___profile_store_name__54 = p30._profile_store_name;
		local l___profile_store_scope__55 = p30._profile_store_scope;
		warn("[ProfileService]: Resolved profile corruption " .. string.format("[Store:\"%s\";%sKey:\"%s\"]", l___profile_store_name__54, l___profile_store_scope__55 ~= nil and string.format("Scope:\"%s\";", l___profile_store_scope__55) or "", p31));
		v10.CorruptionSignal:Fire(l___profile_store_name__54, p31);
	end;
	return nil, nil;
end;
local function u32(p37, p38, p39)
	local l__GlobalUpdates__56 = p37.GlobalUpdates;
	local l___pending_update_lock__57 = l__GlobalUpdates__56._pending_update_lock;
	local l___pending_update_clear__58 = l__GlobalUpdates__56._pending_update_clear;
	local v59, v60, v61 = ipairs(p39[2]);
	while true do
		local v62, v63 = v59(v60, v61);
		if not v62 then
			break;
		end;
		local v64 = nil;
		for v65, v66 in ipairs(p38[2]) do
			if v66[1] == v63[1] then
				v64 = v66;
				break;
			end;
		end;
		local v67 = false;
		if v64 == nil or v64[2] < v63[2] or v63[3] ~= v64[3] then
			v67 = true;
		end;
		if v67 == true then
			if v63[3] == false then
				local v68 = false;
				for v69, v70 in ipairs(l___pending_update_lock__57) do
					if v63[1] == v70 then
						v68 = true;
						break;
					end;
				end;
				if v68 == false then
					l__GlobalUpdates__56._new_active_update_listeners:Fire(v63[1], v63[4]);
				end;
			end;
			if v63[3] == true then
				local v71 = false;
				for v72, v73 in ipairs(l___pending_update_clear__58) do
					if v63[1] == v73 then
						v71 = true;
						break;
					end;
				end;
				if v71 == false then
					l__GlobalUpdates__56._new_locked_update_listeners:FireUntil(function()
						return table.find(l___pending_update_clear__58, v63[1]) == nil;
					end, v63[1], v63[4]);
				end;
			end;
		end;	
	end;
end;
local function u33(p40, p41)
	if u6[p40] ~= nil then
		if u6[p40][p41] ~= nil then
			local v74 = u6[p40][p41];
			if v74.CleanupJob == nil then
				local l__Queue__34 = v74.Queue;
				v74.CleanupJob = l__RunService__11.Heartbeat:Connect(function()
					if u7.RobloxWriteCooldown < os.clock() - v74.LastWrite and #l__Queue__34 == 0 then
						v74.CleanupJob:Disconnect();
						if u6[p40] ~= nil then
							u6[p40][p41] = nil;
							if next(u6[p40]) == nil then
								u6[p40] = nil;
							end;
						end;
					end;
				end);
				return;
			end;
		elseif next(u6[p40]) == nil then
			u6[p40] = nil;
		end;
	end;
end;
local v75 = {};
v75.__index = v75;
function v75.GetActiveUpdates(p42)
	local v76 = {};
	for v77, v78 in ipairs(p42._updates_latest[2]) do
		if v78[3] == false then
			local v79 = false;
			if p42._pending_update_lock ~= nil then
				for v80, v81 in ipairs(p42._pending_update_lock) do
					if v78[1] == v81 then
						v79 = true;
						break;
					end;
				end;
			end;
			if v79 == false then
				table.insert(v76, { v78[1], v78[4] });
			end;
		end;
	end;
	return v76;
end;
function v75.GetLockedUpdates(p43)
	local v82 = {};
	for v83, v84 in ipairs(p43._updates_latest[2]) do
		if v84[3] == true then
			local v85 = false;
			if p43._pending_update_clear ~= nil then
				for v86, v87 in ipairs(p43._pending_update_clear) do
					if v84[1] == v87 then
						v85 = true;
						break;
					end;
				end;
			end;
			if v85 == false then
				table.insert(v82, { v84[1], v84[4] });
			end;
		end;
	end;
	return v82;
end;
function v75.ListenToNewActiveUpdate(p44, p45)
	if type(p45) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in GlobalUpdates:ListenToNewActiveUpdate()");
	end;
	if p44._update_handler_mode == true then
		error("[ProfileService]: Can't listen to new global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p44._new_active_update_listeners == nil then
		error("[ProfileService]: Can't listen to new global updates in view mode");
	elseif p44._profile:IsActive() == false then
		return {
			Disconnect = function()

			end
		};
	end;
	return p44._new_active_update_listeners:Connect(p45);
end;
function v75.ListenToNewLockedUpdate(p46, p47)
	if type(p47) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in GlobalUpdates:ListenToNewLockedUpdate()");
	end;
	if p46._update_handler_mode == true then
		error("[ProfileService]: Can't listen to new global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p46._new_locked_update_listeners == nil then
		error("[ProfileService]: Can't listen to new global updates in view mode");
	elseif p46._profile:IsActive() == false then
		return {
			Disconnect = function()

			end
		};
	end;
	return p46._new_locked_update_listeners:Connect(p47);
end;
function v75.LockActiveUpdate(p48, p49)
	if type(p49) ~= "number" then
		error("[ProfileService]: Invalid update_id");
	end;
	if p48._update_handler_mode == true then
		error("[ProfileService]: Can't lock active global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p48._pending_update_lock == nil then
		error("[ProfileService]: Can't lock active global updates in view mode");
	elseif p48._profile:IsActive() == false then
		error("[ProfileService]: PROFILE EXPIRED - Can't lock active global updates");
	end;
	local v88 = nil;
	for v89, v90 in ipairs(p48._updates_latest[2]) do
		if v90[1] == p49 then
			v88 = v90;
			break;
		end;
	end;
	if v88 ~= nil then
		local v91 = false;
		for v92, v93 in ipairs(p48._pending_update_lock) do
			if p49 == v93 then
				v91 = true;
				break;
			end;
		end;
		if v91 == false and v88[3] == false then
			table.insert(p48._pending_update_lock, p49);
			return;
		end;
	else
		error("[ProfileService]: Passed non-existant update_id");
	end;
end;
function v75.ClearLockedUpdate(p50, p51)
	if type(p51) ~= "number" then
		error("[ProfileService]: Invalid update_id");
	end;
	if p50._update_handler_mode == true then
		error("[ProfileService]: Can't clear locked global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p50._pending_update_clear == nil then
		error("[ProfileService]: Can't clear locked global updates in view mode");
	elseif p50._profile:IsActive() == false then
		error("[ProfileService]: PROFILE EXPIRED - Can't clear locked global updates");
	end;
	local v94 = nil;
	for v95, v96 in ipairs(p50._updates_latest[2]) do
		if v96[1] == p51 then
			v94 = v96;
			break;
		end;
	end;
	if v94 ~= nil then
		local v97 = false;
		for v98, v99 in ipairs(p50._pending_update_clear) do
			if p51 == v99 then
				v97 = true;
				break;
			end;
		end;
		if v97 == false and v94[3] == true then
			table.insert(p50._pending_update_clear, p51);
			return;
		end;
	else
		error("[ProfileService]: Passed non-existant update_id");
	end;
end;
function v75.AddActiveUpdate(p52, p53)
	if type(p53) ~= "table" then
		error("[ProfileService]: Invalid update_data");
	end;
	if p52._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't add active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()");
	elseif p52._update_handler_mode ~= true then
		error("[ProfileService]: Can't add active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()");
	end;
	local l___updates_latest__100 = p52._updates_latest;
	local v101 = l___updates_latest__100[1] + 1;
	l___updates_latest__100[1] = v101;
	table.insert(l___updates_latest__100[2], { v101, 1, false, p53 });
end;
function v75.ChangeActiveUpdate(p54, p55, p56)
	if type(p55) ~= "number" then
		error("[ProfileService]: Invalid update_id");
	end;
	if type(p56) ~= "table" then
		error("[ProfileService]: Invalid update_data");
	end;
	if p54._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't change active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()");
	elseif p54._update_handler_mode ~= true then
		error("[ProfileService]: Can't change active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()");
	end;
	local v102 = nil;
	for v103, v104 in ipairs(p54._updates_latest[2]) do
		if p55 == v104[1] then
			v102 = v104;
			break;
		end;
	end;
	if v102 == nil then
		error("[ProfileService]: Passed non-existant update_id");
		return;
	end;
	if v102[3] == true then
		error("[ProfileService]: Can't change locked global update");
	end;
	v102[2] = v102[2] + 1;
	v102[4] = p56;
end;
function v75.ClearActiveUpdate(p57, p58)
	if type(p58) ~= "number" then
		error("[ProfileService]: Invalid update_id argument");
	end;
	if p57._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't clear active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()");
	elseif p57._update_handler_mode ~= true then
		error("[ProfileService]: Can't clear active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()");
	end;
	local l___updates_latest__105 = p57._updates_latest;
	local v106 = nil;
	local v107 = nil;
	for v108, v109 in ipairs(l___updates_latest__105[2]) do
		if p58 == v109[1] then
			v106 = v108;
			v107 = v109;
			break;
		end;
	end;
	if v107 == nil then
		error("[ProfileService]: Passed non-existant update_id");
		return;
	end;
	if v107[3] == true then
		error("[ProfileService]: Can't clear locked global update");
	end;
	table.remove(l___updates_latest__105[2], v106);
end;
local v110 = {};
v110.__index = v110;
function v110.IsActive(p59)
	return (p59._is_user_mock == true and p59._profile_store._mock_loaded_profiles or p59._profile_store._loaded_profiles)[p59._profile_key] == p59;
end;
function v110.GetMetaTag(p60, p61)
	if p60.MetaData == nil then
		return nil;
	end;
	return p60.MetaData.MetaTags[p61];
end;
function v110.SetMetaTag(p62, p63, p64)
	if type(p63) ~= "string" then
		error("[ProfileService]: tag_name must be a string");
	elseif string.len(p63) == 0 then
		error("[ProfileService]: Invalid tag_name");
	end;
	p62.MetaData.MetaTags[p63] = p64;
end;
function v110.Reconcile(p65)
	u5(p65.Data, p65._profile_store._profile_template);
end;
function v110.ListenToRelease(p66, p67)
	if type(p67) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in Profile:ListenToRelease()");
	end;
	if p66._view_mode == true then
		return {
			Disconnect = function()

			end
		};
	end;
	if p66:IsActive() ~= false then
		return p66._release_listeners:Connect(p67);
	end;
	local v111 = nil;
	local v112 = nil;
	local l__ActiveSession__113 = p66.MetaData.ActiveSession;
	if l__ActiveSession__113 ~= nil then
		v111 = l__ActiveSession__113[1];
		v112 = l__ActiveSession__113[2];
	end;
	p67(v111, v112);
	return {
		Disconnect = function()

		end
	};
end;
local function u35(p68, p69, p70)
	if type(p68.Data) ~= "table" then
		local l___profile_store_name__114 = p68._profile_store._profile_store_name;
		local l___profile_store_scope__115 = p68._profile_store._profile_store_scope;
		local l___profile_key__116 = p68._profile_key;
		warn("[ProfileService]: Resolved profile corruption " .. string.format("[Store:\"%s\";%sKey:\"%s\"]", l___profile_store_name__114, l___profile_store_scope__115 ~= nil and string.format("Scope:\"%s\";", l___profile_store_scope__115) or "", l___profile_key__116));
		v10.CorruptionSignal:Fire(l___profile_store_name__114, l___profile_key__116);
		error("[ProfileService]: PROFILE DATA CORRUPTED DURING RUNTIME! Profile: " .. p68:Identify());
	end;
	if p69 == true and p70 ~= true then
		u25(p68);
	end;
	u26 = u26 + 1;
	local l__SessionLoadCount__117 = p68.MetaData.SessionLoadCount;
	local v118 = true;
	while v118 == true do
		if p69 ~= true then
			v118 = false;
		end;
		local v119 = {
			ExistingProfileHandle = nil, 
			MissingProfileHandle = nil
		};
		function v119.EditProfile(p71)
			local v120 = false;
			local v121 = false;
			if p70 ~= true then
				local l__ActiveSession__122 = p71.MetaData.ActiveSession;
				local l__ForceLoadSession__123 = p71.MetaData.ForceLoadSession;
				if type(l__ActiveSession__122) == "table" then
					local v124 = false;
					if l__ActiveSession__122[1] == l__PlaceId__13 then
						v124 = l__ActiveSession__122[2] == l__JobId__14;
					end;
					if v124 then
						v124 = p71.MetaData.SessionLoadCount == l__SessionLoadCount__117;
					end;
					v120 = v124;
				end;
				if type(l__ForceLoadSession__123) == "table" then
					local v125 = false;
					if l__ForceLoadSession__123[1] == l__PlaceId__13 then
						v125 = l__ForceLoadSession__123[2] == l__JobId__14;
					end;
					v121 = not v125;
				end;
			else
				v120 = true;
			end;
			if v120 == true then
				if p70 ~= true then
					local v126 = p71.GlobalUpdates[2];
					local l__GlobalUpdates__127 = p68.GlobalUpdates;
					local l___pending_update_lock__128 = l__GlobalUpdates__127._pending_update_lock;
					for v129 = 1, #v126 do
						for v130, v131 in ipairs(l___pending_update_lock__128) do
							if v126[v129][1] == v131 then
								v126[v129][3] = true;
								break;
							end;
						end;
					end;
					local v132, v133, v134 = ipairs(l__GlobalUpdates__127._pending_update_clear);
					while true do
						local v135, v136 = v132(v133, v134);
						if not v135 then
							break;
						end;
						for v137 = 1, #v126 do
							if v126[v137][1] == v136 and v126[v137][3] == true then
								table.remove(v126, v137);
								break;
							end;
						end;					
					end;
				end;
				p71.Data = p68.Data;
				p71.RobloxMetaData = p68.RobloxMetaData;
				p71.UserIds = p68.UserIds;
				if p70 ~= true then
					p71.MetaData.MetaTags = p68.MetaData.MetaTags;
					p71.MetaData.LastUpdate = os.time();
					if p69 == true or v121 == true then
						p71.MetaData.ActiveSession = nil;
						return;
					end;
				else
					p71.MetaData = p68.MetaData;
					p71.MetaData.ActiveSession = nil;
					p71.MetaData.ForceLoadSession = nil;
					p71.GlobalUpdates = p68.GlobalUpdates._updates_latest;
				end;
			end;
		end;
		local v138, v139 = u27(p68._profile_store, p68._profile_key, v119, p68._is_user_mock);
		if v138 ~= nil and v139 ~= nil then
			local v140 = nil;
			if p70 == true then
				break;
			end;
			p68.KeyInfo = v139;
			local l__GlobalUpdates__141 = p68.GlobalUpdates;
			local l__GlobalUpdates__142 = v138.GlobalUpdates;
			l__GlobalUpdates__141._updates_latest = l__GlobalUpdates__142;
			local l__MetaData__143 = p68.MetaData;
			local l__MetaData__144 = v138.MetaData;
			for v145 in pairs(u7.MetaTagsUpdatedValues) do
				l__MetaData__143[v145] = l__MetaData__144[v145];
			end;
			l__MetaData__143.MetaTagsLatest = l__MetaData__144.MetaTags;
			local l__ActiveSession__146 = v138.MetaData.ActiveSession;
			local v147 = false;
			if type(l__ActiveSession__146) == "table" then
				local v148 = false;
				if l__ActiveSession__146[1] == l__PlaceId__13 then
					v148 = l__ActiveSession__146[2] == l__JobId__14;
				end;
				if v148 then
					v148 = v138.MetaData.SessionLoadCount == l__SessionLoadCount__117;
				end;
				v147 = v148;
			end;
			v140 = p68:IsActive();
			if v147 == true then
				if v140 == true then
					u32(p68, l__GlobalUpdates__141._updates_latest, l__GlobalUpdates__142);
				end;
			else
				if v140 == true then
					u25(p68);
				end;
				u33(p68._profile_store._profile_store_lookup, p68._profile_key);
				if p68._hop_ready == false then
					p68._hop_ready = true;
					p68._hop_ready_listeners:Fire();
				end;
			end;
			p68.MetaTagsUpdated:Fire(p68.MetaData.MetaTagsLatest);
			p68.KeyInfoUpdated:Fire(v139);
		elseif v118 == true then
			task.wait();
		end;	
	end;
	u26 = u26 - 1;
end;
function v110.Save(p72)
	if p72._view_mode == true then
		error("[ProfileService]: Can't save Profile in view mode - Should you be calling :OverwriteAsync() instead?");
	end;
	if p72:IsActive() == false then
		warn("[ProfileService]: Attempted saving an inactive profile " .. p72:Identify() .. "; Traceback:\n" .. debug.traceback());
		return;
	end;
	local v149 = u6[p72._profile_store._profile_store_lookup];
	if v149 ~= nil then
		local v150 = v149[p72._profile_key];
		local v151 = true;
		if v150 ~= nil then
			v151 = #v150.Queue == 0;
		end;
	else
		v151 = true;
	end;
	if v151 == true then
		local v152 = table.find(l___auto_save_list__21, p72);
		if v152 ~= nil then
			table.remove(l___auto_save_list__21, v152);
			if v152 < u22 then
				u22 = u22 - 1;
			end;
			if l___auto_save_list__21[u22] == nil then
				u22 = 1;
			end;
		end;
		table.insert(l___auto_save_list__21, u22, p72);
		if #l___auto_save_list__21 > 1 then
			u22 = u22 + 1;
		elseif #l___auto_save_list__21 == 1 then
			u23 = os.clock();
		end;
		task.spawn(u35, p72);
	end;
end;
function v110.Release(p73)
	if p73._view_mode == true then
		return;
	end;
	if p73:IsActive() == true then
		task.spawn(u35, p73, true);
	end;
end;
function v110.ListenToHopReady(p74, p75)
	if type(p75) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in Profile:ListenToHopReady()");
	end;
	if p74._view_mode == true then
		return {
			Disconnect = function()

			end
		};
	end;
	if p74._hop_ready == true then
		task.spawn(p75);
		return {
			Disconnect = function()

			end
		};
	end;
	return p74._hop_ready_listeners:Connect(p75);
end;
function v110.AddUserId(p76, p77)
	if type(p77) ~= "number" or p77 % 1 ~= 0 then
		warn("[ProfileService]: Invalid UserId argument for :AddUserId() (" .. tostring(p77) .. "); Traceback:\n" .. debug.traceback());
		return;
	end;
	if p77 < 0 and p76._is_user_mock ~= true and u17 ~= true then
		return;
	end;
	if table.find(p76.UserIds, p77) == nil then
		table.insert(p76.UserIds, p77);
	end;
end;
function v110.RemoveUserId(p78, p79)
	if type(p79) ~= "number" or p79 % 1 ~= 0 then
		warn("[ProfileService]: Invalid UserId argument for :RemoveUserId() (" .. tostring(p79) .. "); Traceback:\n" .. debug.traceback());
		return;
	end;
	local v153 = table.find(p78.UserIds, p79);
	if v153 ~= nil then
		table.remove(p78.UserIds, v153);
	end;
end;
local function u36(p80, p81, p82)
	return string.format("[Store:\"%s\";%sKey:\"%s\"]", p80, p81 ~= nil and string.format("Scope:\"%s\";", p81) or "", p82);
end;
function v110.Identify(p83)
	return u36(p83._profile_store._profile_store_name, p83._profile_store._profile_store_scope, p83._profile_key);
end;
function v110.ClearGlobalUpdates(p84)
	if p84._view_mode ~= true then
		error("[ProfileService]: :ClearGlobalUpdates() can only be used in view mode");
	end;
	local v154 = {
		_updates_latest = { 0, {} }, 
		_profile = p84
	};
	setmetatable(v154, v75);
	p84.GlobalUpdates = v154;
end;
function v110.OverwriteAsync(p85)
	if p85._view_mode ~= true then
		error("[ProfileService]: :OverwriteAsync() can only be used in view mode");
	end;
	u35(p85, nil, true);
end;
local v155 = {};
v155.__index = v155;
function v155._MoveQueue(p86)
	while #p86._query_queue > 0 do
		task.spawn((table.remove(p86._query_queue, 1)));
		if p86._is_query_yielded == true then
			break;
		end;	
	end;
end;
function v155.NextAsync(p87, p88)
	local v156 = nil;
	if p87._profile_store == nil then
		return nil;
	end;
	local u37 = false;
	local u38 = nil;
	v156 = function()
		if p87._query_failure == true then
			u37 = true;
			return;
		end;
		if p87._query_pages == nil then
			p87._is_query_yielded = true;
			task.spawn(function()
				u38 = p87:NextAsync(true);
				u37 = true;
			end);
			local v157, v158 = pcall(function()
				p87._query_pages = p87._profile_store._global_data_store:ListVersionsAsync(p87._profile_key, p87._sort_direction, p87._min_date, p87._max_date);
				p87._query_index = 0;
			end);
			if v157 == false or p87._query_pages == nil then
				warn("[ProfileService]: Version query fail - " .. tostring(v158));
				p87._query_failure = true;
			end;
			p87._is_query_yielded = false;
			p87:_MoveQueue();
			return;
		end;
		local v159 = p87._query_pages:GetCurrentPage()[p87._query_index + 1];
		if p87._query_pages.IsFinished == true and v159 == nil then
			u37 = true;
			return;
		end;
		if v159 ~= nil then
			p87._query_index = p87._query_index + 1;
			u38 = p87._profile_store:ViewProfileAsync(p87._profile_key, v159.Version);
			u37 = true;
			return;
		end;
		p87._is_query_yielded = true;
		task.spawn(function()
			u38 = p87:NextAsync(true);
			u37 = true;
		end);
		if pcall(function()
			p87._query_pages:AdvanceToNextPageAsync();
			p87._query_index = 0;
		end) == false or #p87._query_pages:GetCurrentPage() == 0 then
			p87._query_failure = true;
		end;
		p87._is_query_yielded = false;
		p87:_MoveQueue();
	end;
	if p87._is_query_yielded == false then
		v156();
	elseif p88 == true then
		table.insert(p87._query_queue, 1, v156);
	else
		table.insert(p87._query_queue, v156);
	end;
	while u37 == false do
		task.wait();	
	end;
	return nil;
end;
local v160 = {};
v160.__index = v160;
local u39 = {};
local u40 = 0;
local u41 = 0;
function v160.LoadProfileAsync(p89, p90, p91, p92)
	p91 = p91 and "ForceLoad";
	if p89._profile_template == nil then
		error("[ProfileService]: Profile template not set - ProfileStore:LoadProfileAsync() locked for this ProfileStore");
	end;
	if type(p90) ~= "string" then
		error("[ProfileService]: profile_key must be a string");
	elseif string.len(p90) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if type(p91) ~= "function" and p91 ~= "ForceLoad" and p91 ~= "Steal" then
		error("[ProfileService]: Invalid not_released_handler");
	end;
	if v10.ServiceLocked == true then
		return nil;
	end;
	while p89._is_pending == true do
		task.wait();	
	end;
	local v161 = p92 == u39;
	for v162, v163 in ipairs(l___active_profile_stores__24) do
		if v163._profile_store_lookup == p89._profile_store_lookup and (v161 == true and v163._mock_loaded_profiles or v163._loaded_profiles)[p90] ~= nil then
			local l___profile_store_scope__164 = p89._profile_store_scope;
			error("[ProfileService]: Profile " .. string.format("[Store:\"%s\";%sKey:\"%s\"]", p89._profile_store_name, l___profile_store_scope__164 ~= nil and string.format("Scope:\"%s\";", l___profile_store_scope__164) or "", p90) .. " is already loaded in this session");
		end;
	end;
	u40 = u40 + 1;
	local v165 = p91 == "ForceLoad";
	local v166 = 0;
	local v167 = false;
	local v168 = p91 == "Steal";
	while v10.ServiceLocked == false do
		local v169 = v161 == true and p89._mock_profile_load_jobs or p89._profile_load_jobs;
		local v170 = u41 + 1;
		u41 = v170;
		local v171 = v169[p90];
		if v171 ~= nil then
			v171[1] = v170;
			while v171[2] == nil do
				task.wait();			
			end;
			if v171[1] ~= v170 then
				u40 = u40 - 1;
				return nil;
			end;
			local v172, v173 = table.unpack(v171[2]);
			local v174 = v172;
			local v175 = v173;
			v169[p90] = nil;
		else
			local v176 = { v170, nil };
			v169[p90] = v176;
			local v177 = {};
			function v177.ExistingProfileHandle(p93)
				if v10.ServiceLocked == false then
					local l__ActiveSession__178 = p93.MetaData.ActiveSession;
					local l__ForceLoadSession__179 = p93.MetaData.ForceLoadSession;
					if l__ActiveSession__178 == nil then
						p93.MetaData.ActiveSession = { l__PlaceId__13, l__JobId__14 };
						p93.MetaData.ForceLoadSession = nil;
						return;
					end;
					if type(l__ActiveSession__178) == "table" then
						local v180 = false;
						if l__ActiveSession__178[1] == l__PlaceId__13 then
							v180 = l__ActiveSession__178[2] == l__JobId__14;
						end;
						if v180 == false then
							local l__LastUpdate__181 = p93.MetaData.LastUpdate;
							if l__LastUpdate__181 ~= nil and u7.AssumeDeadSessionLock < os.time() - l__LastUpdate__181 then
								p93.MetaData.ActiveSession = { l__PlaceId__13, l__JobId__14 };
								p93.MetaData.ForceLoadSession = nil;
								return;
							end;
							if v167 == true or v168 == true then
								local v182 = false;
								if l__ForceLoadSession__179 ~= nil then
									v182 = false;
									if l__ForceLoadSession__179[1] == l__PlaceId__13 then
										v182 = l__ForceLoadSession__179[2] == l__JobId__14;
									end;
								end;
								if v182 == true or v168 == true then
									p93.MetaData.ActiveSession = { l__PlaceId__13, l__JobId__14 };
									p93.MetaData.ForceLoadSession = nil;
									return;
								end;
							elseif v165 == true then
								p93.MetaData.ForceLoadSession = { l__PlaceId__13, l__JobId__14 };
								return;
							end;
						else
							p93.MetaData.ForceLoadSession = nil;
						end;
					end;
				end;
			end;
			function v177.MissingProfileHandle(p94)
				p94.Data = u4(p89._profile_template);
				p94.MetaData = {
					ProfileCreateTime = os.time(), 
					SessionLoadCount = 0, 
					ActiveSession = { l__PlaceId__13, l__JobId__14 }, 
					ForceLoadSession = nil, 
					MetaTags = {}
				};
			end;
			function v177.EditProfile(p95)
				if v10.ServiceLocked == false then
					local l__ActiveSession__183 = p95.MetaData.ActiveSession;
					if l__ActiveSession__183 ~= nil then
						local v184 = false;
						if l__ActiveSession__183[1] == l__PlaceId__13 then
							v184 = l__ActiveSession__183[2] == l__JobId__14;
						end;
						if v184 == true then
							p95.MetaData.SessionLoadCount = p95.MetaData.SessionLoadCount + 1;
							p95.MetaData.LastUpdate = os.time();
						end;
					end;
				end;
			end;
			v176[2] = table.pack(u27(p89, p90, v177, v161));
			if v176[1] ~= v170 then
				u40 = u40 - 1;
				return nil;
			end;
			local v185, v186 = table.unpack(v176[2]);
			v174 = v185;
			v175 = v186;
			v169[p90] = nil;
		end;
		if v174 ~= nil and v175 ~= nil then
			local l__ActiveSession__187 = v174.MetaData.ActiveSession;
			if type(l__ActiveSession__187) ~= "table" then
				u40 = u40 - 1;
				return nil;
			end;
			local v188 = false;
			if l__ActiveSession__187[1] == l__PlaceId__13 then
				v188 = l__ActiveSession__187[2] == l__JobId__14;
			end;
			if v188 == true then
				v174.MetaData.MetaTagsLatest = u4(v174.MetaData.MetaTags);
				local v189 = {
					_updates_latest = v174.GlobalUpdates, 
					_pending_update_lock = {}, 
					_pending_update_clear = {}, 
					_new_active_update_listeners = v9.NewScriptSignal(), 
					_new_locked_update_listeners = v9.NewScriptSignal(), 
					_profile = nil
				};
				setmetatable(v189, v75);
				local v190 = {
					Data = v174.Data, 
					MetaData = v174.MetaData, 
					MetaTagsUpdated = v9.NewScriptSignal(), 
					RobloxMetaData = v174.RobloxMetaData or {}, 
					UserIds = v174.UserIds or {}, 
					KeyInfo = v175, 
					KeyInfoUpdated = v9.NewScriptSignal(), 
					GlobalUpdates = v189, 
					_profile_store = local v191, 
					_profile_key = p90, 
					_release_listeners = v9.NewScriptSignal(), 
					_hop_ready_listeners = v9.NewScriptSignal(), 
					_hop_ready = false, 
					_load_timestamp = os.clock(), 
					_is_user_mock = v161
				};
				setmetatable(v190, v110);
				v189._profile = v190;
				if next(v191._loaded_profiles) == nil and next(v191._mock_loaded_profiles) == nil then
					table.insert(l___active_profile_stores__24, v191);
				end;
				if v161 == true then
					v191._mock_loaded_profiles[p90] = v190;
				else
					v191._loaded_profiles[p90] = v190;
				end;
				table.insert(l___auto_save_list__21, u22, v190);
				if #l___auto_save_list__21 > 1 then
					u22 = u22 + 1;
				elseif #l___auto_save_list__21 == 1 then
					u23 = os.clock();
				end;
				if v10.ServiceLocked == true then
					u35(v190, true);
					v190 = nil;
				end;
				u40 = u40 - 1;
				return v190;
			end;
			if v165 == true then
				local l__ForceLoadSession__192 = v174.MetaData.ForceLoadSession;
				local v193 = false;
				if l__ForceLoadSession__192 ~= nil then
					v193 = false;
					if l__ForceLoadSession__192[1] == l__PlaceId__13 then
						v193 = l__ForceLoadSession__192[2] == l__JobId__14;
					end;
				end;
				if v193 ~= true then
					u40 = u40 - 1;
					return nil;
				end;
				if local v194 == false then
					v166 = v166 + 1;
					if v166 == u7.ForceLoadMaxSteps then

					end;
				end;
				task.wait();
				v194 = false;
			elseif local v195 == true then
				task.wait();
			else
				local v196 = p91(l__ActiveSession__187[1], l__ActiveSession__187[2]);
				if v196 == "Repeat" then
					task.wait();
				else
					if v196 == "Cancel" then
						u40 = u40 - 1;
						return nil;
					end;
					if v196 == "ForceLoad" then
						v165 = true;
						v194 = true;
						task.wait();
					elseif v196 == "Steal" then
						task.wait();
					else
						local l___profile_store_scope__197 = v191._profile_store_scope;
						error("[ProfileService]: Invalid return from not_released_handler (\"" .. tostring(v196) .. "\")(" .. type(v196) .. ");" .. "\n" .. string.format("[Store:\"%s\";%sKey:\"%s\"]", v191._profile_store_name, l___profile_store_scope__197 ~= nil and string.format("Scope:\"%s\";", l___profile_store_scope__197) or "", p90) .. " Traceback:\n" .. debug.traceback());
					end;
				end;
			end;
		else
			task.wait();
		end;	
	end;
	u40 = u40 - 1;
	return nil;
end;
function v160.GlobalUpdateProfileAsync(p96, p97, p98, p99)
	if type(p97) ~= "string" or string.len(p97) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if type(p98) ~= "function" then
		error("[ProfileService]: Invalid update_handler");
	end;
	if v10.ServiceLocked == true then
		return nil;
	end;
	while p96._is_pending == true do
		task.wait();	
	end;
	while v10.ServiceLocked == false do
		local v198 = {
			ExistingProfileHandle = nil, 
			MissingProfileHandle = nil
		};
		function v198.EditProfile(p100)
			local v199 = {
				_updates_latest = p100.GlobalUpdates, 
				_update_handler_mode = true
			};
			setmetatable(v199, v75);
			p98(v199);
		end;
		local v200 = u27(p96, p97, v198, p99 == u39);
		u33(p96._profile_store_lookup, p97);
		if v200 ~= nil then
			local v201 = {
				_updates_latest = v200.GlobalUpdates
			};
			setmetatable(v201, v75);
			return v201;
		end;
		task.wait();	
	end;
	return nil;
end;
function v160.ViewProfileAsync(p101, p102, p103, p104)
	if type(p102) ~= "string" or string.len(p102) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if v10.ServiceLocked == true then
		return nil;
	end;
	while p101._is_pending == true do
		task.wait();	
	end;
	if p103 ~= nil and (p104 == u39 or u17 == true) then
		return nil;
	end;
	while v10.ServiceLocked == false do
		local v202 = {
			ExistingProfileHandle = nil
		};
		function v202.MissingProfileHandle(p105)
			p105.Data = u4(p101._profile_template);
			p105.MetaData = {
				ProfileCreateTime = os.time(), 
				SessionLoadCount = 0, 
				ActiveSession = nil, 
				ForceLoadSession = nil, 
				MetaTags = {}
			};
		end;
		v202.EditProfile = nil;
		local v203, v204 = u27(p101, p102, v202, p104 == u39, true, p103);
		u33(p101._profile_store_lookup, p102);
		if v203 ~= nil then
			if v204 == nil then
				return nil;
			else
				local v205 = {
					_updates_latest = v203.GlobalUpdates, 
					_profile = nil
				};
				setmetatable(v205, v75);
				local v206 = {
					Data = v203.Data, 
					MetaData = v203.MetaData, 
					MetaTagsUpdated = v9.NewScriptSignal(), 
					RobloxMetaData = v203.RobloxMetaData or {}, 
					UserIds = v203.UserIds or {}, 
					KeyInfo = v204, 
					KeyInfoUpdated = v9.NewScriptSignal(), 
					GlobalUpdates = v205, 
					_profile_store = p101, 
					_profile_key = p102, 
					_view_mode = true, 
					_load_timestamp = os.clock()
				};
				setmetatable(v206, v110);
				v205._profile = v206;
				return v206;
			end;
		end;
		task.wait();	
	end;
	return nil;
end;
function v160.ProfileVersionQuery(p106, p107, p108, p109, p110, p111)
	if type(p107) ~= "string" or string.len(p107) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if v10.ServiceLocked == true then
		return setmetatable({}, v155);
	end;
	while p106._is_pending == true do
		task.wait();	
	end;
	if p111 == u39 or u17 == true then
		error("[ProfileService]: :ProfileVersionQuery() is not supported in mock mode");
	end;
	if p108 ~= nil and (typeof(p108) ~= "EnumItem" or p108.EnumType ~= Enum.SortDirection) then
		error("[ProfileService]: Invalid sort_direction (" .. tostring(p108) .. ")");
	end;
	if p109 ~= nil and typeof(p109) ~= "DateTime" and typeof(p109) ~= "number" then
		error("[ProfileService]: Invalid min_date (" .. tostring(p109) .. ")");
	end;
	if p110 ~= nil and typeof(p110) ~= "DateTime" and typeof(p110) ~= "number" then
		error("[ProfileService]: Invalid max_date (" .. tostring(p110) .. ")");
	end;
	p109 = typeof(p109) == "DateTime" and p109.UnixTimestampMillis or p109;
	p110 = typeof(p110) == "DateTime" and p110.UnixTimestampMillis or p110;
	local v207 = {
		_profile_store = p106, 
		_profile_key = p107, 
		_sort_direction = p108, 
		_min_date = p109, 
		_max_date = p110, 
		_query_pages = nil, 
		_query_index = 0, 
		_query_failure = false, 
		_is_query_yielded = false, 
		_query_queue = {}
	};
	setmetatable(v207, v155);
	return v207;
end;
function v160.WipeProfileAsync(p112, p113, p114)
	if type(p113) ~= "string" or string.len(p113) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if v10.ServiceLocked == true then
		return false;
	end;
	while p112._is_pending == true do
		task.wait();	
	end;
	if p114 == u39 then
		local v208 = l___user_mock_data_store__16[p112._profile_store_lookup];
		if v208 ~= nil then
			v208[p113] = nil;
		end;
		local v209 = true;
		task.wait();
	elseif u17 == true then
		local v210 = l___mock_data_store__18[p112._profile_store_lookup];
		if v210 ~= nil then
			v210[p113] = nil;
		end;
		v209 = true;
		task.wait();
	else
		v209 = pcall(function()
			p112._global_data_store:RemoveAsync(p113);
		end);
	end;
	u33(p112._profile_store_lookup, p113);
	return v209;
end;
local l__DataStoreService__42 = game:GetService("DataStoreService");
function v10.GetProfileStore(p115, p116)
	local v211 = nil;
	local v212 = nil;
	if type(p115) == "string" then
		v211 = p115;
	elseif type(p115) == "table" then
		v211 = p115.Name;
		v212 = p115.Scope;
	else
		error("[ProfileService]: Invalid or missing profile_store_index");
	end;
	if v211 == nil or type(v211) ~= "string" then
		error("[ProfileService]: Missing or invalid \"Name\" parameter");
	elseif string.len(v211) == 0 then
		error("[ProfileService]: ProfileStore name cannot be an empty string");
	end;
	if v212 ~= nil and (type(v212) ~= "string" or string.len(v212) == 0) then
		error("[ProfileService]: Invalid \"Scope\" parameter");
	end;
	if type(p116) ~= "table" then
		error("[ProfileService]: Invalid profile_template");
	end;
	local v213 = {};
	local v214 = {};
	local u43 = nil;
	function v214.LoadProfileAsync(p117, p118, p119)
		return u43:LoadProfileAsync(p118, p119, u39);
	end;
	function v214.GlobalUpdateProfileAsync(p120, p121, p122)
		return u43:GlobalUpdateProfileAsync(p121, p122, u39);
	end;
	function v214.ViewProfileAsync(p123, p124, p125)
		return u43:ViewProfileAsync(p124, p125, u39);
	end;
	function v214.FindProfileVersionAsync(p126, p127, p128, p129, p130)
		return u43:FindProfileVersionAsync(p127, p128, p129, p130, u39);
	end;
	function v214.WipeProfileAsync(p131, p132)
		return u43:WipeProfileAsync(p132, u39);
	end;
	v213.Mock = v214;
	v213._profile_store_name = v211;
	v213._profile_store_scope = v212;
	v213._profile_store_lookup = v211 .. "\000" .. (v212 and "");
	v213._profile_template = p116;
	v213._global_data_store = nil;
	v213._loaded_profiles = {};
	v213._profile_load_jobs = {};
	v213._mock_loaded_profiles = {};
	v213._mock_profile_load_jobs = {};
	v213._is_pending = false;
	u43 = v213;
	setmetatable(u43, v160);
	local v215 = Instance.new("DataStoreOptions");
	v215:SetExperimentalFeatures({
		v2 = true
	});
	if u8 == true then
		u43._is_pending = true;
		task.spawn(function()
			while u8 == true do
				task.wait();			
			end;
			if u17 == false then
				u43._global_data_store = l__DataStoreService__42:GetDataStore(v211, v212, v215);
			end;
			u43._is_pending = false;
		end);
	elseif u17 == false then
		u43._global_data_store = l__DataStoreService__42:GetDataStore(v211, v212, v215);
	end;
	return nil;
end;
function v10.IsLive()
	while u8 == true do
		task.wait();	
	end;
	return u17 == false;
end;
if l__RunService__11:IsStudio() == true then
	u8 = true;
	task.spawn(function()
		local v216, v217 = pcall(function()
			l__DataStoreService__42:GetDataStore("____PS"):SetAsync("____PS", os.time());
		end);
		local v218 = false;
		if v216 == false then
			v218 = string.find(v217, "ConnectFail", 1, true) ~= nil;
		end;
		if v218 == true then
			warn("[ProfileService]: No internet access - check your network connection");
		end;
		if v216 == false and (string.find(v217, "403", 1, true) ~= nil or string.find(v217, "must publish", 1, true) ~= nil or v218 == true) then
			u17 = true;
			v10._use_mock_data_store = true;
			print("[ProfileService]: Roblox API services unavailable - data will not be saved");
		else
			print("[ProfileService]: Roblox API services available - data will be saved");
		end;
		u8 = false;
	end);
end;
local u44 = 0;
l__RunService__11.Heartbeat:Connect(function()
	local v219 = #l___auto_save_list__21;
	if v219 > 0 then
		local v220 = u7.AutoSaveProfiles / v219;
		local v221 = os.clock();
		while v220 < v221 - u23 do
			u23 = u23 + v220;
			local v222 = l___auto_save_list__21[u22];
			if v221 - v222._load_timestamp < u7.AutoSaveProfiles then
				for v223 = 1, v219 - 1 do
					u22 = u22 + 1;
					if v219 < u22 then
						u22 = 1;
					end;
					v222 = l___auto_save_list__21[u22];
					if u7.AutoSaveProfiles <= v221 - v222._load_timestamp then
						break;
					end;
					v222 = nil;
				end;
			end;
			u22 = u22 + 1;
			if v219 < u22 then
				u22 = 1;
			end;
			if v222 ~= nil then
				task.spawn(u35, v222);
			end;		
		end;
	end;
	if v10.CriticalState == false then
		if u7.IssueCountForCriticalState <= #l___issue_queue__9 then
			v10.CriticalState = true;
			v10.CriticalStateSignal:Fire(true);
			u44 = os.clock();
			warn("[ProfileService]: Entered critical state");
		end;
	elseif u7.IssueCountForCriticalState <= #l___issue_queue__9 then
		u44 = os.clock();
	elseif u7.CriticalStateLast < os.clock() - u44 then
		v10.CriticalState = false;
		v10.CriticalStateSignal:Fire(false);
		warn("[ProfileService]: Critical state ended");
	end;
	while true do
		local v224 = l___issue_queue__9[1];
		if v224 == nil then
			return;
		end;
		if not (u7.IssueLast < os.clock() - v224) then
			break;
		end;
		table.remove(l___issue_queue__9, 1);	
	end;
end);
task.spawn(function()
	while u8 == true do
		task.wait();	
	end;
	v9.ConnectToOnClose(function()
		v10.ServiceLocked = true;
		local v225 = 0;
		local v226 = {};
		for v227, v228 in ipairs(l___auto_save_list__21) do
			v226[v227] = v228;
		end;
		for v229, v230 in ipairs(v226) do
			if v230:IsActive() == true then
				v225 = v225 + 1;
				local u45 = v225;
				task.spawn(function()
					u35(v230, true);
					u45 = u45 - 1;
				end);
			end;
		end;
		while v225 > 0 or u40 > 0 or u26 > 0 do
			task.wait();		
		end;
	end, u17 == false);
end);
return v10;
