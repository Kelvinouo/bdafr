
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
--[[VARIABLE DEFINITION ANOMALY DETECTED, DECOMPILATION OUTPUT POTENTIALLY INCORRECT]]--
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local u1 = nil;
local function u2(p1, ...)
	u1 = nil;
	p1(...);
	u1 = u1;
end;
local v2 = {};
v2.__index = v2;
local function u3(...)
	u2(...);
	while true do
		u2(coroutine.yield());	
	end;
end;
function v2.Disconnect(p2)
	if p2._is_connected == false then
		return;
	end;
	p2._is_connected = false;
	local l___script_signal__3 = p2._script_signal;
	l___script_signal__3._listener_count = l___script_signal__3._listener_count - 1;
	if p2._script_signal._head == p2 then
		p2._script_signal._head = p2._next;
	else
		local v4 = p2._script_signal._head;
		while v4 ~= nil and v4._next ~= p2 do
			v4 = v4._next;		
		end;
		if v4 ~= nil then
			v4._next = p2._next;
		end;
	end;
	if p2._disconnect_listener ~= nil then
		if not u1 then
			u1 = coroutine.create(u3);
		end;
		task.spawn(u1, p2._disconnect_listener, p2._disconnect_param);
		p2._disconnect_listener = nil;
	end;
end;
local v5 = {};
v5.__index = v5;
function v5.Connect(p3, p4, p5, p6)
	local v6 = {
		_listener = p4, 
		_script_signal = p3, 
		_disconnect_listener = p5, 
		_disconnect_param = p6, 
		_next = p3._head, 
		_is_connected = true
	};
	setmetatable(v6, v2);
	p3._head = v6;
	p3._listener_count = p3._listener_count + 1;
	return v6;
end;
function v5.GetListenerCount(p7)
	return p7._listener_count;
end;
function v5.Fire(p8, ...)
	local v7 = p8._head;
	while v7 ~= nil do
		if v7._is_connected == true then
			if not u1 then
				u1 = coroutine.create(u3);
			end;
			task.spawn(u1, v7._listener, ...);
		end;
		v7 = v7._next;	
	end;
end;
function v5.FireUntil(p9, p10, ...)
	local v8 = p9._head;
	while v8 ~= nil do
		if v8._is_connected == true then
			v8._listener(...);
			if p10() ~= true then
				return;
			end;
		end;
		v8 = v8._next;	
	end;
end;
function v1.NewScriptSignal()
	return {
		_head = nil, 
		_listener_count = 0, 
		Connect = v5.Connect, 
		GetListenerCount = v5.GetListenerCount, 
		Fire = v5.Fire, 
		FireUntil = v5.FireUntil
	};
end;
local v9 = {
	NewScriptSignal = v1.NewScriptSignal, 
	ConnectToOnClose = function(p11, p12)
		if game:GetService("RunService"):IsStudio() == false or p12 == true then
			game:BindToClose(p11);
		end;
	end
};
local v10 = {
	ServiceLocked = false, 
	IssueSignal = v9.NewScriptSignal(), 
	CorruptionSignal = v9.NewScriptSignal(), 
	CriticalState = false, 
	CriticalStateSignal = v9.NewScriptSignal(), 
	ServiceIssueCount = 0, 
	_active_profile_stores = {}, 
	_auto_save_list = {}, 
	_issue_queue = {}, 
	_critical_state_start = 0, 
	_mock_data_store = {}, 
	_user_mock_data_store = {}, 
	_use_mock_data_store = false
};
local l__RunService__11 = game:GetService("RunService");
local function u4(p13)
	local v12 = {};
	for v13, v14 in pairs(p13) do
		if type(v14) == "table" then
			v12[v13] = u4(v14);
		else
			v12[v13] = v14;
		end;
	end;
	return v12;
end;
local function u5(p14, p15)
	for v15, v16 in pairs(p15) do
		if type(v15) == "string" then
			if p14[v15] == nil then
				if type(v16) == "table" then
					p14[v15] = u4(v16);
				else
					p14[v15] = v16;
				end;
			elseif type(p14[v15]) == "table" and type(v16) == "table" then
				u5(p14[v15], v16);
			end;
		end;
	end;
end;
local u6 = {};
local u7 = {
	AutoSaveProfiles = 30, 
	RobloxWriteCooldown = 7, 
	ForceLoadMaxSteps = 8, 
	AssumeDeadSessionLock = 1800, 
	IssueCountForCriticalState = 5, 
	IssueLast = 120, 
	CriticalStateLast = 120, 
	MetaTagsUpdatedValues = {
		ProfileCreateTime = true, 
		SessionLoadCount = true, 
		ActiveSession = true, 
		ForceLoadSession = true, 
		LastUpdate = true
	}
};
local function u8(p16, p17)
	if u6[p16] ~= nil then
		u6[p16][p17] = nil;
		if next(u6[p16]) == nil then
			u6[p16] = nil;
		end;
	end;
end;
local u9 = false;
local function u10(p18, p19, p20)
	return string.format("[Store:\"%s\";%sKey:\"%s\"]", p18, p19 ~= nil and string.format("Scope:\"%s\";", p19) or "", p20);
end;
local l___issue_queue__11 = v10._issue_queue;
local function u12(p21)
	local v17 = tostring(p21.VersionId and 0);
	local v18 = {
		CreatedTime = p21.CreatedTime, 
		UpdatedTime = p21.UpdatedTime, 
		Version = string.rep("0", 16) .. "." .. string.rep("0", 10 - string.len(v17)) .. v17 .. "." .. string.rep("0", 16) .. ".01"
	};
	local u13 = p21.MetaData or {};
	function v18.GetMetadata()
		return u4(u13);
	end;
	local u14 = p21.UserIds or {};
	function v18.GetUserIds()
		return u4(u14);
	end;
	return v18;
end;
local l__PlaceId__15 = game.PlaceId;
local l__JobId__16 = game.JobId;
local function u17(p22, p23, p24, p25, p26)
	local v19 = p22[p23];
	if v19 == nil then
		v19 = {};
		p22[p23] = v19;
	end;
	local v20 = math.floor(os.time() * 1000);
	local v21 = v19[p24];
	local v22 = false;
	if v21 == nil then
		v22 = true;
		if p26 ~= true then
			v21 = {
				Data = nil, 
				CreatedTime = v20, 
				UpdatedTime = v20, 
				VersionId = 0, 
				UserIds = {}, 
				MetaData = {}
			};
			v19[p24] = v21;
		end;
	end;
	local v23, v24, v25 = p25(v21 and v21.Data, v22 == false and u12(v21) or nil);
	if v23 == nil then
		return nil;
	end;
	if v21 ~= nil and p26 ~= true then
		v21.Data = v23;
		v21.UserIds = u4(v24 or {});
		v21.MetaData = u4(v25 or {});
		v21.VersionId = v21.VersionId + 1;
		v21.UpdatedTime = v20;
	end;
	return u4(v23), v21 ~= nil and u12(v21) or nil;
end;
local l___user_mock_data_store__18 = v10._user_mock_data_store;
local u19 = false;
local l___mock_data_store__20 = v10._mock_data_store;
local function u21(p27, p28, p29)
	if u6[p28] == nil then
		u6[p28] = {};
	end;
	if u6[p28][p29] == nil then
		u6[p28][p29] = {
			LastWrite = 0, 
			Queue = {}, 
			CleanupJob = nil
		};
	end;
	local v26 = u6[p28][p29];
	local l__Queue__27 = v26.Queue;
	if v26.CleanupJob ~= nil then
		v26.CleanupJob:Disconnect();
		v26.CleanupJob = nil;
	end;
	if u7.RobloxWriteCooldown < os.clock() - v26.LastWrite and #l__Queue__27 == 0 then
		v26.LastWrite = os.clock();
		return p27();
	end;
	table.insert(l__Queue__27, p27);
	while not (u7.RobloxWriteCooldown < os.clock() - v26.LastWrite) or l__Queue__27[1] ~= p27 do
		task.wait();	
	end;
	table.remove(l__Queue__27, 1);
	v26.LastWrite = os.clock();
	return p27();
end;
local function u22(p30, p31, p32)
	warn("[ProfileService]: Resolved profile corruption " .. u10(p30, p31, p32));
	v10.CorruptionSignal:Fire(p30, p32);
end;
local function u23(p33, p34, p35, p36)
	warn("[ProfileService]: DataStore API error " .. u10(p34, p35, p36) .. " - \"" .. tostring(p33) .. "\"");
	table.insert(l___issue_queue__11, os.clock());
	v10.IssueSignal:Fire(tostring(p33), p34, p36);
end;
local l___auto_save_list__24 = v10._auto_save_list;
local u25 = 1;
local u26 = os.clock();
local l___active_profile_stores__27 = v10._active_profile_stores;
local function u28(p37)
	local v28 = table.find(l___auto_save_list__24, p37);
	if v28 ~= nil then
		table.remove(l___auto_save_list__24, v28);
		if v28 < u25 then
			u25 = u25 - 1;
		end;
		if l___auto_save_list__24[u25] == nil then
			u25 = 1;
		end;
	end;
end;
local function u29(p38)
	local l___profile_store__29 = p38._profile_store;
	(p38._is_user_mock == true and l___profile_store__29._mock_loaded_profiles or l___profile_store__29._loaded_profiles)[p38._profile_key] = nil;
	if next(l___profile_store__29._loaded_profiles) == nil and next(l___profile_store__29._mock_loaded_profiles) == nil then
		local v30 = table.find(l___active_profile_stores__27, l___profile_store__29);
		if v30 ~= nil then
			table.remove(l___active_profile_stores__27, v30);
		end;
	end;
	u28(p38);
	local v31 = nil;
	local v32 = nil;
	local l__ActiveSession__33 = p38.MetaData.ActiveSession;
	if l__ActiveSession__33 ~= nil then
		v31 = l__ActiveSession__33[1];
		v32 = l__ActiveSession__33[2];
	end;
	p38._release_listeners:Fire(v31, v32);
end;
local u30 = 0;
local function u31(p39, p40, p41, p42, p43, p44)
	local u32 = nil;
	local u33 = nil;
	local v34, v35 = pcall(function()
		local v36 = nil;
		v36 = function(p45)
			local v37 = false;
			local v38 = false;
			local v39 = { 0, {} };
			if p45 == nil then
				v37 = true;
			elseif type(p45) ~= "table" then
				v37 = true;
				v38 = true;
			end;
			if type(p45) == "table" then
				if type(p45.Data) == "table" and type(p45.MetaData) == "table" and type(p45.GlobalUpdates) == "table" then
					p45.WasCorrupted = false;
					v39 = p45.GlobalUpdates;
					if p41.ExistingProfileHandle ~= nil then
						p41.ExistingProfileHandle(p45);
					end;
				elseif p45.Data == nil and p45.MetaData == nil and type(p45.GlobalUpdates) == "table" then
					p45.WasCorrupted = false;
					v39 = p45.GlobalUpdates and v39;
					v37 = true;
				else
					v37 = true;
					v38 = true;
				end;
			end;
			if v37 == true then
				p45 = {
					GlobalUpdates = v39
				};
				if p41.MissingProfileHandle ~= nil then
					p41.MissingProfileHandle(p45);
				end;
			end;
			if p41.EditProfile ~= nil then
				p41.EditProfile(p45);
			end;
			if v38 == true then
				p45.WasCorrupted = true;
			end;
			return p45, p45.UserIds, p45.RobloxMetaData;
		end;
		if p42 == true then
			local v40, v41 = u17(l___user_mock_data_store__18, p39._profile_store_lookup, p40, v36, p43);
			u32 = v40;
			u33 = v41;
			task.wait();
			return;
		end;
		if u19 ~= true then
			local v42, v43 = u21(function()
				if p43 ~= true then
					return p39._global_data_store:UpdateAsync(p40, v36);
				end;
				local v44 = nil;
				local v45 = nil;
				if p44 ~= nil then
					local u34 = v44;
					local u35 = v45;
					local v46, v47 = pcall(function()
						local v48, v49 = p39._global_data_store:GetVersionAsync(p40, p44);
						u34 = v48;
						u35 = v49;
					end);
					if v46 == false and type(v47) == "string" and string.find(v47, "not valid") ~= nil then
						warn("[ProfileService]: Passed version argument is not valid; Traceback:\n" .. debug.traceback());
					end;
				else
					local v50, v51 = p39._global_data_store:GetAsync(p40);
					v44 = v50;
					v45 = v51;
				end;
				return v36(v44), v45;
			end, p39._profile_store_lookup, p40);
			u32 = v42;
			u33 = v43;
			return;
		end;
		local v52, v53 = u17(l___mock_data_store__20, p39._profile_store_lookup, p40, v36, p43);
		u32 = v52;
		u33 = v53;
		task.wait();
	end);
	if v34 == true and type(u32) == "table" then
		if u32.WasCorrupted == true and p43 ~= true then
			u22(p39._profile_store_name, p39._profile_store_scope, p40);
		end;
		return nil, nil;
	end;
	u23(v35 ~= nil and v35 or "Undefined error", p39._profile_store_name, p39._profile_store_scope, p40);
	return nil;
end;
local function u36(p46)
	local v54 = false;
	if p46[1] == l__PlaceId__15 then
		v54 = p46[2] == l__JobId__16;
	end;
	return v54;
end;
local function u37(p47, p48, p49)
	local l__GlobalUpdates__55 = p47.GlobalUpdates;
	local l___pending_update_lock__56 = l__GlobalUpdates__55._pending_update_lock;
	local l___pending_update_clear__57 = l__GlobalUpdates__55._pending_update_clear;
	local v58, v59, v60 = ipairs(p49[2]);
	while true do
		local v61, v62 = v58(v59, v60);
		if not v61 then
			break;
		end;
		local v63 = nil;
		for v64, v65 in ipairs(p48[2]) do
			if v65[1] == v62[1] then
				v63 = v65;
				break;
			end;
		end;
		local v66 = false;
		if v63 == nil or v63[2] < v62[2] or v62[3] ~= v63[3] then
			v66 = true;
		end;
		if v66 == true then
			if v62[3] == false then
				local v67 = false;
				for v68, v69 in ipairs(l___pending_update_lock__56) do
					if v62[1] == v69 then
						v67 = true;
						break;
					end;
				end;
				if v67 == false then
					l__GlobalUpdates__55._new_active_update_listeners:Fire(v62[1], v62[4]);
				end;
			end;
			if v62[3] == true then
				local v70 = false;
				for v71, v72 in ipairs(l___pending_update_clear__57) do
					if v62[1] == v72 then
						v70 = true;
						break;
					end;
				end;
				if v70 == false then
					l__GlobalUpdates__55._new_locked_update_listeners:FireUntil(function()
						return table.find(l___pending_update_clear__57, v62[1]) == nil;
					end, v62[1], v62[4]);
				end;
			end;
		end;	
	end;
end;
local function u38(p50, p51)
	if u6[p50] ~= nil then
		if u6[p50][p51] ~= nil then
			local v73 = u6[p50][p51];
			if v73.CleanupJob == nil then
				local l__Queue__39 = v73.Queue;
				v73.CleanupJob = l__RunService__11.Heartbeat:Connect(function()
					if u7.RobloxWriteCooldown < os.clock() - v73.LastWrite and #l__Queue__39 == 0 then
						v73.CleanupJob:Disconnect();
						u8(p50, p51);
					end;
				end);
				return;
			end;
		elseif next(u6[p50]) == nil then
			u6[p50] = nil;
		end;
	end;
end;
local v74 = {};
v74.__index = v74;
function v74.GetActiveUpdates(p52)
	local v75 = {};
	for v76, v77 in ipairs(p52._updates_latest[2]) do
		if v77[3] == false then
			local v78 = false;
			if p52._pending_update_lock ~= nil then
				for v79, v80 in ipairs(p52._pending_update_lock) do
					if v77[1] == v80 then
						v78 = true;
						break;
					end;
				end;
			end;
			if v78 == false then
				table.insert(v75, { v77[1], v77[4] });
			end;
		end;
	end;
	return v75;
end;
function v74.GetLockedUpdates(p53)
	local v81 = {};
	for v82, v83 in ipairs(p53._updates_latest[2]) do
		if v83[3] == true then
			local v84 = false;
			if p53._pending_update_clear ~= nil then
				for v85, v86 in ipairs(p53._pending_update_clear) do
					if v83[1] == v86 then
						v84 = true;
						break;
					end;
				end;
			end;
			if v84 == false then
				table.insert(v81, { v83[1], v83[4] });
			end;
		end;
	end;
	return v81;
end;
function v74.ListenToNewActiveUpdate(p54, p55)
	if type(p55) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in GlobalUpdates:ListenToNewActiveUpdate()");
	end;
	if p54._update_handler_mode == true then
		error("[ProfileService]: Can't listen to new global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p54._new_active_update_listeners == nil then
		error("[ProfileService]: Can't listen to new global updates in view mode");
	elseif p54._profile:IsActive() == false then
		return {
			Disconnect = function()

			end
		};
	end;
	return p54._new_active_update_listeners:Connect(p55);
end;
function v74.ListenToNewLockedUpdate(p56, p57)
	if type(p57) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in GlobalUpdates:ListenToNewLockedUpdate()");
	end;
	if p56._update_handler_mode == true then
		error("[ProfileService]: Can't listen to new global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p56._new_locked_update_listeners == nil then
		error("[ProfileService]: Can't listen to new global updates in view mode");
	elseif p56._profile:IsActive() == false then
		return {
			Disconnect = function()

			end
		};
	end;
	return p56._new_locked_update_listeners:Connect(p57);
end;
function v74.LockActiveUpdate(p58, p59)
	if type(p59) ~= "number" then
		error("[ProfileService]: Invalid update_id");
	end;
	if p58._update_handler_mode == true then
		error("[ProfileService]: Can't lock active global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p58._pending_update_lock == nil then
		error("[ProfileService]: Can't lock active global updates in view mode");
	elseif p58._profile:IsActive() == false then
		error("[ProfileService]: PROFILE EXPIRED - Can't lock active global updates");
	end;
	local v87 = nil;
	for v88, v89 in ipairs(p58._updates_latest[2]) do
		if v89[1] == p59 then
			v87 = v89;
			break;
		end;
	end;
	if v87 ~= nil then
		local v90 = false;
		for v91, v92 in ipairs(p58._pending_update_lock) do
			if p59 == v92 then
				v90 = true;
				break;
			end;
		end;
		if v90 == false and v87[3] == false then
			table.insert(p58._pending_update_lock, p59);
			return;
		end;
	else
		error("[ProfileService]: Passed non-existant update_id");
	end;
end;
function v74.ClearLockedUpdate(p60, p61)
	if type(p61) ~= "number" then
		error("[ProfileService]: Invalid update_id");
	end;
	if p60._update_handler_mode == true then
		error("[ProfileService]: Can't clear locked global updates in ProfileStore:GlobalUpdateProfileAsync()");
	elseif p60._pending_update_clear == nil then
		error("[ProfileService]: Can't clear locked global updates in view mode");
	elseif p60._profile:IsActive() == false then
		error("[ProfileService]: PROFILE EXPIRED - Can't clear locked global updates");
	end;
	local v93 = nil;
	for v94, v95 in ipairs(p60._updates_latest[2]) do
		if v95[1] == p61 then
			v93 = v95;
			break;
		end;
	end;
	if v93 ~= nil then
		local v96 = false;
		for v97, v98 in ipairs(p60._pending_update_clear) do
			if p61 == v98 then
				v96 = true;
				break;
			end;
		end;
		if v96 == false and v93[3] == true then
			table.insert(p60._pending_update_clear, p61);
			return;
		end;
	else
		error("[ProfileService]: Passed non-existant update_id");
	end;
end;
function v74.AddActiveUpdate(p62, p63)
	if type(p63) ~= "table" then
		error("[ProfileService]: Invalid update_data");
	end;
	if p62._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't add active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()");
	elseif p62._update_handler_mode ~= true then
		error("[ProfileService]: Can't add active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()");
	end;
	local l___updates_latest__99 = p62._updates_latest;
	local v100 = l___updates_latest__99[1] + 1;
	l___updates_latest__99[1] = v100;
	table.insert(l___updates_latest__99[2], { v100, 1, false, p63 });
end;
function v74.ChangeActiveUpdate(p64, p65, p66)
	if type(p65) ~= "number" then
		error("[ProfileService]: Invalid update_id");
	end;
	if type(p66) ~= "table" then
		error("[ProfileService]: Invalid update_data");
	end;
	if p64._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't change active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()");
	elseif p64._update_handler_mode ~= true then
		error("[ProfileService]: Can't change active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()");
	end;
	local v101 = nil;
	for v102, v103 in ipairs(p64._updates_latest[2]) do
		if p65 == v103[1] then
			v101 = v103;
			break;
		end;
	end;
	if v101 == nil then
		error("[ProfileService]: Passed non-existant update_id");
		return;
	end;
	if v101[3] == true then
		error("[ProfileService]: Can't change locked global update");
	end;
	v101[2] = v101[2] + 1;
	v101[4] = p66;
end;
function v74.ClearActiveUpdate(p67, p68)
	if type(p68) ~= "number" then
		error("[ProfileService]: Invalid update_id argument");
	end;
	if p67._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't clear active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()");
	elseif p67._update_handler_mode ~= true then
		error("[ProfileService]: Can't clear active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()");
	end;
	local l___updates_latest__104 = p67._updates_latest;
	local v105 = nil;
	local v106 = nil;
	for v107, v108 in ipairs(l___updates_latest__104[2]) do
		if p68 == v108[1] then
			v105 = v107;
			v106 = v108;
			break;
		end;
	end;
	if v106 == nil then
		error("[ProfileService]: Passed non-existant update_id");
		return;
	end;
	if v106[3] == true then
		error("[ProfileService]: Can't clear locked global update");
	end;
	table.remove(l___updates_latest__104[2], v105);
end;
local v109 = {};
v109.__index = v109;
function v109.IsActive(p69)
	return (p69._is_user_mock == true and p69._profile_store._mock_loaded_profiles or p69._profile_store._loaded_profiles)[p69._profile_key] == p69;
end;
function v109.GetMetaTag(p70, p71)
	if p70.MetaData == nil then
		return nil;
	end;
	return p70.MetaData.MetaTags[p71];
end;
function v109.SetMetaTag(p72, p73, p74)
	if type(p73) ~= "string" then
		error("[ProfileService]: tag_name must be a string");
	elseif string.len(p73) == 0 then
		error("[ProfileService]: Invalid tag_name");
	end;
	p72.MetaData.MetaTags[p73] = p74;
end;
function v109.Reconcile(p75)
	u5(p75.Data, p75._profile_store._profile_template);
end;
function v109.ListenToRelease(p76, p77)
	if type(p77) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in Profile:ListenToRelease()");
	end;
	if p76._view_mode == true then
		return {
			Disconnect = function()

			end
		};
	end;
	if p76:IsActive() ~= false then
		return p76._release_listeners:Connect(p77);
	end;
	local v110 = nil;
	local v111 = nil;
	local l__ActiveSession__112 = p76.MetaData.ActiveSession;
	if l__ActiveSession__112 ~= nil then
		v110 = l__ActiveSession__112[1];
		v111 = l__ActiveSession__112[2];
	end;
	p77(v110, v111);
	return {
		Disconnect = function()

		end
	};
end;
local function u40(p78, p79)
	local v113 = u6[p78];
	if v113 == nil then
		return true;
	end;
	local v114 = v113[p79];
	local v115 = true;
	if v114 ~= nil then
		v115 = #v114.Queue == 0;
	end;
	return v115;
end;
local function u41(p80)
	table.insert(l___auto_save_list__24, u25, p80);
	if #l___auto_save_list__24 > 1 then
		u25 = u25 + 1;
		return;
	end;
	if #l___auto_save_list__24 == 1 then
		u26 = os.clock();
	end;
end;
local function u42(p81, p82, p83)
	if type(p81.Data) ~= "table" then
		u22(p81._profile_store._profile_store_name, p81._profile_store._profile_store_scope, p81._profile_key);
		error("[ProfileService]: PROFILE DATA CORRUPTED DURING RUNTIME! Profile: " .. p81:Identify());
	end;
	if p82 == true and p83 ~= true then
		u29(p81);
	end;
	u30 = u30 + 1;
	local l__SessionLoadCount__116 = p81.MetaData.SessionLoadCount;
	local v117 = true;
	while v117 == true do
		if p82 ~= true then
			v117 = false;
		end;
		local v118 = {
			ExistingProfileHandle = nil, 
			MissingProfileHandle = nil
		};
		function v118.EditProfile(p84)
			local v119 = false;
			local v120 = false;
			if p83 ~= true then
				local l__ActiveSession__121 = p84.MetaData.ActiveSession;
				local l__ForceLoadSession__122 = p84.MetaData.ForceLoadSession;
				if type(l__ActiveSession__121) == "table" then
					v119 = u36(l__ActiveSession__121) and p84.MetaData.SessionLoadCount == l__SessionLoadCount__116;
				end;
				if type(l__ForceLoadSession__122) == "table" then
					v120 = not u36(l__ForceLoadSession__122);
				end;
			else
				v119 = true;
			end;
			if v119 == true then
				if p83 ~= true then
					local v123 = p84.GlobalUpdates[2];
					local l__GlobalUpdates__124 = p81.GlobalUpdates;
					local l___pending_update_lock__125 = l__GlobalUpdates__124._pending_update_lock;
					for v126 = 1, #v123 do
						for v127, v128 in ipairs(l___pending_update_lock__125) do
							if v123[v126][1] == v128 then
								v123[v126][3] = true;
								break;
							end;
						end;
					end;
					local v129, v130, v131 = ipairs(l__GlobalUpdates__124._pending_update_clear);
					while true do
						local v132, v133 = v129(v130, v131);
						if not v132 then
							break;
						end;
						for v134 = 1, #v123 do
							if v123[v134][1] == v133 and v123[v134][3] == true then
								table.remove(v123, v134);
								break;
							end;
						end;					
					end;
				end;
				p84.Data = p81.Data;
				p84.RobloxMetaData = p81.RobloxMetaData;
				p84.UserIds = p81.UserIds;
				if p83 ~= true then
					p84.MetaData.MetaTags = p81.MetaData.MetaTags;
					p84.MetaData.LastUpdate = os.time();
					if p82 == true or v120 == true then
						p84.MetaData.ActiveSession = nil;
						return;
					end;
				else
					p84.MetaData = p81.MetaData;
					p84.MetaData.ActiveSession = nil;
					p84.MetaData.ForceLoadSession = nil;
					p84.GlobalUpdates = p81.GlobalUpdates._updates_latest;
				end;
			end;
		end;
		local v135, v136 = u31(p81._profile_store, p81._profile_key, v118, p81._is_user_mock);
		if v135 ~= nil and v136 ~= nil then
			local v137 = nil;
			if p83 == true then
				break;
			end;
			p81.KeyInfo = v136;
			local l__GlobalUpdates__138 = p81.GlobalUpdates;
			local l__GlobalUpdates__139 = v135.GlobalUpdates;
			l__GlobalUpdates__138._updates_latest = l__GlobalUpdates__139;
			local l__MetaData__140 = p81.MetaData;
			local l__MetaData__141 = v135.MetaData;
			for v142, v143 in pairs(u7.MetaTagsUpdatedValues) do
				l__MetaData__140[v142] = l__MetaData__141[v142];
			end;
			l__MetaData__140.MetaTagsLatest = l__MetaData__141.MetaTags;
			local l__ActiveSession__144 = v135.MetaData.ActiveSession;
			local v145 = false;
			if type(l__ActiveSession__144) == "table" then
				v145 = u36(l__ActiveSession__144) and v135.MetaData.SessionLoadCount == l__SessionLoadCount__116;
			end;
			v137 = p81:IsActive();
			if v145 == true then
				if v137 == true then
					u37(p81, l__GlobalUpdates__138._updates_latest, l__GlobalUpdates__139);
				end;
			else
				if v137 == true then
					u29(p81);
				end;
				u38(p81._profile_store._profile_store_lookup, p81._profile_key);
				if p81._hop_ready == false then
					p81._hop_ready = true;
					p81._hop_ready_listeners:Fire();
				end;
			end;
			p81.MetaTagsUpdated:Fire(p81.MetaData.MetaTagsLatest);
			p81.KeyInfoUpdated:Fire(v136);
		elseif v117 == true then
			task.wait();
		end;	
	end;
	u30 = u30 - 1;
end;
function v109.Save(p85)
	if p85._view_mode == true then
		error("[ProfileService]: Can't save Profile in view mode - Should you be calling :OverwriteAsync() instead?");
	end;
	if p85:IsActive() == false then
		warn("[ProfileService]: Attempted saving an inactive profile " .. p85:Identify() .. "; Traceback:\n" .. debug.traceback());
		return;
	end;
	if u40(p85._profile_store._profile_store_lookup, p85._profile_key) == true then
		u28(p85);
		u41(p85);
		task.spawn(u42, p85);
	end;
end;
function v109.Release(p86)
	if p86._view_mode == true then
		return;
	end;
	if p86:IsActive() == true then
		task.spawn(u42, p86, true);
	end;
end;
function v109.ListenToHopReady(p87, p88)
	if type(p88) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in Profile:ListenToHopReady()");
	end;
	if p87._view_mode == true then
		return {
			Disconnect = function()

			end
		};
	end;
	if p87._hop_ready == true then
		task.spawn(p88);
		return {
			Disconnect = function()

			end
		};
	end;
	return p87._hop_ready_listeners:Connect(p88);
end;
function v109.AddUserId(p89, p90)
	if type(p90) ~= "number" or p90 % 1 ~= 0 then
		warn("[ProfileService]: Invalid UserId argument for :AddUserId() (" .. tostring(p90) .. "); Traceback:\n" .. debug.traceback());
		return;
	end;
	if p90 < 0 and p89._is_user_mock ~= true and u19 ~= true then
		return;
	end;
	if table.find(p89.UserIds, p90) == nil then
		table.insert(p89.UserIds, p90);
	end;
end;
function v109.RemoveUserId(p91, p92)
	if type(p92) ~= "number" or p92 % 1 ~= 0 then
		warn("[ProfileService]: Invalid UserId argument for :RemoveUserId() (" .. tostring(p92) .. "); Traceback:\n" .. debug.traceback());
		return;
	end;
	local v146 = table.find(p91.UserIds, p92);
	if v146 ~= nil then
		table.remove(p91.UserIds, v146);
	end;
end;
function v109.Identify(p93)
	return u10(p93._profile_store._profile_store_name, p93._profile_store._profile_store_scope, p93._profile_key);
end;
function v109.ClearGlobalUpdates(p94)
	if p94._view_mode ~= true then
		error("[ProfileService]: :ClearGlobalUpdates() can only be used in view mode");
	end;
	local v147 = {
		_updates_latest = { 0, {} }, 
		_profile = p94
	};
	setmetatable(v147, v74);
	p94.GlobalUpdates = v147;
end;
function v109.OverwriteAsync(p95)
	if p95._view_mode ~= true then
		error("[ProfileService]: :OverwriteAsync() can only be used in view mode");
	end;
	u42(p95, nil, true);
end;
local v148 = {};
v148.__index = v148;
function v148._MoveQueue(p96)
	while #p96._query_queue > 0 do
		task.spawn((table.remove(p96._query_queue, 1)));
		if p96._is_query_yielded == true then
			break;
		end;	
	end;
end;
function v148.NextAsync(p97, p98)
	local v149 = nil;
	if p97._profile_store == nil then
		return nil;
	end;
	local u43 = false;
	local u44 = nil;
	v149 = function()
		if p97._query_failure == true then
			u43 = true;
			return;
		end;
		if p97._query_pages == nil then
			p97._is_query_yielded = true;
			task.spawn(function()
				u44 = p97:NextAsync(true);
				u43 = true;
			end);
			local v150, v151 = pcall(function()
				p97._query_pages = p97._profile_store._global_data_store:ListVersionsAsync(p97._profile_key, p97._sort_direction, p97._min_date, p97._max_date);
				p97._query_index = 0;
			end);
			if v150 == false or p97._query_pages == nil then
				warn("[ProfileService]: Version query fail - " .. tostring(v151));
				p97._query_failure = true;
			end;
			p97._is_query_yielded = false;
			p97:_MoveQueue();
			return;
		end;
		local v152 = p97._query_pages:GetCurrentPage()[p97._query_index + 1];
		if p97._query_pages.IsFinished == true and v152 == nil then
			u43 = true;
			return;
		end;
		if v152 ~= nil then
			p97._query_index = p97._query_index + 1;
			u44 = p97._profile_store:ViewProfileAsync(p97._profile_key, v152.Version);
			u43 = true;
			return;
		end;
		p97._is_query_yielded = true;
		task.spawn(function()
			u44 = p97:NextAsync(true);
			u43 = true;
		end);
		if pcall(function()
			p97._query_pages:AdvanceToNextPageAsync();
			p97._query_index = 0;
		end) == false or #p97._query_pages:GetCurrentPage() == 0 then
			p97._query_failure = true;
		end;
		p97._is_query_yielded = false;
		p97:_MoveQueue();
	end;
	if p97._is_query_yielded == false then
		v149();
	elseif p98 == true then
		table.insert(p97._query_queue, 1, v149);
	else
		table.insert(p97._query_queue, v149);
	end;
	while u43 == false do
		task.wait();	
	end;
	return nil;
end;
local v153 = {};
v153.__index = v153;
local function u45(p99)
	while p99._is_pending == true do
		task.wait();	
	end;
end;
local u46 = {};
local u47 = 0;
local u48 = 0;
function v153.LoadProfileAsync(p100, p101, p102, p103)
	p102 = p102 and "ForceLoad";
	if p100._profile_template == nil then
		error("[ProfileService]: Profile template not set - ProfileStore:LoadProfileAsync() locked for this ProfileStore");
	end;
	if type(p101) ~= "string" then
		error("[ProfileService]: profile_key must be a string");
	elseif string.len(p101) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if type(p102) ~= "function" and p102 ~= "ForceLoad" and p102 ~= "Steal" then
		error("[ProfileService]: Invalid not_released_handler");
	end;
	if v10.ServiceLocked == true then
		return nil;
	end;
	u45(p100);
	local v154 = p103 == u46;
	for v155, v156 in ipairs(l___active_profile_stores__27) do
		if v156._profile_store_lookup == p100._profile_store_lookup and (v154 == true and v156._mock_loaded_profiles or v156._loaded_profiles)[p101] ~= nil then
			error("[ProfileService]: Profile " .. u10(p100._profile_store_name, p100._profile_store_scope, p101) .. " is already loaded in this session");
		end;
	end;
	u47 = u47 + 1;
	local v157 = p102 == "ForceLoad";
	local v158 = 0;
	local v159 = false;
	local v160 = p102 == "Steal";
	while v10.ServiceLocked == false do
		local v161 = v154 == true and p100._mock_profile_load_jobs or p100._profile_load_jobs;
		local v162 = u48 + 1;
		u48 = v162;
		local v163 = v161[p101];
		if v163 ~= nil then
			v163[1] = v162;
			while v163[2] == nil do
				task.wait();			
			end;
			if v163[1] ~= v162 then
				u47 = u47 - 1;
				return nil;
			end;
			local v164, v165 = table.unpack(v163[2]);
			local v166 = v164;
			local v167 = v165;
			v161[p101] = nil;
		else
			local v168 = { v162, nil };
			v161[p101] = v168;
			local v169 = {};
			function v169.ExistingProfileHandle(p104)
				if v10.ServiceLocked == false then
					local l__ActiveSession__170 = p104.MetaData.ActiveSession;
					local l__ForceLoadSession__171 = p104.MetaData.ForceLoadSession;
					if l__ActiveSession__170 == nil then
						p104.MetaData.ActiveSession = { l__PlaceId__15, l__JobId__16 };
						p104.MetaData.ForceLoadSession = nil;
						return;
					end;
					if type(l__ActiveSession__170) == "table" then
						if u36(l__ActiveSession__170) == false then
							local l__LastUpdate__172 = p104.MetaData.LastUpdate;
							if l__LastUpdate__172 ~= nil and u7.AssumeDeadSessionLock < os.time() - l__LastUpdate__172 then
								p104.MetaData.ActiveSession = { l__PlaceId__15, l__JobId__16 };
								p104.MetaData.ForceLoadSession = nil;
								return;
							end;
							if v159 == true or v160 == true then
								local v173 = false;
								if l__ForceLoadSession__171 ~= nil then
									v173 = u36(l__ForceLoadSession__171);
								end;
								if v173 == true or v160 == true then
									p104.MetaData.ActiveSession = { l__PlaceId__15, l__JobId__16 };
									p104.MetaData.ForceLoadSession = nil;
									return;
								end;
							elseif v157 == true then
								p104.MetaData.ForceLoadSession = { l__PlaceId__15, l__JobId__16 };
								return;
							end;
						else
							p104.MetaData.ForceLoadSession = nil;
						end;
					end;
				end;
			end;
			function v169.MissingProfileHandle(p105)
				p105.Data = u4(p100._profile_template);
				p105.MetaData = {
					ProfileCreateTime = os.time(), 
					SessionLoadCount = 0, 
					ActiveSession = { l__PlaceId__15, l__JobId__16 }, 
					ForceLoadSession = nil, 
					MetaTags = {}
				};
			end;
			function v169.EditProfile(p106)
				if v10.ServiceLocked == false then
					local l__ActiveSession__174 = p106.MetaData.ActiveSession;
					if l__ActiveSession__174 ~= nil and u36(l__ActiveSession__174) == true then
						p106.MetaData.SessionLoadCount = p106.MetaData.SessionLoadCount + 1;
						p106.MetaData.LastUpdate = os.time();
					end;
				end;
			end;
			v168[2] = table.pack(u31(p100, p101, v169, v154));
			if v168[1] ~= v162 then
				u47 = u47 - 1;
				return nil;
			end;
			local v175, v176 = table.unpack(v168[2]);
			v166 = v175;
			v167 = v176;
			v161[p101] = nil;
		end;
		if v166 ~= nil and v167 ~= nil then
			local l__ActiveSession__177 = v166.MetaData.ActiveSession;
			if type(l__ActiveSession__177) ~= "table" then
				u47 = u47 - 1;
				return nil;
			end;
			if u36(l__ActiveSession__177) == true then
				v166.MetaData.MetaTagsLatest = u4(v166.MetaData.MetaTags);
				local v178 = {
					_updates_latest = v166.GlobalUpdates, 
					_pending_update_lock = {}, 
					_pending_update_clear = {}, 
					_new_active_update_listeners = v9.NewScriptSignal(), 
					_new_locked_update_listeners = v9.NewScriptSignal(), 
					_profile = nil
				};
				setmetatable(v178, v74);
				local v179 = {
					Data = v166.Data, 
					MetaData = v166.MetaData, 
					MetaTagsUpdated = v9.NewScriptSignal(), 
					RobloxMetaData = v166.RobloxMetaData or {}, 
					UserIds = v166.UserIds or {}, 
					KeyInfo = v167, 
					KeyInfoUpdated = v9.NewScriptSignal(), 
					GlobalUpdates = v178, 
					_profile_store = local v180, 
					_profile_key = p101, 
					_release_listeners = v9.NewScriptSignal(), 
					_hop_ready_listeners = v9.NewScriptSignal(), 
					_hop_ready = false, 
					_load_timestamp = os.clock(), 
					_is_user_mock = v154
				};
				setmetatable(v179, v109);
				v178._profile = v179;
				if next(v180._loaded_profiles) == nil and next(v180._mock_loaded_profiles) == nil then
					table.insert(l___active_profile_stores__27, v180);
				end;
				if v154 == true then
					v180._mock_loaded_profiles[p101] = v179;
				else
					v180._loaded_profiles[p101] = v179;
				end;
				u41(v179);
				if v10.ServiceLocked == true then
					u42(v179, true);
					v179 = nil;
				end;
				u47 = u47 - 1;
				return v179;
			end;
			if v157 == true then
				local l__ForceLoadSession__181 = v166.MetaData.ForceLoadSession;
				local v182 = false;
				if l__ForceLoadSession__181 ~= nil then
					v182 = u36(l__ForceLoadSession__181);
				end;
				if v182 ~= true then
					u47 = u47 - 1;
					return nil;
				end;
				if local v183 == false then
					v158 = v158 + 1;
					if v158 == u7.ForceLoadMaxSteps then

					end;
				end;
				task.wait();
				v183 = false;
			elseif local v184 == true then
				task.wait();
			else
				local v185 = p102(l__ActiveSession__177[1], l__ActiveSession__177[2]);
				if v185 == "Repeat" then
					task.wait();
				else
					if v185 == "Cancel" then
						u47 = u47 - 1;
						return nil;
					end;
					if v185 == "ForceLoad" then
						v157 = true;
						v183 = true;
						task.wait();
					elseif v185 == "Steal" then
						task.wait();
					else
						error("[ProfileService]: Invalid return from not_released_handler (\"" .. tostring(v185) .. "\")(" .. type(v185) .. ");" .. "\n" .. u10(v180._profile_store_name, v180._profile_store_scope, p101) .. " Traceback:\n" .. debug.traceback());
					end;
				end;
			end;
		else
			task.wait();
		end;	
	end;
	u47 = u47 - 1;
	return nil;
end;
function v153.GlobalUpdateProfileAsync(p107, p108, p109, p110)
	if type(p108) ~= "string" or string.len(p108) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if type(p109) ~= "function" then
		error("[ProfileService]: Invalid update_handler");
	end;
	if v10.ServiceLocked == true then
		return nil;
	end;
	u45(p107);
	while v10.ServiceLocked == false do
		local v186 = {
			ExistingProfileHandle = nil, 
			MissingProfileHandle = nil
		};
		function v186.EditProfile(p111)
			local v187 = {
				_updates_latest = p111.GlobalUpdates, 
				_update_handler_mode = true
			};
			setmetatable(v187, v74);
			p109(v187);
		end;
		local v188 = u31(p107, p108, v186, p110 == u46);
		u38(p107._profile_store_lookup, p108);
		if v188 ~= nil then
			local v189 = {
				_updates_latest = v188.GlobalUpdates
			};
			setmetatable(v189, v74);
			return v189;
		end;
		task.wait();	
	end;
	return nil;
end;
function v153.ViewProfileAsync(p112, p113, p114, p115)
	if type(p113) ~= "string" or string.len(p113) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if v10.ServiceLocked == true then
		return nil;
	end;
	u45(p112);
	if p114 ~= nil and (p115 == u46 or u19 == true) then
		return nil;
	end;
	while v10.ServiceLocked == false do
		local v190 = {
			ExistingProfileHandle = nil
		};
		function v190.MissingProfileHandle(p116)
			p116.Data = u4(p112._profile_template);
			p116.MetaData = {
				ProfileCreateTime = os.time(), 
				SessionLoadCount = 0, 
				ActiveSession = nil, 
				ForceLoadSession = nil, 
				MetaTags = {}
			};
		end;
		v190.EditProfile = nil;
		local v191, v192 = u31(p112, p113, v190, p115 == u46, true, p114);
		u38(p112._profile_store_lookup, p113);
		if v191 ~= nil then
			if v192 == nil then
				return nil;
			else
				local v193 = {
					_updates_latest = v191.GlobalUpdates, 
					_profile = nil
				};
				setmetatable(v193, v74);
				local v194 = {
					Data = v191.Data, 
					MetaData = v191.MetaData, 
					MetaTagsUpdated = v9.NewScriptSignal(), 
					RobloxMetaData = v191.RobloxMetaData or {}, 
					UserIds = v191.UserIds or {}, 
					KeyInfo = v192, 
					KeyInfoUpdated = v9.NewScriptSignal(), 
					GlobalUpdates = v193, 
					_profile_store = p112, 
					_profile_key = p113, 
					_view_mode = true, 
					_load_timestamp = os.clock()
				};
				setmetatable(v194, v109);
				v193._profile = v194;
				return v194;
			end;
		end;
		task.wait();	
	end;
	return nil;
end;
function v153.ProfileVersionQuery(p117, p118, p119, p120, p121, p122)
	if type(p118) ~= "string" or string.len(p118) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if v10.ServiceLocked == true then
		return setmetatable({}, v148);
	end;
	u45(p117);
	if p122 == u46 or u19 == true then
		error("[ProfileService]: :ProfileVersionQuery() is not supported in mock mode");
	end;
	if p119 ~= nil and (typeof(p119) ~= "EnumItem" or p119.EnumType ~= Enum.SortDirection) then
		error("[ProfileService]: Invalid sort_direction (" .. tostring(p119) .. ")");
	end;
	if p120 ~= nil and typeof(p120) ~= "DateTime" and typeof(p120) ~= "number" then
		error("[ProfileService]: Invalid min_date (" .. tostring(p120) .. ")");
	end;
	if p121 ~= nil and typeof(p121) ~= "DateTime" and typeof(p121) ~= "number" then
		error("[ProfileService]: Invalid max_date (" .. tostring(p121) .. ")");
	end;
	p120 = typeof(p120) == "DateTime" and p120.UnixTimestampMillis or p120;
	p121 = typeof(p121) == "DateTime" and p121.UnixTimestampMillis or p121;
	local v195 = {
		_profile_store = p117, 
		_profile_key = p118, 
		_sort_direction = p119, 
		_min_date = p120, 
		_max_date = p121, 
		_query_pages = nil, 
		_query_index = 0, 
		_query_failure = false, 
		_is_query_yielded = false, 
		_query_queue = {}
	};
	setmetatable(v195, v148);
	return v195;
end;
function v153.WipeProfileAsync(p123, p124, p125)
	if type(p124) ~= "string" or string.len(p124) == 0 then
		error("[ProfileService]: Invalid profile_key");
	end;
	if v10.ServiceLocked == true then
		return false;
	end;
	u45(p123);
	if p125 == u46 then
		local v196 = l___user_mock_data_store__18[p123._profile_store_lookup];
		if v196 ~= nil then
			v196[p124] = nil;
		end;
		local v197 = true;
		task.wait();
	elseif u19 == true then
		local v198 = l___mock_data_store__20[p123._profile_store_lookup];
		if v198 ~= nil then
			v198[p124] = nil;
		end;
		v197 = true;
		task.wait();
	else
		v197 = pcall(function()
			p123._global_data_store:RemoveAsync(p124);
		end);
	end;
	u38(p123._profile_store_lookup, p124);
	return v197;
end;
local function u49()
	while u9 == true do
		task.wait();	
	end;
end;
local l__DataStoreService__50 = game:GetService("DataStoreService");
function v10.GetProfileStore(p126, p127)
	local v199 = nil;
	local v200 = nil;
	if type(p126) == "string" then
		v199 = p126;
	elseif type(p126) == "table" then
		v199 = p126.Name;
		v200 = p126.Scope;
	else
		error("[ProfileService]: Invalid or missing profile_store_index");
	end;
	if v199 == nil or type(v199) ~= "string" then
		error("[ProfileService]: Missing or invalid \"Name\" parameter");
	elseif string.len(v199) == 0 then
		error("[ProfileService]: ProfileStore name cannot be an empty string");
	end;
	if v200 ~= nil and (type(v200) ~= "string" or string.len(v200) == 0) then
		error("[ProfileService]: Invalid \"Scope\" parameter");
	end;
	if type(p127) ~= "table" then
		error("[ProfileService]: Invalid profile_template");
	end;
	local v201 = {};
	local v202 = {};
	local u51 = nil;
	function v202.LoadProfileAsync(p128, p129, p130)
		return u51:LoadProfileAsync(p129, p130, u46);
	end;
	function v202.GlobalUpdateProfileAsync(p131, p132, p133)
		return u51:GlobalUpdateProfileAsync(p132, p133, u46);
	end;
	function v202.ViewProfileAsync(p134, p135, p136)
		return u51:ViewProfileAsync(p135, p136, u46);
	end;
	function v202.FindProfileVersionAsync(p137, p138, p139, p140, p141)
		return u51:FindProfileVersionAsync(p138, p139, p140, p141, u46);
	end;
	function v202.WipeProfileAsync(p142, p143)
		return u51:WipeProfileAsync(p143, u46);
	end;
	v201.Mock = v202;
	v201._profile_store_name = v199;
	v201._profile_store_scope = v200;
	v201._profile_store_lookup = v199 .. "\000" .. (v200 and "");
	v201._profile_template = p127;
	v201._global_data_store = nil;
	v201._loaded_profiles = {};
	v201._profile_load_jobs = {};
	v201._mock_loaded_profiles = {};
	v201._mock_profile_load_jobs = {};
	v201._is_pending = false;
	u51 = v201;
	setmetatable(u51, v153);
	local v203 = Instance.new("DataStoreOptions");
	v203:SetExperimentalFeatures({
		v2 = true
	});
	if u9 == true then
		u51._is_pending = true;
		task.spawn(function()
			u49();
			if u19 == false then
				u51._global_data_store = l__DataStoreService__50:GetDataStore(v199, v200, v203);
			end;
			u51._is_pending = false;
		end);
	elseif u19 == false then
		u51._global_data_store = l__DataStoreService__50:GetDataStore(v199, v200, v203);
	end;
	return nil;
end;
function v10.IsLive()
	u49();
	return u19 == false;
end;
if l__RunService__11:IsStudio() == true then
	u9 = true;
	task.spawn(function()
		local v204, v205 = pcall(function()
			l__DataStoreService__50:GetDataStore("____PS"):SetAsync("____PS", os.time());
		end);
		local v206 = false;
		if v204 == false then
			v206 = string.find(v205, "ConnectFail", 1, true) ~= nil;
		end;
		if v206 == true then
			warn("[ProfileService]: No internet access - check your network connection");
		end;
		if v204 == false and (string.find(v205, "403", 1, true) ~= nil or string.find(v205, "must publish", 1, true) ~= nil or v206 == true) then
			u19 = true;
			v10._use_mock_data_store = true;
			print("[ProfileService]: Roblox API services unavailable - data will not be saved");
		else
			print("[ProfileService]: Roblox API services available - data will be saved");
		end;
		u9 = false;
	end);
end;
local u52 = 0;
l__RunService__11.Heartbeat:Connect(function()
	local v207 = #l___auto_save_list__24;
	if v207 > 0 then
		local v208 = u7.AutoSaveProfiles / v207;
		local v209 = os.clock();
		while v208 < v209 - u26 do
			u26 = u26 + v208;
			local v210 = l___auto_save_list__24[u25];
			if v209 - v210._load_timestamp < u7.AutoSaveProfiles then
				for v211 = 1, v207 - 1 do
					u25 = u25 + 1;
					if v207 < u25 then
						u25 = 1;
					end;
					v210 = l___auto_save_list__24[u25];
					if u7.AutoSaveProfiles <= v209 - v210._load_timestamp then
						break;
					end;
					v210 = nil;
				end;
			end;
			u25 = u25 + 1;
			if v207 < u25 then
				u25 = 1;
			end;
			if v210 ~= nil then
				task.spawn(u42, v210);
			end;		
		end;
	end;
	if v10.CriticalState == false then
		if u7.IssueCountForCriticalState <= #l___issue_queue__11 then
			v10.CriticalState = true;
			v10.CriticalStateSignal:Fire(true);
			u52 = os.clock();
			warn("[ProfileService]: Entered critical state");
		end;
	elseif u7.IssueCountForCriticalState <= #l___issue_queue__11 then
		u52 = os.clock();
	elseif u7.CriticalStateLast < os.clock() - u52 then
		v10.CriticalState = false;
		v10.CriticalStateSignal:Fire(false);
		warn("[ProfileService]: Critical state ended");
	end;
	while true do
		local v212 = l___issue_queue__11[1];
		if v212 == nil then
			return;
		end;
		if not (u7.IssueLast < os.clock() - v212) then
			break;
		end;
		table.remove(l___issue_queue__11, 1);	
	end;
end);
task.spawn(function()
	u49();
	v9.ConnectToOnClose(function()
		v10.ServiceLocked = true;
		local v213 = 0;
		local v214 = {};
		for v215, v216 in ipairs(l___auto_save_list__24) do
			v214[v215] = v216;
		end;
		for v217, v218 in ipairs(v214) do
			if v218:IsActive() == true then
				v213 = v213 + 1;
				local u53 = v213;
				task.spawn(function()
					u42(v218, true);
					u53 = u53 - 1;
				end);
			end;
		end;
		while v213 > 0 or u47 > 0 or u30 > 0 do
			task.wait();		
		end;
	end, u19 == false);
end);
return v10;

