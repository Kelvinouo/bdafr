-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local l__RunService__2 = game:GetService("RunService");
local u1 = require(script.Parent.MockDataStoreConstants);
local function u2(p1, p2)
	if not (p2 < #p1) then
		return p1;
	end;
	return p1:sub(1, p2 - 2) .. "..";
end;
local function u3(p3)
	if type(p3) ~= "table" then
		return p3;
	end;
	local v3 = {};
	for v4, v5 in pairs(p3) do
		v3[v4] = u3(v5);
	end;
	return v3;
end;
local function u4(p4, p5, p6)
	if type(p4) ~= "table" then
		return u4({
			input = p4
		}, {}, {});
	end;
	p5 = p5 or {};
	p6 = p6 or { "root" };
	p5[p4] = true;
	if type((next(p4))) == "number" then
		local v6 = "Array";
	else
		v6 = "Dictionary";
	end;
	local v7 = 0;
	local l__next__8 = next;
	local v9 = nil;
	while true do
		local v10, v11 = l__next__8(p4, v9);
		if not v10 then
			break;
		end;
		p6[#p6 + 1] = tostring(v10);
		if type(v10) == "number" then
			if v6 == "Dictionary" then
				return false, p6, "cannot store mixed tables";
			end;
			if v10 % 1 ~= 0 then
				return false, p6, "cannot store tables with non-integer indices";
			end;
			if v10 == math.huge then
				return false, p6, "cannot store tables with (-)infinity indices";
			end;
			if v10 == -math.huge then
				return false, p6, "cannot store tables with (-)infinity indices";
			end;
		else
			if type(v10) ~= "string" then
				return false, p6, "dictionaries cannot have keys of type " .. typeof(v10);
			end;
			if v6 == "Array" then
				return false, p6, "cannot store mixed tables";
			end;
			if not utf8.len(v10) then
				return false, p6, "dictionary has key that is invalid UTF-8";
			end;
		end;
		if v6 == "Array" then
			if v7 ~= v10 - 1 then
				return false, p6, "array has non-sequential indices";
			end;
			v7 = v10;
		end;
		if type(v11) == "userdata" then
			return false, p6, "cannot store value '" .. tostring(v11) .. "' of type " .. typeof(v11);
		end;
		if type(v11) == "function" then
			return false, p6, "cannot store value '" .. tostring(v11) .. "' of type " .. typeof(v11);
		end;
		if type(v11) == "thread" then
			return false, p6, "cannot store value '" .. tostring(v11) .. "' of type " .. typeof(v11);
		end;
		if type(v11) == "string" and not utf8.len(v11) then
			return false, p6, "cannot store strings that are invalid UTF-8";
		end;
		if type(v11) == "table" then
			if p5[v11] then
				return false, p6, "cannot store cyclic tables";
			end;
			local v12, v13, v14 = u4(v11, p5, p6);
			if not v12 then
				return v12, v13, v14;
			end;
		end;
		p6[#p6] = nil;	
	end;
	p5[p4] = nil;
	return true;
end;
local l__HttpService__5 = game:GetService("HttpService");
local function u6(p7)
	return table.concat(p7, ".");
end;
local u7 = Random.new();
local function u8()
	if u1.YIELD_TIME_MAX > 0 then
		task.wait(u7:NextNumber(u1.YIELD_TIME_MIN, u1.YIELD_TIME_MAX));
	end;
end;
function v1.logMethod(p8, p9, p10, p11, p12)
	if not u1.LOGGING_ENABLED or type(u1.LOGGING_FUNCTION) ~= "function" then
		return;
	end;
	local l____name__15 = p8.__name;
	local l____scope__16 = p8.__scope;
	if not l____name__15 then
		local v17 = ("[GlobalDataStore] [%s]"):format(p9);
	elseif not l____scope__16 then
		v17 = ("[%s] [%s] [%s]"):format(p8.__type, u2(l____name__15, 20), p9);
	else
		v17 = ("[%s] [%s/%s] [%s]"):format(p8.__type, u2(l____name__15, 15), u2(l____scope__16, 15), p9);
	end;
	if p11 and p12 then
		local v18 = p10 .. " + " .. tostring(p12) .. " => " .. tostring(p11);
	elseif p12 then
		v18 = p10 .. " + " .. tostring(p12);
	elseif p11 then
		if p9 == "RemoveAsync" then
			v18 = p10 .. " =/> " .. tostring(p11);
		else
			v18 = p10 .. " => " .. tostring(p11);
		end;
	else
		v18 = "key";
	end;
	u1.LOGGING_FUNCTION(v17 .. " " .. v18);
end;
v1.deepcopy = u3;
v1.scanValidity = u4;
v1.getStringPath = u6;
function v1.importPairsFromTable(p13, p14, p15, p16, p17, p18, p19)
	for v19, v20 in pairs(p13) do
		if type(v19) ~= "string" then
			p16(("%s: ignored %s > '%s' (key is not a string, but a %s)"):format(p17, p18, tostring(v19), typeof(v19)));
		elseif not utf8.len(v19) then
			p16(("%s: ignored %s > '%s' (key is not valid UTF-8)"):format(p17, p18, tostring(v19)));
		elseif u1.MAX_LENGTH_KEY < #v19 then
			p16(("%s: ignored %s > '%s' (key exceeds %d character limit)"):format(p17, p18, v19, u1.MAX_LENGTH_KEY));
		elseif type(v20) == "string" and u1.MAX_LENGTH_DATA < #v20 then
			p16(("%s: ignored %s > '%s' (length of value exceeds %d character limit)"):format(p17, p18, v19, u1.MAX_LENGTH_DATA));
		elseif type(v20) == "table" and u1.MAX_LENGTH_DATA < #l__HttpService__5:JSONEncode(v20) then
			p16(("%s: ignored %s > '%s' (length of encoded value exceeds %d character limit)"):format(p17, p18, v19, u1.MAX_LENGTH_DATA));
		elseif type(v20) == "function" or type(v20) == "userdata" or type(v20) == "thread" then
			p16(("%s: ignored %s > '%s' (cannot store value '%s' of type %s)").format("%s: ignored %s > '%s' (cannot store value '%s' of type %s)", p17, p18, v19, tostring(v20), type(v20)));
		elseif p19 and type(v20) ~= "number" then
			p16(("%s: ignored %s > '%s' (cannot store value '%s' of type %s in OrderedDataStore)").format("%s: ignored %s > '%s' (cannot store value '%s' of type %s in OrderedDataStore)", p17, p18, v19, tostring(v20), type(v20)));
		elseif p19 and v20 % 1 ~= 0 then
			p16(("%s: ignored %s > '%s' (cannot store non-integer value '%s' in OrderedDataStore)").format("%s: ignored %s > '%s' (cannot store non-integer value '%s' in OrderedDataStore)", p17, p18, v19, tostring(v20)));
		elseif type(v20) == "string" and not utf8.len(v20) then
			p16(("%s: ignored %s > '%s' (string value is not valid UTF-8)").format("%s: ignored %s > '%s' (string value is not valid UTF-8)", p17, p18, v19, tostring(v20), type(v20)));
		else
			local v21 = true;
			local v22 = nil;
			local v23 = nil;
			if type(v20) == "table" then
				local v24, v25, v26 = u4(v20);
				v21 = v24;
				v22 = v25;
				v23 = v26;
			end;
			if p19 then
				v20 = math.floor(v20 + 0.5);
			end;
			if v21 then
				p14[v19] = v20;
				if p15 and p14[v19] ~= v20 then
					if p19 and p15 then
						if p15.__ref[v19] then
							p15.__ref[v19].Value = v20;
							p15.__changed = true;
						else
							local v27 = {};
							v27.Key = v19;
							v27.Value = p15.__data[v19];
							p15.__ref[v19] = v27;
							table.insert(p15.__sorted, p15.__ref[v19]);
							p15.__changed = true;
						end;
					end;
					local l____event__28 = p15.__event;
					l____event__28.Fire(l____event__28, v19, v20);
				end;
			else
				p16(("%s: ignored %s > '%s' (table has invalid entry at <%s>: %s)").format("%s: ignored %s > '%s' (table has invalid entry at <%s>: %s)", p17, p18, v19, u6(v22), v23));
			end;
		end;
	end;
end;
function v1.prepareDataStoresForExport(p20)
	local v29 = {};
	local v30, v31, v32 = pairs(p20);
	while true do
		local v33, v34 = v30(v31, v32);
		if not v33 then
			break;
		end;
		local v35 = {};
		local v36, v37, v38 = pairs(v34);
		while true do
			local v39, v40 = v36(v37, v38);
			if not v39 then
				break;
			end;
			local v41 = {};
			for v42, v43 in pairs(v40) do
				v41[v42] = v43;
			end;
			if next(v41) ~= nil then
				v35[v39] = v41;
			end;		
		end;
		if next(v35) ~= nil then
			v29[v33] = v35;
		end;	
	end;
	if next(v29) == nil then
		return;
	end;
	return v29;
end;
function v1.preprocessKey(p21)
	if type(p21) ~= "number" then
		return p21;
	end;
	if p21 ~= p21 then
		return "NAN";
	end;
	if math.huge <= p21 then
		return "INF";
	end;
	if p21 <= -math.huge then
		return "-INF";
	end;
	return tostring(p21);
end;
v1.simulateYield = u8;
function v1.simulateErrorCheck(p22)
	if u1.SIMULATE_ERROR_RATE > 0 and u7:NextNumber() <= u1.SIMULATE_ERROR_RATE then
		u8();
		error(p22 .. " rejected with error (simulated error)", 3);
	end;
end;
return v1;
