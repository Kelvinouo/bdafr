-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local v2 = require(script.Parent.MockDataStoreConstants);
local l__Players__3 = game:GetService("Players");
local v4 = {
	[Enum.DataStoreRequestType.GetAsync] = {}, 
	[Enum.DataStoreRequestType.GetSortedAsync] = {}, 
	[Enum.DataStoreRequestType.OnUpdate] = {}, 
	[Enum.DataStoreRequestType.SetIncrementAsync] = {}, 
	[Enum.DataStoreRequestType.SetIncrementSortedAsync] = {}
};
local u1 = {
	[Enum.DataStoreRequestType.GetAsync] = v2.BUDGET_GETASYNC, 
	[Enum.DataStoreRequestType.GetSortedAsync] = v2.BUDGET_GETSORTEDASYNC, 
	[Enum.DataStoreRequestType.OnUpdate] = v2.BUDGET_ONUPDATE, 
	[Enum.DataStoreRequestType.SetIncrementAsync] = v2.BUDGET_SETINCREMENTASYNC, 
	[Enum.DataStoreRequestType.SetIncrementSortedAsync] = v2.BUDGET_SETINCREMENTSORTEDASYNC
};
local u2 = {};
local function v5()
	for v6, v7 in pairs(u1) do
		u2[v6] = v7.START;
	end;
	u2[Enum.DataStoreRequestType.UpdateAsync] = math.min(u2[Enum.DataStoreRequestType.GetAsync], u2[Enum.DataStoreRequestType.SetIncrementAsync]);
end;
local function v8(p1)
	if not v2.BUDGETING_ENABLED then
		return;
	end;
	for v9, v10 in pairs(p1) do
		if u2[v10] then
			u2[v10] = math.max(0, u2[v10] - 1);
		end;
	end;
	u2[Enum.DataStoreRequestType.UpdateAsync] = math.min(u2[Enum.DataStoreRequestType.GetAsync], u2[Enum.DataStoreRequestType.SetIncrementAsync]);
end;
local function v11(p2)
	if not v2.BUDGETING_ENABLED then
		return true;
	end;
	for v12, v13 in pairs(p2) do
		if u2[v13] and u2[v13] < 1 then
			return false;
		end;
	end;
	return true;
end;
if game:GetService("RunService"):IsServer() then
	v5();
	local u3 = false;
	local function u4(p3, p4, p5, p6)
		if not v2.BUDGETING_ENABLED then
			return;
		end;
		local v14 = p4.RATE + p6 * p4.RATE_PLR;
		u2[p3] = math.min(u2[p3] + p5 * v14, p4.MAX_FACTOR * v14);
	end;
	task.spawn(function()
		local v15 = tick();
		while task.wait(v2.BUDGET_UPDATE_INTERVAL) do
			local v16 = (tick() - v15) / 60;
			local v17 = #l__Players__3:GetPlayers();
			if not u3 then
				for v18, v19 in pairs(u1) do
					u4(v18, v19, v16, v17);
				end;
				u2[Enum.DataStoreRequestType.UpdateAsync] = math.min(u2[Enum.DataStoreRequestType.GetAsync], u2[Enum.DataStoreRequestType.SetIncrementAsync]);
			end;
			local v20, v21, v22 = pairs(v4);
			while true do
				local v23, v24 = v20(v21, v22);
				if not v23 then
					break;
				end;
				for v25 = #v24, 1, -1 do
					local v26 = v24[v25];
					local l__Budget__27 = v26.Budget;
					local l__Key__28 = v26.Key;
					local l__Lock__29 = v26.Lock;
					if l__Lock__29 then
						if not l__Lock__29[l__Key__28] and (not (tick() - (v26.Cache[l__Key__28] and 0) < v2.WRITE_COOLDOWN) and v11(l__Budget__27)) then
							table.remove(v24, v25);
							v8(l__Budget__27);
							coroutine.resume(v26.Thread);
						end;
					elseif v11(l__Budget__27) then
						table.remove(v24, v25);
						v8(l__Budget__27);
						coroutine.resume(v26.Thread);
					end;
				end;			
			end;		
		end;
	end);
	game:BindToClose(function()
		for v30, v31 in pairs(u1) do
			u2[v30] = math.max(u2[v30], v2.BUDGET_ONCLOSE_BASE * (v31.RATE / v2.BUDGET_BASE));
		end;
		u2[Enum.DataStoreRequestType.UpdateAsync] = math.min(u2[Enum.DataStoreRequestType.GetAsync], u2[Enum.DataStoreRequestType.SetIncrementAsync]);
	end);
end;
local u5 = {
	GlobalDataStore = {}, 
	DataStore = {}, 
	OrderedDataStore = {}
};
function v1.GetGlobalData()
	return u5.GlobalDataStore;
end;
function v1.GetData(p7, p8)
	assert(type(p7) == "string");
	assert(type(p8) == "string");
	if not u5.DataStore[p7] then
		u5.DataStore[p7] = {};
	end;
	if not u5.DataStore[p7][p8] then
		u5.DataStore[p7][p8] = {};
	end;
	return u5.DataStore[p7][p8];
end;
function v1.GetOrderedData(p9, p10)
	assert(type(p9) == "string");
	assert(type(p10) == "string");
	if not u5.OrderedDataStore[p9] then
		u5.OrderedDataStore[p9] = {};
	end;
	if not u5.OrderedDataStore[p9][p10] then
		u5.OrderedDataStore[p9][p10] = {};
	end;
	return u5.OrderedDataStore[p9][p10];
end;
local u6 = {};
function v1.GetDataInterface(p11)
	return u6[p11];
end;
function v1.SetDataInterface(p12, p13)
	assert(type(p12) == "table");
	assert(type(p13) == "table");
	u6[p12] = p13;
end;
function v1.GetBudget(p14)
	if not v2.BUDGETING_ENABLED then
		return math.huge;
	end;
	return math.floor(u2[p14] and 0);
end;
function v1.SetBudget(p15, p16)
	assert(type(p16) == "number");
	p16 = math.max(p16, 0);
	if p15 == Enum.DataStoreRequestType.UpdateAsync then
		u2[Enum.DataStoreRequestType.SetIncrementAsync] = p16;
		u2[Enum.DataStoreRequestType.GetAsync] = p16;
	end;
	if u2[p15] then
		u2[p15] = p16;
	end;
end;
function v1.ResetBudget()
	v5();
end;
local u7 = false;
function v1.FreezeBudgetUpdates()
	u7 = true;
end;
function v1.ThawBudgetUpdates()
	u7 = false;
end;
function v1.YieldForWriteLockAndBudget(p17, p18, p19, p20, p21)
	assert(type(p17) == "function");
	assert(type(p18) == "string");
	assert(type(p19) == "table");
	assert(type(p20) == "table");
	assert(#p21 > 0);
	local v32 = p21[1];
	if v2.THROTTLE_QUEUE_SIZE <= #v4[v32] then
		return false;
	end;
	p17();
	table.insert(v4[v32], 1, {
		Key = p18, 
		Lock = p19, 
		Cache = p20, 
		Thread = coroutine.running(), 
		Budget = p21
	});
	coroutine.yield();
	return true;
end;
function v1.YieldForBudget(p22, p23)
	assert(type(p22) == "function");
	assert(#p23 > 0);
	local v33 = p23[1];
	if v11(p23) then
		v8(p23);
	else
		if v2.THROTTLE_QUEUE_SIZE <= #v4[v33] then
			return false;
		end;
		p22();
		table.insert(v4[v33], 1, {
			After = 0, 
			Thread = coroutine.running(), 
			Budget = p23
		});
		coroutine.yield();
	end;
	return true;
end;
local u8 = require(script.Parent.MockDataStoreUtils);
local l__HttpService__9 = game:GetService("HttpService");
function v1.ExportToJSON()
	local v34 = {};
	if next(u5.GlobalDataStore) ~= nil then
		v34.GlobalDataStore = u5.GlobalDataStore;
	end;
	v34.DataStore = u8.prepareDataStoresForExport(u5.DataStore);
	v34.OrderedDataStore = u8.prepareDataStoresForExport(u5.OrderedDataStore);
	return l__HttpService__9:JSONEncode(v34);
end;
local function u10(p24, p25, p26, p27, p28, p29)
	for v35, v36 in pairs(p24) do
		if type(v35) ~= "string" then
			p26(("%s: ignored %s > %q (name is not a string, but a %s)"):format(p27, p28, tostring(v35), typeof(v35)));
		elseif type(v36) ~= "table" then
			p26(("%s: ignored %s > %q (scope list is not a table, but a %s)"):format(p27, p28, v35, typeof(v36)));
		elseif #v35 == 0 then
			p26(("%s: ignored %s > %q (name is an empty string)"):format(p27, p28, v35));
		elseif v2.MAX_LENGTH_NAME < #v35 then
			p26(("%s: ignored %s > %q (name exceeds %d character limit)"):format(p27, p28, v35, v2.MAX_LENGTH_NAME));
		else
			for v37, v38 in pairs(v36) do
				if type(v37) ~= "string" then
					p26(("%s: ignored %s > %q > %q (scope is not a string, but a %s)"):format(p27, p28, v35, tostring(v37), typeof(v37)));
				elseif type(v38) ~= "table" then
					p26(("%s: ignored %s > %q > %q (data list is not a table, but a %s)"):format(p27, p28, v35, v37, typeof(v38)));
				elseif #v37 == 0 then
					p26(("%s: ignored %s > %q > %q (scope is an empty string)").format("%s: ignored %s > %q > %q (scope is an empty string)", p27, p28, v35, v37));
				elseif v2.MAX_LENGTH_SCOPE < #v37 then
					p26(("%s: ignored %s > %q > %q (scope exceeds %d character limit)").format("%s: ignored %s > %q > %q (scope exceeds %d character limit)", p27, p28, v35, v37, v2.MAX_LENGTH_SCOPE));
				else
					if not p25[v35] then
						p25[v35] = {};
					end;
					if not p25[v35][v37] then
						p25[v35][v37] = {};
					end;
					u8.importPairsFromTable(v38, p25[v35][v37], u6[p25[v35][v37]], p26, p27, ("%s > %q > %q").format("%s > %q > %q", p28, v35, v37), p29);
				end;
			end;
		end;
	end;
end;
function v1.ImportFromJSON(p30, p31)
	assert(type(p30) == "table");
	local v39 = true;
	if p31 ~= nil then
		v39 = type(p31) == "boolean";
	end;
	assert(v39);
	local v40 = warn;
	if p31 == false then
		v40 = function()

		end;
	end;
	if type(p30.GlobalDataStore) == "table" then
		u8.importPairsFromTable(p30.GlobalDataStore, u5.GlobalDataStore, u6[u5.GlobalDataStore], v40, "ImportFromJSON", "GlobalDataStore", false);
	end;
	if type(p30.DataStore) == "table" then
		u10(p30.DataStore, u5.DataStore, v40, "ImportFromJSON", "DataStore", false);
	end;
	if type(p30.OrderedDataStore) == "table" then
		u10(p30.OrderedDataStore, u5.OrderedDataStore, v40, "ImportFromJSON", "OrderedDataStore", true);
	end;
end;
local function u11(p32)
	for v41, v42 in pairs(p32) do
		p32[v41] = nil;
	end;
end;
function v1.ResetData()
	local v43, v44, v45 = pairs(u6);
	while true do
		local v46, v47 = v43(v44, v45);
		if not v46 then
			break;
		end;
		for v48, v49 in pairs(v47.__data) do
			v47.__data[v48] = nil;
			v47.__event:Fire(v48, nil);
		end;
		v47.__getCache = {};
		v47.__writeCache = {};
		v47.__writeLock = {};
		if v47.__sorted then
			v47.__sorted = {};
			v47.__ref = {};
			v47.__changed = false;
		end;	
	end;
	u11(u5.GlobalDataStore);
	for v50, v51 in pairs(u5.DataStore) do
		for v52, v53 in pairs(v51) do
			u11(v53);
		end;
	end;
	for v54, v55 in pairs(u5.OrderedDataStore) do
		for v56, v57 in pairs(v55) do
			u11(v57);
		end;
	end;
end;
return v1;
