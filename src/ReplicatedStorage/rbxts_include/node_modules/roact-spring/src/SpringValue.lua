-- Decompiled with the Synapse X Luau decompiler.

local l__rbxts_include__1 = game:GetService("ReplicatedStorage"):FindFirstChild("rbxts_include");
local v2 = l__rbxts_include__1 and require(l__rbxts_include__1.RuntimeLib);
if v2 then
	local v3 = v2.Promise;
else
	v3 = require(script.Parent.Parent.Promise);
end;
local v4 = require(script.Parent.AnimationConfig);
local v5 = {};
v5.__index = v5;
local u1 = require(script.Parent.Animation);
local u2 = require(script.Parent.Signal);
function v5.new(p1, p2)
	assert(p1.from or p1.to, "`to` or `from` expected, none passed.");
	local v6 = {
		animation = u1.new(p1, p2)
	};
	local v7 = {};
	if p1.immediate ~= nil then
		local v8 = p1.immediate;
	else
		v8 = false;
	end;
	v7.immediate = v8;
	v7.config = p1.config;
	v6.defaultProps = v7;
	v6.onChange = p1.onChange or function()

	end;
	v6.onComplete = u2.new();
	v6._memoizedDuration = 0;
	v6.hasAnimated = false;
	return setmetatable(v6, v5);
end;
function v5.start(p3, p4)
	p3.hasAnimated = true;
	return p3:_update(p4);
end;
local u3 = require(script.Parent.util);
local u4 = require(script.Parent.helpers);
local l__RunService__5 = game:GetService("RunService");
function v5._update(p5, p6)
	if p6.default then
		p5.defaultProps = u3.merge(p5.defaultProps, u4.getDefaultProps(p6));
	end;
	return v3.new(function(p7, p8, p9)
		if p6.delay then
			task.wait(p6.delay);
		end;
		if p9() then
			return;
		end;
		local v9 = p5:_prepareNode(p6);
		local l__from__10 = v9.from;
		local v11 = v9.to;
		if l__from__10 and not v11 then
			v11 = l__from__10;
		end;
		local l__animation__12 = p5.animation;
		l__animation__12:mergeProps(u3.merge(p5.defaultProps, p6));
		if p6.reverse then
			l__animation__12.toValues = l__animation__12.fromValues;
			l__animation__12.fromValues = l__animation__12.toValues;
		end;
		p5.onChange = p6.onChange or p5.onChange;
		if p6.reset == nil then
			local v13 = l__from__10 ~= nil;
		else
			v13 = false;
			if l__animation__12.fromValues ~= nil then
				v13 = p6.reset;
			end;
		end;
		if v13 then
			l__animation__12.values = table.clone(l__animation__12.fromValues);
			if l__from__10 then
				local v14 = u4.getValuesFromType(l__from__10);
			else
				v14 = l__animation__12.lastPosition;
			end;
			l__animation__12.lastPosition = v14;
		end;
		l__animation__12.toValues = u4.getValuesFromType(v11);
		l__animation__12.fromValues = table.clone(l__animation__12.lastPosition);
		if not p5._connection then
			p5._connection = l__RunService__5.RenderStepped:Connect(function(p10)
				p5:advance(p10);
			end);
		end;
		p5.onComplete:Wait();
		p7();
	end);
end;
function v5.stop(p11)
	p11:_disconnect();
	p11.animation:stop();
end;
function v5.pause(p12)
	p12:_disconnect();
end;
function v5.advance(p13, p14)
	local v15 = true;
	local v16 = false;
	local l__animation__17 = p13.animation;
	local l__config__18 = l__animation__17.config;
	local l__toValues__19 = l__animation__17.toValues;
	local v20, v21, v22 = ipairs(l__animation__17.values);
	while true do
		v20(v21, v22);
		if not v20 then
			break;
		end;
		v22 = v20;
		if not l__animation__17.done[v20] then
			local v23 = nil;
			local v24 = nil;
			local v25 = nil;
			local v26 = nil;
			local v27 = nil;
			local v28 = nil;
			local v29 = nil;
			local v30 = nil;
			local v31 = nil;
			local v32 = nil;
			local v33 = nil;
			local v34 = nil;
			local v35 = nil;
			local v36 = nil;
			local v37 = nil;
			local v38 = nil;
			local v39 = l__animation__17.immediate;
			local v40 = l__toValues__19[v20];
			local v41 = l__animation__17.fromValues[v20];
			local v42 = l__animation__17.toValues[v20];
			if not v39 then
				local v43 = l__animation__17.lastPosition[v20];
				if l__config__18.tension <= 0 then
					l__animation__17.done[v20] = true;
				else
					local l__elapsedTime__44 = l__animation__17.elapsedTime;
					l__elapsedTime__44[v20] = l__elapsedTime__44[v20] + p14;
					local v45 = l__animation__17.elapsedTime[v20];
					if l__animation__17.v0[v20] == nil then
						if typeof(l__config__18.velocity) == "table" then
							l__animation__17.v0[v20] = l__config__18.velocity[v20];
						else
							if v42 - v41 > 0 then
								local v46 = l__config__18.velocity;
							elseif v42 - v41 < 0 then
								v46 = -l__config__18.velocity;
							else
								v46 = 0;
							end;
							l__animation__17.v0[v20] = v46;
						end;
					end;
					local v47 = l__animation__17.v0[v20];
					if l__config__18.duration then
						local v48 = 1;
						if l__config__18.duration > 0 then
							if p13._memoizedDuration ~= l__config__18.duration then
								p13._memoizedDuration = l__config__18.duration;
								if l__animation__17.durationProgress[v20] > 0 then
									l__animation__17.elapsedTime[v20] = l__config__18.duration * l__animation__17.durationProgress[v20];
									local l__elapsedTime__49 = l__animation__17.elapsedTime;
									l__elapsedTime__49[v20] = l__elapsedTime__49[v20] + p14;
									v45 = l__animation__17.elapsedTime[v20];
								end;
							end;
							local v50 = (l__config__18.progress and 0) + v45 / p13._memoizedDuration;
							if v50 > 1 then
								v48 = 1;
							elseif v50 < 0 then
								v48 = 0;
							else
								v48 = v50;
							end;
							l__animation__17.durationProgress[v20] = v48;
						end;
						v40 = v41 + l__config__18.easing(v48) * (v42 - v41);
						local v51 = (v40 - l__animation__17.lastPosition[v20]) / p14;
						v39 = v48 == 1;
					else
						v51 = l__animation__17.lastVelocity[v20] and v47;
						local v52 = l__config__18.precision;
						if not v52 then
							if v41 == v42 then
								v52 = 0.005;
							else
								v52 = math.min(1, math.abs(v42 - v41) * 0.001);
							end;
						end;
						local v53 = l__config__18.restVelocity or v52 / 10;
						if l__config__18.clamp then
							local v54 = 0;
						else
							v54 = l__config__18.bounce;
						end;
						local v55 = v54 ~= nil;
						if v41 == v42 then
							local v56 = v47 > 0;
						elseif not (v41 < v42) then
							v56 = false;
						else
							v56 = true;
						end;
						for v57 = 0, math.ceil(p14 * 1000 / 2) do
							local v58 = v53 < math.abs(v51);
							if not v58 then
								v39 = math.abs(v42 - v40) <= v52;
								if v39 then
									break;
								end;
							end;
							if v55 then
								local v59 = true;
								if v43 ~= v42 then
									local v60 = v42 < v43;
									v59 = v60 == v56;
								end;
								if v59 then
									v51 = -v51 * v54;
									v43 = v42;
								end;
							end;
							v51 = v51 + (-l__config__18.tension * 1E-06 * (v43 - v42) + -l__config__18.friction * 0.001 * v51) / l__config__18.mass;
							v43 = v43 + v51;
						end;
					end;
					l__animation__17.lastVelocity[v20] = v51;
					v23 = v39;
					if v23 then
						v40 = v42;
						l__animation__17.done[v20] = true;
					else
						v15 = false;
					end;
					v24 = v20;
					v32 = v24;
					v25 = v40;
					v33 = v25;
					v27 = "setValue";
					v26 = l__animation__17;
					v31 = v26;
					v28 = l__animation__17;
					v29 = v27;
					v30 = v28[v29];
					v34 = v30;
					v35 = v31;
					v36 = v32;
					v37 = v33;
					local v61 = v34(v35, v36, v37);
					v38 = v61;
					if v38 then
						v16 = true;
					end;
				end;
			else
				v23 = v39;
				if v23 then
					v40 = v42;
					l__animation__17.done[v20] = true;
				else
					v15 = false;
				end;
				v24 = v20;
				v32 = v24;
				v25 = v40;
				v33 = v25;
				v27 = "setValue";
				v26 = l__animation__17;
				v31 = v26;
				v28 = l__animation__17;
				v29 = v27;
				v30 = v28[v29];
				v34 = v30;
				v35 = v31;
				v36 = v32;
				v37 = v33;
				v61 = v34(v35, v36, v37);
				v38 = v61;
				if v38 then
					v16 = true;
				end;
			end;
		end;	
	end;
	if not v15 then
		if v16 then
			p13.onChange(l__animation__17:getValue());
		end;
		return;
	end;
	p13.onChange(l__animation__17:getValue());
	p13:_disconnect();
	p13.animation:stop();
	p13.onComplete:Fire();
end;
function v5._prepareNode(p15, p16)
	local v62 = p15.key and "";
	local v63 = p16.to;
	local v64 = p16.from;
	if typeof(v63) == "table" then
		v63 = v63[v62];
	end;
	if typeof(v64) == "table" then
		v64 = v64[v62];
	end;
	if not p15.hasAnimated then
		if p16.reverse then
			v64 = v63;
			v63 = v64;
		end;
		local v65 = u4.getValuesFromType(v64 and v63);
		p15.animation = p15.animation or u1.new(#v65);
		p15.animation.values = table.clone(v65);
		p15.animation.lastPosition = table.clone(v65);
		p15.onChange(v64 and v63);
	end;
	return {
		to = v63, 
		from = v64
	};
end;
function v5._disconnect(p17)
	if p17._connection then
		p17._connection:Disconnect();
		p17._connection = nil;
	end;
end;
return v5;
