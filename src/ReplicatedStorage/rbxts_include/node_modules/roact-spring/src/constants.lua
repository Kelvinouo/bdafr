-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	config = table.freeze({
		default = table.freeze({
			tension = 170, 
			friction = 26
		}), 
		gentle = table.freeze({
			tension = 120, 
			friction = 14
		}), 
		wobbly = table.freeze({
			tension = 180, 
			friction = 12
		}), 
		stiff = table.freeze({
			tension = 210, 
			friction = 20
		}), 
		slow = table.freeze({
			tension = 280, 
			friction = 60
		}), 
		molasses = table.freeze({
			tension = 280, 
			friction = 120
		})
	})
};
local v2 = {
	linear = function(p1)
		return p1;
	end, 
	easeInQuad = function(p2)
		return p2 ^ 2;
	end, 
	easeOutQuad = function(p3)
		return 1 - (1 - p3) ^ 2;
	end, 
	easeInOutQuad = function(p4)
		if p4 < 0.5 then
			return 2 * p4 ^ 2;
		end;
		return 1 - (-2 * p4 + 2) ^ 2 / 2;
	end, 
	easeInCubic = function(p5)
		return p5 ^ 3;
	end, 
	easeOutCubic = function(p6)
		return 1 - (1 - p6) ^ 3;
	end, 
	easeInOutCubic = function(p7)
		if p7 < 0.5 then
			return 4 * p7 ^ 3;
		end;
		return 1 - (-2 * p7 + 2) ^ 3 / 2;
	end, 
	easeInQuart = function(p8)
		return p8 ^ 4;
	end, 
	easeOutQuart = function(p9)
		return 1 - (1 - p9) ^ 4;
	end, 
	easeInOutQuart = function(p10)
		if p10 < 0.5 then
			return 8 * p10 ^ 4;
		end;
		return 1 - (-2 * p10 + 2) ^ 4 / 2;
	end, 
	easeInQuint = function(p11)
		return p11 ^ 5;
	end, 
	easeOutQuint = function(p12)
		return 1 - (1 - p12) ^ 5;
	end, 
	easeInOutQuint = function(p13)
		if p13 < 0.5 then
			return 16 * p13 ^ 5;
		end;
		return 1 - (-2 * p13 + 2) ^ 5 / 2;
	end, 
	easeInSine = function(p14)
		return 1 - math.cos(p14 * math.pi / 2);
	end, 
	easeOutSine = function(p15)
		return math.sin(p15 * math.pi / 2);
	end, 
	easeInOutSine = function(p16)
		return -(math.cos(math.pi * p16) - 1) / 2;
	end, 
	easeInExpo = function(p17)
		if p17 == 0 then
			return 0;
		end;
		return 2 ^ (10 * (p17 - 1));
	end, 
	easeOutExpo = function(p18)
		if p18 == 1 then
			return 1;
		end;
		return -2 ^ (10 * p18 - 10) + 1;
	end, 
	easeInOutExpo = function(p19)
		if p19 == 0 then
			return 0;
		end;
		if p19 == 1 then
			return 1;
		end;
		if p19 < 0.5 then
			return 2 ^ (20 * p19 - 10) / 2;
		end;
		return 2 - 2 ^ (-20 * p19 + 10) / 2;
	end, 
	easeInCirc = function(p20)
		return 1 - math.sqrt(1 - p20 ^ 2);
	end, 
	easeOutCirc = function(p21)
		return math.sqrt(1 - (p21 - 1) ^ 2);
	end, 
	easeInOutCirc = function(p22)
		if p22 < 0.5 then
			return (1 - math.sqrt(1 - (2 * p22) ^ 2)) / 2;
		end;
		return (math.sqrt(1 - (2 * p22 - 1) ^ 2) + 1) / 2;
	end, 
	easeInBack = function(p23)
		return 2.70158 * p23 ^ 3 - 1.70158 * p23 ^ 2;
	end, 
	easeOutBack = function(p24)
		return 1 + 2.70158 * (p24 - 1) ^ 3 + 1.70158 * (p24 - 1) ^ 2;
	end, 
	easeInOutBack = function(p25)
		if p25 < 0.5 then
			return (2 * p25) ^ 2 * (7.189819 * p25 - 2.5949095) / 2;
		end;
		return ((2 * p25 - 2) ^ 2 * (3.5949095 * (p25 * 2 - 2) + 2.5949095) + 2) / 2;
	end
};
local u1 = 2 * math.pi / 3;
function v2.easeInElastic(p26)
	if p26 == 0 then
		return 0;
	end;
	if p26 == 1 then
		return 1;
	end;
	return 2 ^ (-10 * p26) * math.sin((p26 * 10 - 0.75) * u1) + 1;
end;
local u2 = 2 * math.pi / 4.5;
function v2.easeOutElastic(p27)
	if p27 == 0 then
		return 0;
	end;
	if p27 == 1 then
		return 1;
	end;
	if p27 < 0.5 then
		return -(2 ^ (20 * p27 - 10) * math.sin((20 * p27 - 11.125) * u2)) / 2;
	end;
	return 2 ^ (-20 * p27 + 10) * math.sin((20 * p27 - 11.125) * u2) / 2 + 1;
end;
function v2.easeInBounce(p28)
	local v3 = 1 - p28;
	if v3 < 0.36363636363636365 then
		local v4 = 7.5625 * v3 ^ 2;
	elseif v3 < 0.7272727272727273 then
		v4 = 7.5625 * (v3 - 0.5454545454545454) ^ 2 + 0.75;
	elseif v3 < 0.9090909090909091 then
		v4 = 7.5625 * (v3 - -0.8181818181818182) ^ 2 + 0.9375;
	else
		v4 = 7.5625 * (v3 - -0.9545454545454546) ^ 2 + 0.984375;
	end;
	return 1 - v4;
end;
function v2.easeOutBounce(p29)
	if p29 < 0.36363636363636365 then
		return 7.5625 * p29 ^ 2;
	end;
	if p29 < 0.7272727272727273 then
		p29 = p29 - 0.5454545454545454;
		return 7.5625 * p29 ^ 2 + 0.75;
	end;
	if p29 < 0.9090909090909091 then
		p29 = p29 - -0.8181818181818182;
		return 7.5625 * p29 ^ 2 + 0.9375;
	end;
	p29 = p29 - -0.9545454545454546;
	return 7.5625 * p29 ^ 2 + 0.984375;
end;
function v2.easeInOutBounce(p30)
	if p30 < 0.5 then
		local v5 = 1 - 2 * p30;
		if v5 < 0.36363636363636365 then
			local v6 = 7.5625 * v5 ^ 2;
		elseif v5 < 0.7272727272727273 then
			v6 = 7.5625 * (v5 - 0.5454545454545454) ^ 2 + 0.75;
		elseif v5 < 0.9090909090909091 then
			v6 = 7.5625 * (v5 - -0.8181818181818182) ^ 2 + 0.9375;
		else
			v6 = 7.5625 * (v5 - -0.9545454545454546) ^ 2 + 0.984375;
		end;
		return (1 - v6) / 2;
	end;
	local v7 = 2 * p30 - 1;
	if v7 < 0.36363636363636365 then
		local v8 = 7.5625 * v7 ^ 2;
	elseif v7 < 0.7272727272727273 then
		v8 = 7.5625 * (v7 - 0.5454545454545454) ^ 2 + 0.75;
	elseif v7 < 0.9090909090909091 then
		v8 = 7.5625 * (v7 - -0.8181818181818182) ^ 2 + 0.9375;
	else
		v8 = 7.5625 * (v7 - -0.9545454545454546) ^ 2 + 0.984375;
	end;
	return (1 + v8) / 2;
end;
v1.easings = table.freeze(v2);
return v1;
