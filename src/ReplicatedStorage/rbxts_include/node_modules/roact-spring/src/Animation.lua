-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
local u1 = require(script.Parent.helpers);
local u2 = require(script.Parent.AnimationConfig);
function v1.new(p1, p2)
	local v2 = p1.to and p1.to[p2];
	local v3 = p1.from and p1.from[p2];
	local v4 = #u1.getValuesFromType(v3 and v2);
	return setmetatable({
		values = u1.getValuesFromType(v3 and v2), 
		toValues = u1.getValuesFromType(v2 and v3), 
		fromValues = u1.getValuesFromType(v3 and v2), 
		type = typeof(v3 and v2), 
		config = u2:mergeConfig(p1.config or {}), 
		immediate = p1.immediate, 
		v0 = table.create(v4, nil), 
		lastPosition = u1.getValuesFromType(v3 and v2), 
		lastVelocity = table.create(v4, nil), 
		done = table.create(v4, false), 
		elapsedTime = table.create(v4, 0), 
		durationProgress = table.create(v4, 0)
	}, v1);
end;
function v1.setValue(p3, p4, p5)
	p3.lastPosition[p4] = p5;
	if p3.values[p4] == p5 then
		return false;
	end;
	p3.values[p4] = p5;
	return true;
end;
function v1.mergeProps(p6, p7)
	if p7 then
		p6.config = u2:mergeConfig(p7.config or {});
		if p7.immediate ~= nil then
			local v5 = p7.immediate;
		else
			v5 = p6.immediate;
		end;
		p6.immediate = v5;
		p6.done = table.create(#p6.values, false);
		p6.elapsedTime = table.create(#p6.values, 0);
		p6.durationProgress = table.create(#p6.values, 0);
	end;
end;
function v1.getValue(p8)
	return u1.getTypeFromValues(p8.type, p8.values);
end;
function v1.stop(p9)
	local v6, v7, v8 = ipairs(p9.values);
	while true do
		v6(v7, v8);
		if not v6 then
			break;
		end;
		v8 = v6;
		p9.lastPosition[v6] = v7;
		p9.lastVelocity[v6] = nil;
		p9.v0[v6] = nil;
		p9.elapsedTime = table.create(#p9.values, 0);
		p9.durationProgress = table.create(#p9.values, 0);	
	end;
end;
return v1;
