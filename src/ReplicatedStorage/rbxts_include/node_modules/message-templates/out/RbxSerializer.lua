-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	SerializeVector3 = function(p1)
		return {
			X = p1.X, 
			Y = p1.Y, 
			Z = p1.Z
		};
	end, 
	SerializeVector2 = function(p2)
		return {
			X = p2.X, 
			Y = p2.Y
		};
	end, 
	SerializeNumberRange = function(p3)
		return {
			Min = p3.Min, 
			Max = p3.Max
		};
	end
};
local function v2(p4)
	return p4:ToIsoDate();
end;
v1.SerializeDateTime = v2;
local function v3(p5)
	return tostring(p5);
end;
v1.SerializeEnumItem = v3;
function v1.SerializeUDim(p6)
	return {
		Offset = p6.Offset, 
		Scale = p6.Scale
	};
end;
function v1.SerializeUDim2(p7)
	local v4 = {};
	local l__X__5 = p7.X;
	v4.X = {
		Offset = l__X__5.Offset, 
		Scale = l__X__5.Scale
	};
	local l__Y__6 = p7.Y;
	v4.Y = {
		Offset = l__Y__6.Offset, 
		Scale = l__Y__6.Scale
	};
	return v4;
end;
function v1.SerializeColor3(p8)
	return {
		R = p8.R, 
		G = p8.G, 
		B = p8.B
	};
end;
function v1.SerializeBrickColor(p9)
	local l__Color__7 = p9.Color;
	return {
		R = l__Color__7.R, 
		G = l__Color__7.G, 
		B = l__Color__7.B
	};
end;
function v1.SerializeRect(p10)
	local v8 = {};
	local l__Min__9 = p10.Min;
	v8.RectMin = {
		X = l__Min__9.X, 
		Y = l__Min__9.Y
	};
	local l__Max__10 = p10.Max;
	v8.RectMax = {
		X = l__Max__10.X, 
		Y = l__Max__10.Y
	};
	v8.RectHeight = p10.Height;
	v8.RectWidth = p10.Width;
	return v8;
end;
function v1.SerializePathWaypoint(p11)
	local v11 = {
		WaypointAction = tostring(p11.Action)
	};
	local l__Position__12 = p11.Position;
	v11.WaypointPosition = {
		X = l__Position__12.X, 
		Y = l__Position__12.Y, 
		Z = l__Position__12.Z
	};
	return v11;
end;
function v1.SerializeColorSequenceKeypoint(p12)
	local v13 = {
		ColorTime = p12.Time
	};
	local l__Value__14 = p12.Value;
	v13.ColorValue = {
		R = l__Value__14.R, 
		G = l__Value__14.G, 
		B = l__Value__14.B
	};
	return v13;
end;
local function v15(p13)
	local v16 = {};
	local l__Keypoints__17 = p13.Keypoints;
	local v18 = table.create(#l__Keypoints__17);
	local v19, v20, v21 = ipairs(l__Keypoints__17);
	while true do
		v19(v20, v21);
		if not v19 then
			break;
		end;
		v21 = v19;
		local v22 = {
			ColorTime = v20.Time
		};
		local l__Value__23 = v20.Value;
		v22.ColorValue = {
			R = l__Value__23.R, 
			G = l__Value__23.G, 
			B = l__Value__23.B
		};
		v18[v19] = v22;	
	end;
	v16.ColorKeypoints = v18;
	return v16;
end;
v1.SerializeColorSequence = v15;
function v1.SerializeNumberSequenceKeypoint(p14)
	return {
		NumberTime = p14.Time, 
		NumberValue = p14.Value
	};
end;
local function v24(p15)
	local v25 = {};
	local l__Keypoints__26 = p15.Keypoints;
	local v27 = table.create(#l__Keypoints__26);
	local v28, v29, v30 = ipairs(l__Keypoints__26);
	while true do
		v28(v29, v30);
		if not v28 then
			break;
		end;
		v30 = v28;
		v27[v28] = {
			NumberTime = v29.Time, 
			NumberValue = v29.Value
		};	
	end;
	v25.NumberKeypoints = v27;
	return v25;
end;
v1.SerializeNumberSequence = v24;
local l__DestructureMode__1 = _G[script].import(script, script.Parent, "MessageTemplateToken").DestructureMode;
local u2 = game:GetService("HttpService");
function v1.Serialize(p16, p17)
	if p17 == nil then
		p17 = l__DestructureMode__1.Default;
	end;
	if p17 == l__DestructureMode__1.ToString then
		return tostring(p16);
	end;
	if typeof(p16) == "Instance" then
		return p16:GetFullName();
	end;
	if type(p16) == "vector" or typeof(p16) == "Vector3int16" then
		return {
			X = p16.X, 
			Y = p16.Y, 
			Z = p16.Z
		};
	end;
	if typeof(p16) == "Vector2" or typeof(p16) == "Vector2int16" then
		return {
			X = p16.X, 
			Y = p16.Y
		};
	end;
	if typeof(p16) == "DateTime" then
		return v2(p16);
	end;
	if typeof(p16) == "EnumItem" then
		return v3(p16);
	end;
	if typeof(p16) == "NumberRange" then
		return {
			Min = p16.Min, 
			Max = p16.Max
		};
	end;
	if typeof(p16) == "UDim" then
		return {
			Offset = p16.Offset, 
			Scale = p16.Scale
		};
	end;
	if typeof(p16) == "UDim2" then
		local v31 = {};
		local l__X__32 = p16.X;
		v31.X = {
			Offset = l__X__32.Offset, 
			Scale = l__X__32.Scale
		};
		local l__Y__33 = p16.Y;
		v31.Y = {
			Offset = l__Y__33.Offset, 
			Scale = l__Y__33.Scale
		};
		return v31;
	end;
	if typeof(p16) == "Color3" then
		return {
			R = p16.R, 
			G = p16.G, 
			B = p16.B
		};
	end;
	if typeof(p16) == "BrickColor" then
		local l__Color__34 = p16.Color;
		return {
			R = l__Color__34.R, 
			G = l__Color__34.G, 
			B = l__Color__34.B
		};
	end;
	if typeof(p16) == "Rect" then
		local v35 = {};
		local l__Min__36 = p16.Min;
		v35.RectMin = {
			X = l__Min__36.X, 
			Y = l__Min__36.Y
		};
		local l__Max__37 = p16.Max;
		v35.RectMax = {
			X = l__Max__37.X, 
			Y = l__Max__37.Y
		};
		v35.RectHeight = p16.Height;
		v35.RectWidth = p16.Width;
		return v35;
	end;
	if typeof(p16) == "PathWaypoint" then
		local v38 = {
			WaypointAction = tostring(p16.Action)
		};
		local l__Position__39 = p16.Position;
		v38.WaypointPosition = {
			X = l__Position__39.X, 
			Y = l__Position__39.Y, 
			Z = l__Position__39.Z
		};
		return v38;
	end;
	if typeof(p16) == "ColorSequenceKeypoint" then
		local v40 = {
			ColorTime = p16.Time
		};
		local l__Value__41 = p16.Value;
		v40.ColorValue = {
			R = l__Value__41.R, 
			G = l__Value__41.G, 
			B = l__Value__41.B
		};
		return v40;
	end;
	if typeof(p16) == "ColorSequence" then
		return v15(p16);
	end;
	if typeof(p16) == "NumberSequenceKeypoint" then
		return {
			NumberTime = p16.Time, 
			NumberValue = p16.Value
		};
	end;
	if typeof(p16) == "NumberSequence" then
		return v24(p16);
	end;
	if type(p16) == "number" or type(p16) == "string" or type(p16) == "boolean" then
		return p16;
	end;
	if type(p16) == "table" then
		return u2:JSONEncode(p16);
	end;
	if type(p16) == "nil" then
		return nil;
	end;
	error("Destructuring of '" .. typeof(p16) .. "' not supported by Serializer");
end;
u2 = {
	RbxSerializer = v1
};
return u2;
