-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	SerializeVector3 = function(p1)
		return {
			X = p1.X, 
			Y = p1.Y, 
			Z = p1.Z
		};
	end, 
	SerializeVector2 = function(p2)
		return {
			X = p2.X, 
			Y = p2.Y
		};
	end, 
	SerializeNumberRange = function(p3)
		return {
			Min = p3.Min, 
			Max = p3.Max
		};
	end
};
local function v2(p4)
	return p4:ToIsoDate();
end;
v1.SerializeDateTime = v2;
local function v3(p5)
	return tostring(p5);
end;
v1.SerializeEnumItem = v3;
function v1.SerializeUDim(p6)
	return {
		Offset = p6.Offset, 
		Scale = p6.Scale
	};
end;
function v1.SerializeUDim2(p7)
	local v4 = {};
	local l__X__5 = p7.X;
	v4.X = {
		Offset = l__X__5.Offset, 
		Scale = l__X__5.Scale
	};
	local l__Y__6 = p7.Y;
	v4.Y = {
		Offset = l__Y__6.Offset, 
		Scale = l__Y__6.Scale
	};
	return v4;
end;
function v1.SerializeColor3(p8)
	return {
		R = p8.R, 
		G = p8.G, 
		B = p8.B
	};
end;
function v1.SerializeBrickColor(p9)
	local l__Color__7 = p9.Color;
	return {
		R = l__Color__7.R, 
		G = l__Color__7.G, 
		B = l__Color__7.B
	};
end;
function v1.SerializeRect(p10)
	local v8 = {};
	local l__Min__9 = p10.Min;
	v8.RectMin = {
		X = l__Min__9.X, 
		Y = l__Min__9.Y
	};
	local l__Max__10 = p10.Max;
	v8.RectMax = {
		X = l__Max__10.X, 
		Y = l__Max__10.Y
	};
	v8.RectHeight = p10.Height;
	v8.RectWidth = p10.Width;
	return v8;
end;
function v1.SerializePathWaypoint(p11)
	local v11 = {
		WaypointAction = tostring(p11.Action)
	};
	local l__Position__12 = p11.Position;
	v11.WaypointPosition = {
		X = l__Position__12.X, 
		Y = l__Position__12.Y, 
		Z = l__Position__12.Z
	};
	return v11;
end;
function v1.SerializeColorSequenceKeypoint(p12)
	local v13 = {
		ColorTime = p12.Time
	};
	local l__Value__14 = p12.Value;
	v13.ColorValue = {
		R = l__Value__14.R, 
		G = l__Value__14.G, 
		B = l__Value__14.B
	};
	return v13;
end;
local function v15(p13)
	local v16 = {};
	local l__Keypoints__17 = p13.Keypoints;
	local v18 = table.create(#l__Keypoints__17);
	for v19, v20 in ipairs(l__Keypoints__17) do
		local v21 = {
			ColorTime = v20.Time
		};
		local l__Value__22 = v20.Value;
		v21.ColorValue = {
			R = l__Value__22.R, 
			G = l__Value__22.G, 
			B = l__Value__22.B
		};
		v18[v19] = v21;
	end;
	v16.ColorKeypoints = v18;
	return v16;
end;
v1.SerializeColorSequence = v15;
function v1.SerializeNumberSequenceKeypoint(p14)
	return {
		NumberTime = p14.Time, 
		NumberValue = p14.Value
	};
end;
local function v23(p15)
	local v24 = {};
	local l__Keypoints__25 = p15.Keypoints;
	local v26 = table.create(#l__Keypoints__25);
	for v27, v28 in ipairs(l__Keypoints__25) do
		v26[v27] = {
			NumberTime = v28.Time, 
			NumberValue = v28.Value
		};
	end;
	v24.NumberKeypoints = v26;
	return v24;
end;
v1.SerializeNumberSequence = v23;
local l__DestructureMode__1 = _G[script].import(script, script.Parent, "MessageTemplateToken").DestructureMode;
local l__HttpService__2 = game:GetService("HttpService");
function v1.Serialize(p16, p17)
	if p17 == nil then
		p17 = l__DestructureMode__1.Default;
	end;
	if p17 == l__DestructureMode__1.ToString then
		return tostring(p16);
	end;
	if typeof(p16) == "Instance" then
		return p16:GetFullName();
	end;
	if type(p16) == "vector" or typeof(p16) == "Vector3int16" then
		return {
			X = p16.X, 
			Y = p16.Y, 
			Z = p16.Z
		};
	end;
	if typeof(p16) == "Vector2" or typeof(p16) == "Vector2int16" then
		return {
			X = p16.X, 
			Y = p16.Y
		};
	end;
	if typeof(p16) == "DateTime" then
		return v2(p16);
	end;
	if typeof(p16) == "EnumItem" then
		return v3(p16);
	end;
	if typeof(p16) == "NumberRange" then
		return {
			Min = p16.Min, 
			Max = p16.Max
		};
	end;
	if typeof(p16) == "UDim" then
		return {
			Offset = p16.Offset, 
			Scale = p16.Scale
		};
	end;
	if typeof(p16) == "UDim2" then
		local v29 = {};
		local l__X__30 = p16.X;
		v29.X = {
			Offset = l__X__30.Offset, 
			Scale = l__X__30.Scale
		};
		local l__Y__31 = p16.Y;
		v29.Y = {
			Offset = l__Y__31.Offset, 
			Scale = l__Y__31.Scale
		};
		return v29;
	end;
	if typeof(p16) == "Color3" then
		return {
			R = p16.R, 
			G = p16.G, 
			B = p16.B
		};
	end;
	if typeof(p16) == "BrickColor" then
		local l__Color__32 = p16.Color;
		return {
			R = l__Color__32.R, 
			G = l__Color__32.G, 
			B = l__Color__32.B
		};
	end;
	if typeof(p16) == "Rect" then
		local v33 = {};
		local l__Min__34 = p16.Min;
		v33.RectMin = {
			X = l__Min__34.X, 
			Y = l__Min__34.Y
		};
		local l__Max__35 = p16.Max;
		v33.RectMax = {
			X = l__Max__35.X, 
			Y = l__Max__35.Y
		};
		v33.RectHeight = p16.Height;
		v33.RectWidth = p16.Width;
		return v33;
	end;
	if typeof(p16) == "PathWaypoint" then
		local v36 = {
			WaypointAction = tostring(p16.Action)
		};
		local l__Position__37 = p16.Position;
		v36.WaypointPosition = {
			X = l__Position__37.X, 
			Y = l__Position__37.Y, 
			Z = l__Position__37.Z
		};
		return v36;
	end;
	if typeof(p16) == "ColorSequenceKeypoint" then
		local v38 = {
			ColorTime = p16.Time
		};
		local l__Value__39 = p16.Value;
		v38.ColorValue = {
			R = l__Value__39.R, 
			G = l__Value__39.G, 
			B = l__Value__39.B
		};
		return v38;
	end;
	if typeof(p16) == "ColorSequence" then
		return v15(p16);
	end;
	if typeof(p16) == "NumberSequenceKeypoint" then
		return {
			NumberTime = p16.Time, 
			NumberValue = p16.Value
		};
	end;
	if typeof(p16) == "NumberSequence" then
		return v23(p16);
	end;
	if type(p16) == "number" or type(p16) == "string" or type(p16) == "boolean" then
		return p16;
	end;
	if type(p16) == "table" then
		return l__HttpService__2:JSONEncode(p16);
	end;
	if type(p16) == "nil" then
		return nil;
	end;
	error("Destructuring of '" .. typeof(p16) .. "' not supported by Serializer");
end;
return {
	RbxSerializer = v1
};
