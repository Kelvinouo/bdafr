
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
local u1 = require(script.System);
function v1.GetEnabled(p1)
	return u1.contains(p1);
end;
function v1.SetEnabled(p2, p3)
	if p3 then
		u1.add(p2);
		return;
	end;
	u1.remove(p2);
end;
function v1.GetCFrame(p4)
	return p4.cframe;
end;
function v1.SetCFrame(p5, p6)
	p5.cframe = p6;
	p5.changed = true;
end;
function v1.GetRange(p7)
	return p7.cframe.p, p7.cframe * Vector3.new(p7.length, 0, 0);
end;
local u2 = require(script.Util);
function v1.SetRange(p8, p9, p10)
	local v2 = p10 - p9;
	if v2.magnitude < 0.001 then
		v2 = Vector3.new(0, 0, -0.001);
	end;
	p8.length = v2.magnitude;
	p8.cframe = u2.makeOrientation(p9, v2);
	p8.changed = true;
end;
function v1.GetColor(p11)
	return p11.color;
end;
function v1.SetColor(p12, p13)
	p12.color = p13;
end;
function v1.GetTopColor(p14)
	return p14.topColor;
end;
function v1.SetTopColor(p15, p16)
	p15.topColor = p16;
end;
function v1.GetNumArcs(p17)
	return p17.numArcs;
end;
function v1.Destroy(p18)
	u1.remove(p18);
	p18.part:Destroy();
	p18.segmentsFolder:Destroy();
end;
function v1.GetFatnessMultiplier(p19)
	return p19.fatnessMultiplier;
end;
function v1.SetFatnessMultiplier(p20, p21)
	p20.fatnessMultiplier = p21;
end;
local u3 = require(script.Constants);
function v1.new(p22, p23, p24, p25, p26, p27, p28)
	if p22 ~= nil and typeof(p22) ~= "Vector3" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(1, "new", "Vector3", typeof(p22)), 2);
	elseif p23 ~= nil and typeof(p23) ~= "Vector3" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(2, "new", "Vector3", typeof(p23)), 2);
	elseif p24 ~= nil and typeof(p24) ~= "Color3" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(3, "new", "Color3", typeof(p24)), 2);
	elseif p25 ~= nil and typeof(p25) ~= "Color3" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(4, "new", "Color3", typeof(p25)), 2);
	elseif p26 ~= nil and type(p26) ~= "number" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(5, "new", "number", typeof(p26)), 2);
	elseif p26 ~= nil and p26 < 1 then
		error(("bad argument #%d to '%s' (%s)").format("bad argument #%d to '%s' (%s)", 5, "new", "number of arcs should be >= 1"), 2);
	elseif p27 ~= nil and type(p27) ~= "number" then
		error(("bad argument #%d to '%s' (%s expected, got %s)").format("bad argument #%d to '%s' (%s expected, got %s)", 6, "new", "number", typeof(p27)), 2);
	elseif p27 ~= nil and p27 < 0 then
		error(("bad argument #%d to '%s' (%s)").format("bad argument #%d to '%s' (%s)", 6, "new", "multiplier should be >= 0"), 2);
	elseif p28 ~= nil and type(p28) ~= "boolean" then
		error(("bad argument #%d to '%s' (%s expected, got %s)").format("bad argument #%d to '%s' (%s expected, got %s)", 6, "new", "boolean", typeof(p28)), 2);
	end;
	p22 = p22 or Vector3.new();
	p23 = p23 or Vector3.new();
	p24 = p24 or u3.DEFAULT_COLOR;
	p25 = p25 or u3.DEFAULT_TOP_COLOR;
	p26 = p26 or u3.DEFAULT_NUM_ARCS;
	p27 = p27 and 1;
	local v3 = setmetatable({}, v1);
	local v4 = p23 - p22;
	v3.id = u2.getGlobalId();
	v3.cframe = u2.makeOrientation(p22, v4);
	v3.length = v4.magnitude;
	v3.color = p24;
	v3.topColor = p25;
	v3.arc = 1;
	v3.numArcs = p26;
	v3.arcRenderAmount = 0;
	v3.fatnessMultiplier = p27;
	v3.visible = true;
	local v5 = Instance.new("Part");
	v5.Name = u3.PART_NAME_TEMPLATE:format(v3.id);
	v5.Anchored = true;
	v5.CanCollide = false;
	v5.Locked = true;
	v5.Archivable = false;
	v5.Transparency = 1;
	v5.TopSurface = Enum.SurfaceType.Smooth;
	v5.BottomSurface = Enum.SurfaceType.Smooth;
	v5.Size = Vector3.new(0.05, 0.05, 0.05);
	v5.CFrame = v3.cframe;
	v3.part = v5;
	local v6 = Instance.new("Attachment");
	v6.Name = "Emitter";
	v6.CFrame = CFrame.new(v3.length / 2, 0, 0);
	v6.Parent = v5;
	local v7 = Instance.new("PointLight");
	v7.Name = "PointLight";
	v7.Brightness = 5;
	v7.Color = Color3.new(0, 0, 0):lerp(p24, u3.LIGHT_COLOR_MODIFIER);
	v7.Range = 0;
	v7.Shadows = true;
	v7.Enabled = u3.USE_POINTLIGHT;
	v7.Parent = v6;
	v3.segments = {};
	v3.segmentsFolder = Instance.new("Folder");
	v3.segmentsFolder.Name = u3.SEGMENT_FOLDER_NAME_TEMPLATE:format(v3.id);
	for v8 = 1, p26 * u3.SEGMENT_PER_ARC_MAX do
		local v9 = Instance.new("ImageHandleAdornment", v3.segmentsFolder);
		v9.Name = u3.SEGMENT_NAME_TEMPLATE:format(v8);
		v9.Image = u3.ARC_TEXTURE;
		v9.Adornee = v3.part;
		v9.Size = Vector2.new(0, 0);
		v9.ZIndex = 0;
		v3.segments[v8] = v9;
	end;
	v3.step = {};
	v3.amountSegments = {};
	v3.totalSteps = {};
	v3.path = {};
	v3.brightness = {};
	v3.axisKeyPoints0 = {};
	v3.axisKeyPoints1 = {};
	v3.pathT0 = {};
	v3.pathT1 = {};
	for v10 = 1, p26 do
		v3.pathT0[v10] = {};
		v3.pathT1[v10] = {};
		v3.step[v10] = 0;
		v3.amountSegments[v10] = -1;
	end;
	if p28 or p28 == nil and u3.DEFAULT_ENABLED then
		u1.add(v3);
	end;
	return v3;
end;
function v1.link(p29, p30, p31, p32, p33, p34, p35)
	if typeof(p29) ~= "Instance" or not p29:IsA("Attachment") then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(1, "attach", "Attachment", typeof(p29)), 2);
	elseif typeof(p30) ~= "Instance" or not p30:IsA("Attachment") then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(2, "attach", "Attachment", typeof(p30)), 2);
	elseif p31 ~= nil and typeof(p31) ~= "Color3" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(3, "attach", "Color3", typeof(p31)), 2);
	elseif p32 ~= nil and typeof(p32) ~= "Color3" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(4, "attach", "Color3", typeof(p32)), 2);
	elseif p33 ~= nil and type(p33) ~= "number" then
		error(("bad argument #%d to '%s' (%s expected, got %s)"):format(5, "attach", "number", typeof(p33)), 2);
	elseif p33 ~= nil and p33 < 1 then
		error(("bad argument #%d to '%s' (%s)").format("bad argument #%d to '%s' (%s)", 5, "attach", "the number of arcs should be >= 1"), 2);
	elseif p35 ~= nil and type(p35) ~= "boolean" then
		error(("bad argument #%d to '%s' (%s expected, got %s)").format("bad argument #%d to '%s' (%s expected, got %s)", 6, "attach", "boolean", typeof(p35)), 2);
	end;
	local v11 = v1.new(p29.WorldPosition, p30.WorldPosition, p31, p32, p33, p34, false);
	v11.dynamic = true;
	v11.source = p29;
	v11.drain = p30;
	if p35 or p35 == nil and u3.DEFAULT_ENABLED then
		u1.add(v11);
	end;
	return v11;
end;
v1.New = v1.new;
v1.Link = v1.link;
return v1;

