-- Decompiled with the Synapse X Luau decompiler.

local l__Workspace__1 = game:GetService("Workspace");
local u1 = nil;
local l__ServerStorage__2 = game:GetService("ServerStorage");
local l__ServerScriptService__3 = game:GetService("ServerScriptService");
local v2 = {
	errorMessage = "Argument #%d is not serializable. - see http://docs.vorlias.com/rbx-net/docs/2.0/serialization"
};
local l__isMixed__4 = _G[script].import(script, script.Parent, "tables").isMixed;
function v2.check(p1)
	if type(p1) == "function" or type(p1) == "thread" then
		return false;
	end;
	if type(p1) == "table" and getmetatable(p1) ~= nil then
		return false;
	end;
	if type(p1) ~= "table" then
		return true;
	end;
	return not l__isMixed__4(p1);
end;
u1 = v2;
return {
	validateArguments = function(...)
		local v3, v4, v5 = ipairs({ ... });
		while true do
			local v6, v7 = v3(v4, v5);
			if not v6 then
				break;
			end;
			if not u1.check(v7) then
				error(string.format(u1.errorMessage, v6), 2);
			end;
			if typeof(v7) == "Instance" then
				if v7:IsDescendantOf(l__ServerStorage__2) or v7:IsDescendantOf(l__ServerScriptService__3) then
					error("[rbx-net] Instance at argument #" .. tostring(v6) .. " is inside a server-only container and cannot be sent via remotes.");
				end;
				if not v7:IsDescendantOf(game) then
					error("[rbx-net] Instance at argument #" .. tostring(v6) .. " is not a valid descendant of game, and wont replicate");
				end;
			end;		
		end;
	end, 
	oneOf = function(...)
		local v8 = { ... };
		local v9 = {
			errorMessage = "Expected one of: " .. table.concat(v8, ", ")
		};
		function v9.check(p2)
			if type(p2) ~= "string" then
				return false;
			end;
			for v10, v11 in ipairs(v8) do
				if p2 == v11 then
					return true;
				end;
			end;
			return false;
		end;
		return v9;
	end, 
	isSerializable = u1
};
