-- Script Hash: 591a8b36c651f43f5f69ea39e96305219b598978533d08f8eeb97e3cb5356dd36832a92aa45ec9553ebca0a42da8a123
-- Decompiled with the Synapse X Luau decompiler.

local l__HttpService__1 = game:GetService("HttpService");
local l__RunService__2 = game:GetService("RunService");
local v3 = setmetatable({}, {
	__tostring = function()
		return "NetMiddlewareEvent";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
function v3.constructor(p1, p2)
	p1.netInstance = p2;
end;
function v3.GetInstance(p3)
	return p3.netInstance:GetInstance();
end;
local v5 = {};
local function v6(p4, p5)
	local v7 = p4:FindFirstChild(p5);
	if v7 then
		return v7;
	end;
	local v8 = Instance.new("Folder", p4);
	v8.Name = p5;
	return v8;
end;
local u1 = {};
local u2 = _G[script];
local u3 = nil;
local l__CollectionService__4 = game:GetService("CollectionService");
u3 = function(p6, p7)
	if p6 == "AsyncRemoteFunction" then
		local v9 = l__CollectionService__4:GetTagged("NetManagedAsyncFunction");
		local function v10(p8)
			return p8.Name == p7;
		end;
		for v11, v12 in ipairs(v9) do
			if v10(v12, v11 - 1, v9) == true then
				return v12;
			end;
		end;
		return nil;
	end;
	if p6 == "RemoteEvent" then
		local v13 = l__CollectionService__4:GetTagged("NetManagedEvent");
		local function v14(p9)
			return p9.Name == p7;
		end;
		for v15, v16 in ipairs(v13) do
			if v14(v16, v15 - 1, v13) == true then
				return v16;
			end;
		end;
		return nil;
	end;
	if p6 ~= "RemoteFunction" then
		error("Invalid Remote Access");
		return;
	end;
	local v17 = l__CollectionService__4:GetTagged("NetManagedLegacyFunction");
	local function v18(p10)
		return p10.Name == p7;
	end;
	for v19, v20 in ipairs(v17) do
		if v18(v20, v19 - 1, v17) == true then
			return v20;
		end;
	end;
	return nil;
end;
local function u5(p11)
	local v21 = debug.traceback();
	if u1[v21] ~= nil then
		return nil;
	end;
	u1[v21] = true;
	warn("[rbx-net] " .. p11);
end;
local u6 = not l__RunService__2:IsRunning() or l__RunService__2:IsServer();
local u7 = v6(script.Parent, "_NetManaged");
if u6 then
	game:GetService("RunService").Stepped:Connect(function(p12, p13)
		for v22, v23 in ipairs(v5) do
			v23();
		end;
	end);
end;
return {
	getGlobalRemote = function(p14)
		return ":\\" .. p14;
	end, 
	isLuaTable = function(p15)
		return type(p15) == "table";
	end, 
	findOrCreateFolder = v6, 
	errorft = function(p16, p17)
		p16 = string.gsub(p16, "{([%w_][%w%d_]*)}", function(p18)
			local v24 = p17[p18];
			if v24 == nil then
				v24 = p18;
			end;
			return v24;
		end);
		error(p16, 2);
	end, 
	warnOnce = u5, 
	format = function(p19, p20)
		p19 = string.gsub(p19, "{([%w_][%w%d_]*)}", function(p21)
			local v25 = p20[p21];
			if v25 == nil then
				v25 = p21;
			end;
			return v25;
		end);
		return p19;
	end, 
	waitForRemote = function(p22, p23, p24)
		return u2.Promise.defer(function(p25, p26)
			local v26 = nil;
			local v27 = 0;
			while true do
				v27 = v27 + l__RunService__2.Heartbeat:Wait();
				v26 = u3(p22, p23);
				if not (v27 < p24) then
					break;
				end;
				if v26 then
					break;
				end;			
			end;
			if v26 then
				p25(v26);
				return;
			end;
			p26("Timed out while waiting for " .. p22 .. " '" .. p23 .. "' after " .. tostring(p24) .. " seconds.");
		end);
	end, 
	findRemote = u3, 
	getRemoteOrThrow = function(p27, p28)
		local v28 = u3(p27, p28);
		if v28 then
			return v28;
		end;
		error("Could not find Remote of type " .. p27 .. " called \"" .. p28 .. "\"");
	end, 
	findOrCreateRemote = function(p29, p30, p31)
		local v29 = u3(p29, p30);
		if v29 then
			if l__CollectionService__4:HasTag(v29, "NetDefinitionManaged") then
				u5("Fetching " .. p29 .. " '" .. p30 .. "', which is a DefinitionsManaged instance from a non-definitions context. This is considered unsafe.");
			end;
			return v29;
		end;
		if not u6 then
			error("Creation of Events or Functions must be done on server!");
		end;
		local v30 = nil;
		if p29 == "RemoteEvent" then
			v30 = Instance.new("RemoteEvent");
			l__CollectionService__4:AddTag(v30, "NetManagedEvent");
		elseif p29 == "AsyncRemoteFunction" then
			v30 = Instance.new("RemoteEvent");
			l__CollectionService__4:AddTag(v30, "NetManagedAsyncFunction");
		elseif p29 == "RemoteFunction" then
			v30 = Instance.new("RemoteFunction");
			l__CollectionService__4:AddTag(v30, "NetManagedLegacyFunction");
		else
			error("Invalid Remote Type: " .. p29);
		end;
		v30.Name = p30;
		v30.Parent = u7;
		if p31 ~= nil then
			p31(v30);
		end;
		return v30;
	end, 
	checkArguments = function(p32, p33)
		if p33 == nil then
			warn("[net-types] Argument length is zero");
			return false;
		end;
		local v31 = 0;
		local v32 = false;
		while true do
			if v32 then
				v31 = v31 + 1;
			else
				v32 = true;
			end;
			if not (v31 < #p32) then
				break;
			end;
			if not p32[v31 + 1](p33[v31 + 1]) then
				warn("[net-types] Argument at index " .. tostring(v31) .. " was invalid type.");
				return false;
			end;		
		end;
		return true;
	end, 
	IS_SERVER = u6, 
	IS_CLIENT = l__RunService__2:IsRunning() and l__RunService__2:IsClient(), 
	IS_RUNNING = l__RunService__2:IsRunning(), 
	MAX_CLIENT_WAITFORCHILD_TIMEOUT = 10, 
	NetMiddlewareEvent = v3, 
	ServerTickFunctions = v5
};
