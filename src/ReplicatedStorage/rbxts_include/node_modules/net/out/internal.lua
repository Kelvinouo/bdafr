-- Decompiled with the Synapse X Luau decompiler.

local l__HttpService__1 = game:GetService("HttpService");
local l__RunService__2 = game:GetService("RunService");
local v3 = setmetatable({}, {
	__tostring = function()
		return "NetMiddlewareEvent";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
function v3.constructor(p1, p2)
	p1.netInstance = p2;
end;
function v3.GetInstance(p3)
	return p3.netInstance:GetInstance();
end;
local v5 = {};
local l__Parent__6 = script.Parent;
local l___NetManaged__7 = l__Parent__6:FindFirstChild("_NetManaged");
if l___NetManaged__7 then
	local v8 = l___NetManaged__7;
else
	local v9 = Instance.new("Folder", l__Parent__6);
	v9.Name = "_NetManaged";
	v8 = v9;
end;
local u1 = {};
local u2 = _G[script];
local u3 = nil;
local l__CollectionService__4 = game:GetService("CollectionService");
u3 = function(p4, p5)
	if p4 == "AsyncRemoteFunction" then
		local v10, v11, v12 = ipairs((l__CollectionService__4:GetTagged("NetManagedAsyncFunction")));
		while true do
			v10(v11, v12);
			if not v10 then
				break;
			end;
			v12 = v10;
			if v11.Name == p5 == true then
				return v11;
			end;		
		end;
		return nil;
	end;
	if p4 == "RemoteEvent" then
		local v13, v14, v15 = ipairs((l__CollectionService__4:GetTagged("NetManagedEvent")));
		while true do
			v13(v14, v15);
			if not v13 then
				break;
			end;
			v15 = v13;
			if v14.Name == p5 == true then
				return v14;
			end;		
		end;
		return nil;
	end;
	if p4 ~= "RemoteFunction" then
		error("Invalid Remote Access");
		return;
	end;
	local v16, v17, v18 = ipairs((l__CollectionService__4:GetTagged("NetManagedLegacyFunction")));
	while true do
		v16(v17, v18);
		if not v16 then
			break;
		end;
		v18 = v16;
		if v17.Name == p5 == true then
			return v17;
		end;	
	end;
	return nil;
end;
local u5 = not l__RunService__2:IsRunning() or l__RunService__2:IsServer();
if u5 then
	game:GetService("RunService").Stepped:Connect(function(p6, p7)
		local v19, v20, v21 = ipairs(v5);
		while true do
			v19(v20, v21);
			if not v19 then
				break;
			end;
			v21 = v19;
			v20();		
		end;
	end);
end;
return {
	getGlobalRemote = function(p8)
		return ":\\" .. p8;
	end, 
	isLuaTable = function(p9)
		return type(p9) == "table";
	end, 
	findOrCreateFolder = function(p10, p11)
		local v22 = p10:FindFirstChild(p11);
		if v22 then
			return v22;
		end;
		local v23 = Instance.new("Folder", p10);
		v23.Name = p11;
		return v23;
	end, 
	errorft = function(p12, p13)
		p12 = string.gsub(p12, "{([%w_][%w%d_]*)}", function(p14)
			local v24 = p13[p14];
			if v24 == nil then
				v24 = p14;
			end;
			return v24;
		end);
		error(p12, 2);
	end, 
	warnOnce = function(p15)
		local v25 = debug.traceback();
		if u1[v25] ~= nil then
			return nil;
		end;
		u1[v25] = true;
		warn("[rbx-net] " .. p15);
	end, 
	format = function(p16, p17)
		p16 = string.gsub(p16, "{([%w_][%w%d_]*)}", function(p18)
			local v26 = p17[p18];
			if v26 == nil then
				v26 = p18;
			end;
			return v26;
		end);
		return p16;
	end, 
	waitForRemote = function(p19, p20, p21)
		return u2.Promise.defer(function(p22, p23)
			local v27 = nil;
			local v28 = 0;
			while true do
				v28 = v28 + l__RunService__2.Heartbeat:Wait();
				v27 = u3(p19, p20);
				if not (v28 < p21) then
					break;
				end;
				if v27 then
					break;
				end;			
			end;
			if v27 then
				p22(v27);
				return;
			end;
			p23("Timed out while waiting for " .. p19 .. " '" .. p20 .. "' after " .. tostring(p21) .. " seconds.");
		end);
	end, 
	findRemote = u3, 
	getRemoteOrThrow = function(p24, p25)
		local v29 = u3(p24, p25);
		if v29 then
			return v29;
		end;
		error("Could not find Remote of type " .. p24 .. " called \"" .. p25 .. "\"");
	end, 
	findOrCreateRemote = function(p26, p27, p28)
		local v30 = u3(p26, p27);
		if v30 then
			local v31 = nil;
			if l__CollectionService__4:HasTag(v30, "NetDefinitionManaged") then
				local v32 = debug.traceback();
				if u1[v32] ~= nil then
					return v30;
				else
					u1[v32] = true;
					warn("[rbx-net] " .. "Fetching " .. p26 .. " '" .. p27 .. "', which is a DefinitionsManaged instance from a non-definitions context. This is considered unsafe.");
					v31 = v30;
					return v31;
				end;
			else
				v31 = v30;
				return v31;
			end;
		end;
		if not u5 then
			error("Creation of Events or Functions must be done on server!");
		end;
		local v33 = nil;
		if p26 == "RemoteEvent" then
			v33 = Instance.new("RemoteEvent");
			l__CollectionService__4:AddTag(v33, "NetManagedEvent");
		elseif p26 == "AsyncRemoteFunction" then
			v33 = Instance.new("RemoteEvent");
			l__CollectionService__4:AddTag(v33, "NetManagedAsyncFunction");
		elseif p26 == "RemoteFunction" then
			v33 = Instance.new("RemoteFunction");
			l__CollectionService__4:AddTag(v33, "NetManagedLegacyFunction");
		else
			error("Invalid Remote Type: " .. p26);
		end;
		v33.Name = p27;
		v33.Parent = v8;
		if p28 ~= nil then
			p28(v33);
		end;
		return v33;
	end, 
	checkArguments = function(p29, p30)
		if p30 == nil then
			warn("[net-types] Argument length is zero");
			return false;
		end;
		local v34 = 0;
		local v35 = false;
		while true do
			if v35 then
				v34 = v34 + 1;
			else
				v35 = true;
			end;
			if not (v34 < #p29) then
				break;
			end;
			if not p29[v34 + 1](p30[v34 + 1]) then
				warn("[net-types] Argument at index " .. tostring(v34) .. " was invalid type.");
				return false;
			end;		
		end;
		return true;
	end, 
	IS_SERVER = u5, 
	IS_CLIENT = l__RunService__2:IsRunning() and l__RunService__2:IsClient(), 
	IS_RUNNING = l__RunService__2:IsRunning(), 
	MAX_CLIENT_WAITFORCHILD_TIMEOUT = 10, 
	NetMiddlewareEvent = v3, 
	ServerTickFunctions = v5
};
