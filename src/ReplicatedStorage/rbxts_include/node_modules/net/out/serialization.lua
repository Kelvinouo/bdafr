
-- Decompiled with the Synapse X Luau decompiler.

local u1 = {
	Serialize = function(p1)
		if type(p1) == "number" or type(p1) == "string" or type(p1) == "boolean" then
			return p1;
		end;
		if type(p1) ~= "table" then
			error("Cannot serialize type: " .. type(p1), 2);
		end;
		if p1.Serialize ~= nil then
			return p1:Serialize();
		end;
		local v1 = {};
		for v2, v3 in pairs(p1) do
			if type(v3) == "table" then
				v1[v2] = u1.Serialize(v3);
			else
				v1[v2] = v3;
			end;
		end;
		return v1;
	end
};
local function u2(p2)
	assert(type(p2) == "table");
	local v4 = false;
	local v5 = nil;
	local l__next__6 = next;
	local v7 = nil;
	while true do
		local v8, v9 = l__next__6(p2, v7);
		if not v8 then
			break;
		end;
		if v5 and v5 ~= type(v8) then
			return true;
		end;
		v5 = type(v8);
		if type(v9) == "table" then
			v4 = v4 and (u2(v9) and not (not getmetatable(v9)));
		end;	
	end;
	return v4;
end;
function u1.IsSerializable(p3)
	local v10 = type(p3);
	if v10 == "number" or v10 == "boolean" or v10 == "string" then
		return true;
	end;
	if v10 ~= "table" then
		if v10 == "userdata" and typeof(v10) ~= "userdata" then
			return true;
		else
			return false;
		end;
	end;
	return not u2(p3) and not getmetatable(p3);
end;
function u1.Deserialize(p4, p5)
	assert(type(p4) == "table");
	if not p5 or type(p5) ~= "table" or not p5.deserialize then
		return;
	end;
	return p5:deserialize(p4);
end;
return u1;

