
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "internal");
local l__default__3 = v1.import(script, script.Parent, "MiddlewareFunction").default;
local v4 = setmetatable({}, {
	__tostring = function()
		return "ServerFunction";
	end, 
	__index = l__default__3
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = l__default__3;
local l__findOrCreateRemote__2 = v2.findOrCreateRemote;
local l__IS_SERVER__3 = v2.IS_SERVER;
function v4.constructor(p1, p2, p3)
	if p3 == nil then
		p3 = {};
	end;
	u1.constructor(p1, p3);
	p1.instance = l__findOrCreateRemote__2("RemoteFunction", p2, function(p4)
		p4.OnServerInvoke = v4.DefaultFunctionHook;
	end);
	assert(l__IS_SERVER__3, "Cannot create a Net.ServerFunction on the Client!");
end;
function v4.GetInstance(p5)
	return p5.instance;
end;
function v4.SetCallback(p6, p7)
	p6.instance.OnServerInvoke = function(p8, ...)
		local v6 = p6:_processMiddleware(p7);
		if v6 ~= nil then
			v6 = v6(p8, unpack({ ... }));
		end;
		if v1.Promise.is(v6) then
			local v7 = nil;
			warn("[rbx-net] WARNING: Promises should be used with an AsyncFunction!");
			local v8 = nil;
			v8, v7 = v6:await();
			if v8 then
				return v7;
			end;
			error(v7);
		end;
		return v6;
	end;
end;
function v4.DefaultFunctionHook()
	return nil;
end;
u1 = {
	default = v4
};
return l__default__3;

