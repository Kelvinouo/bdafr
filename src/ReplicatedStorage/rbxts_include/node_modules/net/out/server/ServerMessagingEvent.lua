-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "messaging", "MessagingEvent");
local v3 = v1.import(script, script.Parent.Parent, "internal");
local l__isSubscriptionMessage__1 = v2.isSubscriptionMessage;
local l__isLuaTable__2 = v3.isLuaTable;
local v4 = setmetatable({}, {
	__tostring = function()
		return "ServerMessagingEvent";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local l__default__3 = v1.import(script, script.Parent, "ServerEvent").default;
local l__getGlobalRemote__4 = v3.getGlobalRemote;
local l__default__5 = v2.default;
local l__IS_CLIENT__6 = v3.IS_CLIENT;
function v4.constructor(p1, p2)
	p1.instance = l__default__3.new(l__getGlobalRemote__4(p2));
	p1.event = l__default__5.new(p2);
	assert(not l__IS_CLIENT__6, "Cannot create a Net.GlobalServerEvent on the Client!");
	p1.eventHandler = p1.event:Connect(function(p3)
		if l__isSubscriptionMessage__1(p3) and l__isLuaTable__2(p3.Data) then
			local v6 = p3.Data.InnerData ~= nil;
		else
			v6 = false;
		end;
		if not v6 then
			warn("[rbx-net] Recieved malformed message for ServerGameEvent: " .. p2);
			return;
		end;
		p1:recievedMessage(p3.Data);
	end);
end;
local l__Players__7 = game:GetService("Players");
function v4.getPlayersMatchingId(p4, p5)
	if type(p5) == "number" then
		return l__Players__7:GetPlayerByUserId(p5);
	end;
	local v7 = {};
	local v8, v9, v10 = ipairs(p5);
	while true do
		v8(v9, v10);
		if not v8 then
			break;
		end;
		v10 = v8;
		local v11 = l__Players__7:GetPlayerByUserId(v9);
		if v11 then
			v7[#v7 + 1] = v11;
		end;	
	end;
	return v7;
end;
function v4.recievedMessage(p6, p7)
	local v12 = nil;
	if p7.TargetIds then
		local v13 = p6:getPlayersMatchingId(p7.TargetIds);
		if v13 then
			p6.instance:SendToPlayers(v13, unpack(p7.InnerData));
			return;
		else
			return;
		end;
	elseif p7.TargetId ~= nil then
		v12 = p6:getPlayersMatchingId(p7.TargetId);
		if not v12 then
			return;
		end;
	else
		p6.instance:SendToAllPlayers(unpack(p7.InnerData));
		return;
	end;
	p6.instance:SendToPlayer(v12, unpack(p7.InnerData));
end;
function v4.Disconnect(p8)
	p8.eventHandler:Disconnect();
end;
function v4.SendToAllServers(p9, ...)
	local v14 = { ... };
	local v15 = {};
	local v16 = {};
	table.move(v14, 1, #v14, #v16 + 1, v16);
	v15.data = v16;
	p9.event:SendToAllServers(v15);
end;
function v4.SendToServer(p10, p11, ...)
	local v17 = { ... };
	local v18 = {};
	local v19 = {};
	table.move(v17, 1, #v17, #v19 + 1, v19);
	v18.data = v19;
	p10.event:SendToServer(p11, v18);
end;
function v4.SendToPlayer(p12, p13, ...)
	local v20 = { ... };
	local v21 = l__Players__7:GetPlayerByUserId(p13);
	if v21 then
		p12.instance:SendToPlayer(v21, unpack(v20));
		return;
	end;
	local v22 = {};
	local v23 = {};
	table.move(v20, 1, #v20, #v23 + 1, v23);
	v22.data = v23;
	v22.targetId = p13;
	p12.event:SendToAllServers(v22);
end;
function v4.SendToPlayers(p14, p15, ...)
	local v24 = { ... };
	local v25, v26, v27 = ipairs(p15);
	while true do
		v25(v26, v27);
		if not v25 then
			break;
		end;
		v27 = v25;
		local v28 = l__Players__7:GetPlayerByUserId(v26);
		if v28 then
			p14.instance:SendToPlayer(v28, unpack(v24));
			table.remove(p15, v26 + 1);
		end;	
	end;
	if #p15 > 0 then
		local v29 = {};
		local v30 = {};
		table.move(v24, 1, #v24, #v30 + 1, v30);
		v29.data = v30;
		v29.targetIds = p15;
		p14.event:SendToAllServers(v29);
	end;
end;
return {
	default = v4
};
