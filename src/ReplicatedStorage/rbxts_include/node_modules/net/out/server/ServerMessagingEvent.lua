
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "messaging", "MessagingEvent");
local v3 = v1.import(script, script.Parent.Parent, "internal");
local l__isSubscriptionMessage__1 = v2.isSubscriptionMessage;
local l__isLuaTable__2 = v3.isLuaTable;
local v4 = setmetatable({}, {
	__tostring = function()
		return "ServerMessagingEvent";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local l__default__3 = v1.import(script, script.Parent, "ServerEvent").default;
local l__getGlobalRemote__4 = v3.getGlobalRemote;
local l__default__5 = v2.default;
local l__IS_CLIENT__6 = v3.IS_CLIENT;
local function u7(p1)
	if not l__isSubscriptionMessage__1(p1) or not l__isLuaTable__2(p1.Data) then
		return false;
	end;
	return p1.Data.InnerData ~= nil;
end;
function v4.constructor(p2, p3)
	p2.instance = l__default__3.new(l__getGlobalRemote__4(p3));
	p2.event = l__default__5.new(p3);
	assert(not l__IS_CLIENT__6, "Cannot create a Net.GlobalServerEvent on the Client!");
	p2.eventHandler = p2.event:Connect(function(p4)
		if not u7(p4) then
			warn("[rbx-net] Recieved malformed message for ServerGameEvent: " .. p3);
			return;
		end;
		p2:recievedMessage(p4.Data);
	end);
end;
local l__Players__8 = game:GetService("Players");
function v4.getPlayersMatchingId(p5, p6)
	if type(p6) == "number" then
		return l__Players__8:GetPlayerByUserId(p6);
	end;
	local v6 = {};
	for v7, v8 in ipairs(p6) do
		local v9 = l__Players__8:GetPlayerByUserId(v8);
		if v9 then
			v6[#v6 + 1] = v9;
		end;
	end;
	return v6;
end;
function v4.recievedMessage(p7, p8)
	local v10 = nil;
	if p8.TargetIds then
		local v11 = p7:getPlayersMatchingId(p8.TargetIds);
		if v11 then
			p7.instance:SendToPlayers(v11, unpack(p8.InnerData));
			return;
		else
			return;
		end;
	elseif p8.TargetId ~= nil then
		v10 = p7:getPlayersMatchingId(p8.TargetId);
		if not v10 then
			return;
		end;
	else
		p7.instance:SendToAllPlayers(unpack(p8.InnerData));
		return;
	end;
	p7.instance:SendToPlayer(v10, unpack(p8.InnerData));
end;
function v4.Disconnect(p9)
	p9.eventHandler:Disconnect();
end;
function v4.SendToAllServers(p10, ...)
	local v12 = { ... };
	local v13 = {};
	local v14 = {};
	table.move(v12, 1, #v12, #v14 + 1, v14);
	v13.data = v14;
	p10.event:SendToAllServers(v13);
end;
function v4.SendToServer(p11, p12, ...)
	local v15 = { ... };
	local v16 = {};
	local v17 = {};
	table.move(v15, 1, #v15, #v17 + 1, v17);
	v16.data = v17;
	p11.event:SendToServer(p12, v16);
end;
function v4.SendToPlayer(p13, p14, ...)
	local v18 = { ... };
	local v19 = l__Players__8:GetPlayerByUserId(p14);
	if v19 then
		p13.instance:SendToPlayer(v19, unpack(v18));
		return;
	end;
	local v20 = {};
	local v21 = {};
	table.move(v18, 1, #v18, #v21 + 1, v21);
	v20.data = v21;
	v20.targetId = p14;
	p13.event:SendToAllServers(v20);
end;
function v4.SendToPlayers(p15, p16, ...)
	local v22 = { ... };
	for v23, v24 in ipairs(p16) do
		local v25 = l__Players__8:GetPlayerByUserId(v24);
		if v25 then
			p15.instance:SendToPlayer(v25, unpack(v22));
			table.remove(p16, v24 + 1);
		end;
	end;
	if #p16 > 0 then
		local v26 = {};
		local v27 = {};
		table.move(v22, 1, #v22, #v27 + 1, v27);
		v26.data = v27;
		v26.targetIds = p16;
		p15.event:SendToAllServers(v26);
	end;
end;
return {
	default = v4
};

