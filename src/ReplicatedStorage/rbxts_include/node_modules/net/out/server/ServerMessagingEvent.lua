-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "messaging", "MessagingEvent");
local v3 = v1.import(script, script.Parent.Parent, "internal");
local l__isSubscriptionMessage__1 = v2.isSubscriptionMessage;
local l__isLuaTable__2 = v3.isLuaTable;
local v4 = setmetatable({}, {
	__tostring = function()
		return "ServerMessagingEvent";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local l__default__3 = v1.import(script, script.Parent, "ServerEvent").default;
local l__getGlobalRemote__4 = v3.getGlobalRemote;
local l__default__5 = v2.default;
local l__IS_CLIENT__6 = v3.IS_CLIENT;
function v4.constructor(p1, p2)
	p1.instance = l__default__3.new(l__getGlobalRemote__4(p2));
	p1.event = l__default__5.new(p2);
	assert(not l__IS_CLIENT__6, "Cannot create a Net.GlobalServerEvent on the Client!");
	p1.eventHandler = p1.event:Connect(function(p3)
		if l__isSubscriptionMessage__1(p3) and l__isLuaTable__2(p3.Data) then
			local v6 = p3.Data.InnerData ~= nil;
		else
			v6 = false;
		end;
		if not v6 then
			warn("[rbx-net] Recieved malformed message for ServerGameEvent: " .. p2);
			return;
		end;
		p1:recievedMessage(p3.Data);
	end);
end;
local l__Players__7 = game:GetService("Players");
function v4.getPlayersMatchingId(p4, p5)
	if type(p5) == "number" then
		return l__Players__7:GetPlayerByUserId(p5);
	end;
	local v7 = {};
	for v8, v9 in ipairs(p5) do
		local v10 = l__Players__7:GetPlayerByUserId(v9);
		if v10 then
			v7[#v7 + 1] = v10;
		end;
	end;
	return v7;
end;
function v4.recievedMessage(p6, p7)
	local v11 = nil;
	if p7.TargetIds then
		local v12 = p6:getPlayersMatchingId(p7.TargetIds);
		if v12 then
			p6.instance:SendToPlayers(v12, unpack(p7.InnerData));
			return;
		else
			return;
		end;
	elseif p7.TargetId ~= nil then
		v11 = p6:getPlayersMatchingId(p7.TargetId);
		if not v11 then
			return;
		end;
	else
		p6.instance:SendToAllPlayers(unpack(p7.InnerData));
		return;
	end;
	p6.instance:SendToPlayer(v11, unpack(p7.InnerData));
end;
function v4.Disconnect(p8)
	p8.eventHandler:Disconnect();
end;
function v4.SendToAllServers(p9, ...)
	local v13 = { ... };
	local v14 = {};
	local v15 = {};
	table.move(v13, 1, #v13, #v15 + 1, v15);
	v14.data = v15;
	p9.event:SendToAllServers(v14);
end;
function v4.SendToServer(p10, p11, ...)
	local v16 = { ... };
	local v17 = {};
	local v18 = {};
	table.move(v16, 1, #v16, #v18 + 1, v18);
	v17.data = v18;
	p10.event:SendToServer(p11, v17);
end;
function v4.SendToPlayer(p12, p13, ...)
	local v19 = { ... };
	local v20 = l__Players__7:GetPlayerByUserId(p13);
	if v20 then
		p12.instance:SendToPlayer(v20, unpack(v19));
		return;
	end;
	local v21 = {};
	local v22 = {};
	table.move(v19, 1, #v19, #v22 + 1, v22);
	v21.data = v22;
	v21.targetId = p13;
	p12.event:SendToAllServers(v21);
end;
function v4.SendToPlayers(p14, p15, ...)
	local v23 = { ... };
	for v24, v25 in ipairs(p15) do
		local v26 = l__Players__7:GetPlayerByUserId(v25);
		if v26 then
			p14.instance:SendToPlayer(v26, unpack(v23));
			table.remove(p15, v25 + 1);
		end;
	end;
	if #p15 > 0 then
		local v27 = {};
		local v28 = {};
		table.move(v23, 1, #v23, #v28 + 1, v28);
		v27.data = v28;
		v27.targetIds = p15;
		p14.event:SendToAllServers(v27);
	end;
end;
return {
	default = v4
};
