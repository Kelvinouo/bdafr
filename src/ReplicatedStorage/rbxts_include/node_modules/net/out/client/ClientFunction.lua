-- Script Hash: 67cd0c4b91fce0f037f24cbc619db17f56ed5061451c303a861864088a66d0a7fb4c1df86afc58da6b307f3ac6631040
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "internal");
local v3 = setmetatable({}, {
	__tostring = function()
		return "ClientFunction";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__getRemoteOrThrow__1 = v2.getRemoteOrThrow;
local l__IS_SERVER__2 = v2.IS_SERVER;
function v3.constructor(p1, p2)
	p1.instance = l__getRemoteOrThrow__1("RemoteFunction", p2);
	assert(not l__IS_SERVER__2, "Cannot create a Net.ClientFunction on the Server!");
end;
local l__waitForRemote__3 = v2.waitForRemote;
function v3.Wait(p3, p4)
	return v1.Promise.defer(v1.async(function(p5)
		v1.await(l__waitForRemote__3("RemoteFunction", p4, 60));
		p5(v3.new(p4));
	end));
end;
function v3.CallServer(p6, ...)
	return p6.instance:InvokeServer(unpack({ ... }));
end;
v3.CallServerAsync = v1.async(function(p7, ...)
	local u4 = { ... };
	return v1.Promise.defer(function(p8)
		p8((p7.instance:InvokeServer(unpack(u4))));
	end);
end);
return {
	default = v3
};
