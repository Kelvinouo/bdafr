-- Script Hash: 801bc69e7ac66ce22d99bb61ba258d8ba1573ac7ad2acdf794342a62eef357df9b8a31d29c0f574304cea45c41196c43
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "configuration");
local v3 = v1.import(script, script.Parent.Parent, "internal");
local v4 = setmetatable({}, {
	__tostring = function()
		return "ClientAsyncFunction";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local l__getRemoteOrThrow__1 = v3.getRemoteOrThrow;
local l__IS_SERVER__2 = v3.IS_SERVER;
function v4.constructor(p1, p2)
	p1.timeout = 10;
	p1.listeners = {};
	p1.instance = l__getRemoteOrThrow__1("AsyncRemoteFunction", p2);
	assert(not l__IS_SERVER__2, "Cannot create a Net.ClientAsyncFunction on the Server!");
end;
local l__waitForRemote__3 = v3.waitForRemote;
function v4.Wait(p3, p4)
	return v1.Promise.defer(v1.async(function(p5)
		v1.await(l__waitForRemote__3("AsyncRemoteFunction", p4, 60));
		p5(v4.new(p4));
	end));
end;
function v4.SetCallTimeout(p6, p7)
	assert(p7 > 0, "timeout must be a positive number");
	p6.timeout = p7;
end;
function v4.GetCallTimeout(p8)
	return p8.timeout;
end;
function v4.SetCallback(p9, p10)
	if p9.connector then
		p9.connector:Disconnect();
		p9.connector = nil;
	end;
	p9.connector = p9.instance.OnClientEvent:Connect(v1.async(function(...)
		local v6 = nil;
		local v7 = { ... };
		local v8 = v7[1];
		v6 = v7[2];
		if type(v8) ~= "string" or type(v6) ~= "table" then
			warn("Recieved message without eventId");
			return;
		end;
		local v9 = p10(unpack(v6));
		if not v1.Promise.is(v9) then
			p9.instance:FireServer(v8, v9);
			return;
		end;
		v9:andThen(function(p11)
			p9.instance:FireServer(v8, p11);
		end):catch(function(p12)
			warn("[rbx-net] Failed to send response to server: " .. p12);
		end);
	end));
end;
local l__HttpService__4 = game:GetService("HttpService");
local l__DebugLog__5 = v2.DebugLog;
local l__RunService__6 = game:GetService("RunService");
local l__DebugWarn__7 = v2.DebugWarn;
v4.CallServerAsync = v1.async(function(p13, ...)
	local v10 = l__HttpService__4:GenerateGUID(false);
	local v11 = {};
	for v12, v13 in pairs({ ... }) do
		v11[v12] = v13;
	end;
	p13.instance:FireServer(v10, v11);
	return v1.Promise.new(function(p14, p15)
		local v14 = tick();
		l__DebugLog__5("Connected CallServerAsync EventId", v10);
		local u8 = nil;
		u8 = p13.instance.OnClientEvent:Connect(function(...)
			local v15 = { ... };
			local v16 = v15[1];
			local v17 = v15[2];
			if type(v16) == "string" and v17 ~= nil and v16 == v10 then
				l__DebugLog__5("Disconnected CallServerAsync EventId", v16);
				u8:Disconnect();
				p14(v17);
			end;
		end);
		p13.listeners[v10] = {
			connection = u8, 
			timeout = p13.timeout
		};
		while true do
			l__RunService__6.Heartbeat:Wait();
			if not u8.Connected then
				break;
			end;
			if not (tick() < v14 + p13.timeout) then
				break;
			end;		
		end;
		p13.listeners[v10] = nil;
		if v14 <= tick() and u8.Connected then
			l__DebugWarn__7("(timeout) Disconnected CallServerAsync EventId", v10);
			u8:Disconnect();
			p15("Request to server timed out after " .. tostring(p13.timeout) .. " seconds");
		end;
	end);
end);
return {
	default = v4
};
