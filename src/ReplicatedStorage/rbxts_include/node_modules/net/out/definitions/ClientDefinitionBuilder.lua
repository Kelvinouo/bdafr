-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "ClientDefinitionBuilder";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
local u1 = setmetatable({}, {
	__mode = "k"
});
function v2.constructor(p1, p2, p3)
	if p3 == nil then
		p3 = "";
	end;
	p1.namespace = p3;
	u1[p1] = p2;
end;
function v2.toString(p4)
	return "[ClientDefinitionBuilder]";
end;
function v2.Get(p5, p6)
	return p5:WaitFor(p6):expect();
end;
function v2.GetNamespace(p7, p8)
	local v4 = u1[p7][p8];
	assert(v4.Type == "Namespace");
	if p7.namespace ~= "" then
		local v5 = table.concat({ p7.namespace, p8 }, ":") or p8;
	else
		v5 = p8;
	end;
	return v4.Definitions:_buildClientDefinition(v5);
end;
local l__default__2 = v1.import(script, script.Parent.Parent, "client", "ClientFunction").default;
local l__default__3 = v1.import(script, script.Parent.Parent, "client", "ClientEvent").default;
local l__default__4 = v1.import(script, script.Parent.Parent, "client", "ClientAsyncFunction").default;
v2.WaitFor = v1.async(function(p9, p10)
	local v6 = u1[p9][p10];
	if p9.namespace ~= "" then
		local v7 = table.concat({ p9.namespace, p10 }, ":") or p10;
	else
		v7 = p10;
	end;
	p10 = v7;
	assert(v6 and v6.Type, "'" .. p10 .. "' is not defined in this definition.");
	if v6.Type == "Function" then
		return l__default__2:Wait(p10);
	end;
	if v6.Type == "Event" then
		return l__default__3:Wait(p10);
	end;
	if v6.Type ~= "AsyncFunction" then
		error("Invalid Type");
		return;
	end;
	return l__default__4:Wait(p10);
end);
v2.OnEvent = v1.async(function(p11, p12, p13)
	v1.await(p11:WaitFor(p12)):Connect(p13);
end);
v2.OnFunction = v1.async(function(p14, p15, p16)
	v1.await(p14:WaitFor(p15)):SetCallback(p16);
end);
function v2.__tostring(p17)
	return p17:toString();
end;
return {
	ClientDefinitionBuilder = v2
};
