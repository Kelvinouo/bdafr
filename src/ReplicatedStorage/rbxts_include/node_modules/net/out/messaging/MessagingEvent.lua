-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "internal");
local l__ServerTickFunctions__3 = v2.ServerTickFunctions;
local v4 = game:GetService("RunService"):IsStudio();
local l__isLuaTable__1 = v2.isLuaTable;
local u2 = 0;
local u3 = 0;
local u4 = 0;
local u5 = {};
local u6 = v1.import(script, script.Parent, "MessagingService");
local u7 = nil;
u7 = setmetatable({}, {
	__tostring = function()
		return "MessagingEvent";
	end
});
u7.__index = u7;
function u7.new(...)
	local v5 = setmetatable({}, u7);
	return v5:constructor(...) and v5;
end;
function u7.constructor(p1, p2)
	p1.name = p2;
end;
local l__Players__8 = game:GetService("Players");
function u7.GetMessageLimit(p3)
	return 150 + 60 * #l__Players__8:GetPlayers();
end;
function u7.GetSubscriptionLimit(p4)
	return 5 + 2 * #l__Players__8:GetPlayers();
end;
function u7.sendToAllServersOrQueue(p5, p6)
	local v6 = u7:GetMessageLimit();
	if not (v6 <= u3) then
		u3 = u3 + 1;
		u6:PublishAsync(p5.name, p6);
		return;
	end;
	warn("[rbx-net] Exceeded message limit of " .. tostring(v6) .. ", adding to queue...");
	u5[#u5 + 1] = {
		Name = p5.name, 
		Data = p6
	};
end;
function u7.SendToServer(p7, p8, p9)
	p7:sendToAllServersOrQueue({
		jobId = p8, 
		message = p9
	});
end;
function u7.SendToAllServers(p10, p11)
	p10:sendToAllServersOrQueue(p11);
end;
function u7.Connect(p12, p13)
	local v7 = u7:GetSubscriptionLimit();
	if v7 <= u4 then
		error("[rbx-net] Exceeded Subscription limit of " .. tostring(v7) .. "!");
	end;
	u4 = u4 + 1;
	return u6:SubscribeAsync(p12.name, function(p14, p15)
		local v8 = nil;
		local v9 = {
			Data = p14, 
			Sent = p15
		};
		local l__Sent__10 = v9.Sent;
		if l__isLuaTable__1(v9) then
			local v11 = v9.Data ~= nil;
		else
			v11 = false;
		end;
		if v11 and l__isLuaTable__1(v9.Data) then
			local v12 = v9.Data.jobId ~= nil;
		else
			v12 = false;
		end;
		if v12 then
			v8 = v9.Data;
			if game.JobId ~= v8.JobId then
				return;
			end;
		else
			p13(v9.Data, l__Sent__10);
			return;
		end;
		p13(v8.InnerData, l__Sent__10);
	end);
end;
l__ServerTickFunctions__3[#l__ServerTickFunctions__3 + 1] = function()
	if u2 + 60 <= tick() then
		u3 = 0;
		u4 = 0;
		u2 = tick();
		while #u5 > 0 do
			local v13 = #u5;
			u5[v13] = nil;
			local v14 = u5[v13];
			u6:PublishAsync(v14.Name, v14.Data);
			u3 = u3 + 1;		
		end;
		if u7:GetMessageLimit() <= u3 then
			warn("[rbx-net] Too many messages are being sent, any further messages will be queued!");
		end;
	end;
end;
return {
	isSubscriptionMessage = function(p16)
		if not l__isLuaTable__1(p16) then
			return false;
		end;
		return p16.Data ~= nil;
	end, 
	default = u7
};
