-- Script Hash: 14bc7a4f5f6bce8bce3ade047a583ac5aefdb06253ee325c9730a16c694032b388f7c6bc7db7783ae7c1b7fab99feccb
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "internal");
local l__ServerTickFunctions__3 = v2.ServerTickFunctions;
local v4 = game:GetService("RunService"):IsStudio();
local l__isLuaTable__1 = v2.isLuaTable;
local function u2(p1)
	if not l__isLuaTable__1(p1) then
		return false;
	end;
	return p1.Data ~= nil;
end;
local u3 = 0;
local u4 = 0;
local u5 = 0;
local u6 = {};
local u7 = v1.import(script, script.Parent, "MessagingService");
local u8 = nil;
u8 = setmetatable({}, {
	__tostring = function()
		return "MessagingEvent";
	end
});
u8.__index = u8;
function u8.new(...)
	local v5 = setmetatable({}, u8);
	return v5:constructor(...) and v5;
end;
function u8.constructor(p2, p3)
	p2.name = p3;
end;
local l__Players__9 = game:GetService("Players");
function u8.GetMessageLimit(p4)
	return 150 + 60 * #l__Players__9:GetPlayers();
end;
function u8.GetSubscriptionLimit(p5)
	return 5 + 2 * #l__Players__9:GetPlayers();
end;
function u8.sendToAllServersOrQueue(p6, p7)
	local v6 = u8:GetMessageLimit();
	if not (v6 <= u4) then
		u4 = u4 + 1;
		u7:PublishAsync(p6.name, p7);
		return;
	end;
	warn("[rbx-net] Exceeded message limit of " .. tostring(v6) .. ", adding to queue...");
	u6[#u6 + 1] = {
		Name = p6.name, 
		Data = p7
	};
end;
function u8.SendToServer(p8, p9, p10)
	p8:sendToAllServersOrQueue({
		jobId = p9, 
		message = p10
	});
end;
function u8.SendToAllServers(p11, p12)
	p11:sendToAllServersOrQueue(p12);
end;
local function u10(p13)
	if not u2(p13) or not l__isLuaTable__1(p13.Data) then
		return false;
	end;
	return p13.Data.jobId ~= nil;
end;
function u8.Connect(p14, p15)
	local v7 = u8:GetSubscriptionLimit();
	if v7 <= u5 then
		error("[rbx-net] Exceeded Subscription limit of " .. tostring(v7) .. "!");
	end;
	u5 = u5 + 1;
	return u7:SubscribeAsync(p14.name, function(p16, p17)
		local v8 = nil;
		local v9 = nil;
		local v10 = {
			Data = p16, 
			Sent = p17
		};
		v9 = v10.Sent;
		if u10(v10) then
			v8 = v10.Data;
			if game.JobId ~= v8.JobId then
				return;
			end;
		else
			p15(v10.Data, v9);
			return;
		end;
		p15(v8.InnerData, v9);
	end);
end;
l__ServerTickFunctions__3[#l__ServerTickFunctions__3 + 1] = function()
	if u3 + 60 <= tick() then
		u4 = 0;
		u5 = 0;
		u3 = tick();
		while #u6 > 0 do
			local v11 = #u6;
			u6[v11] = nil;
			local v12 = u6[v11];
			u7:PublishAsync(v12.Name, v12.Data);
			u4 = u4 + 1;		
		end;
		if u8:GetMessageLimit() <= u4 then
			warn("[rbx-net] Too many messages are being sent, any further messages will be queued!");
		end;
	end;
end;
return {
	isSubscriptionMessage = u2, 
	default = u8
};
