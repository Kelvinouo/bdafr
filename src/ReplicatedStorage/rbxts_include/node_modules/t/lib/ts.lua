-- Script Hash: 2d13568ab37e31173f060decdf23c20ffda44d66f75803e0bed8cbfd62b918ff03e49240960173caefe4c128446b3de4
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	type = function(p1)
		return function(p2)
			if type(p2) == p1 then
				return true;
			end;
			return false;
		end;
	end, 
	typeof = function(p3)
		return function(p4)
			if typeof(p4) == p3 then
				return true;
			end;
			return false;
		end;
	end, 
	any = function(p5)
		if p5 ~= nil then
			return true;
		end;
		return false;
	end
};
v1.boolean = v1.typeof("boolean");
v1.thread = v1.typeof("thread");
v1.callback = v1.typeof("function");
v1["function"] = v1.callback;
v1.none = v1.typeof("nil");
v1.nil = v1.none;
v1.string = v1.typeof("string");
v1.table = v1.typeof("table");
v1.userdata = v1.type("userdata");
function v1.number(p6)
	if typeof(p6) ~= "number" then
		return false;
	end;
	if p6 == p6 then
		return true;
	end;
	return false;
end;
function v1.nan(p7)
	if typeof(p7) ~= "number" then
		return false;
	end;
	if p7 ~= p7 then
		return true;
	end;
	return false;
end;
v1.Axes = v1.typeof("Axes");
v1.BrickColor = v1.typeof("BrickColor");
v1.CatalogSearchParams = v1.typeof("CatalogSearchParams");
v1.CFrame = v1.typeof("CFrame");
v1.Color3 = v1.typeof("Color3");
v1.ColorSequence = v1.typeof("ColorSequence");
v1.ColorSequenceKeypoint = v1.typeof("ColorSequenceKeypoint");
v1.DateTime = v1.typeof("DateTime");
v1.DockWidgetPluginGuiInfo = v1.typeof("DockWidgetPluginGuiInfo");
v1.Enum = v1.typeof("Enum");
v1.EnumItem = v1.typeof("EnumItem");
v1.Enums = v1.typeof("Enums");
v1.Faces = v1.typeof("Faces");
v1.Instance = v1.typeof("Instance");
v1.NumberRange = v1.typeof("NumberRange");
v1.NumberSequence = v1.typeof("NumberSequence");
v1.NumberSequenceKeypoint = v1.typeof("NumberSequenceKeypoint");
v1.PathWaypoint = v1.typeof("PathWaypoint");
v1.PhysicalProperties = v1.typeof("PhysicalProperties");
v1.Random = v1.typeof("Random");
v1.Ray = v1.typeof("Ray");
v1.RaycastParams = v1.typeof("RaycastParams");
v1.RaycastResult = v1.typeof("RaycastResult");
v1.RBXScriptConnection = v1.typeof("RBXScriptConnection");
v1.RBXScriptSignal = v1.typeof("RBXScriptSignal");
v1.Rect = v1.typeof("Rect");
v1.Region3 = v1.typeof("Region3");
v1.Region3int16 = v1.typeof("Region3int16");
v1.TweenInfo = v1.typeof("TweenInfo");
v1.UDim = v1.typeof("UDim");
v1.UDim2 = v1.typeof("UDim2");
v1.Vector2 = v1.typeof("Vector2");
v1.Vector2int16 = v1.typeof("Vector2int16");
v1.Vector3 = v1.typeof("Vector3");
v1.Vector3int16 = v1.typeof("Vector3int16");
function v1.literal(...)
	local v2 = select("#", ...);
	if v2 == 1 then
		local u1 = ...;
		return function(p8)
			if p8 ~= u1 then
				return false;
			end;
			return true;
		end;
	end;
	local v3 = {};
	for v4 = 1, v2 do
		v3[v4] = v1.literal((select(v4, ...)));
	end;
	return v1.union(table.unpack(v3, 1, v2));
end;
v1.exactly = v1.literal;
function v1.keyOf(p9)
	local v5 = {};
	local v6 = 0;
	for v7 in pairs(p9) do
		v6 = v6 + 1;
		v5[v6] = v7;
	end;
	return v1.literal(table.unpack(v5, 1, v6));
end;
function v1.valueOf(p10)
	local v8 = {};
	local v9 = 0;
	for v10, v11 in pairs(p10) do
		v9 = v9 + 1;
		v8[v9] = v11;
	end;
	return v1.literal(table.unpack(v8, 1, v9));
end;
function v1.integer(p11)
	if not v1.number(p11) then
		return false;
	end;
	if p11 % 1 == 0 then
		return true;
	end;
	return false;
end;
function v1.numberMin(p12)
	return function(p13)
		if not v1.number(p13) then
			return false;
		end;
		if p12 <= p13 then
			return true;
		end;
		return false;
	end;
end;
function v1.numberMax(p14)
	return function(p15)
		if not v1.number(p15) then
			return false;
		end;
		if p15 <= p14 then
			return true;
		end;
		return false;
	end;
end;
function v1.numberMinExclusive(p16)
	return function(p17)
		if not v1.number(p17) then
			return false;
		end;
		if p16 < p17 then
			return true;
		end;
		return false;
	end;
end;
function v1.numberMaxExclusive(p18)
	return function(p19)
		if not v1.number(p19) then
			return false;
		end;
		if p19 < p18 then
			return true;
		end;
		return false;
	end;
end;
v1.numberPositive = v1.numberMinExclusive(0);
v1.numberNegative = v1.numberMaxExclusive(0);
function v1.numberConstrained(p20, p21)
	assert(v1.number(p20));
	assert(v1.number(p21));
	local u2 = v1.numberMin(p20);
	local u3 = v1.numberMax(p21);
	return function(p22)
		if not u2(p22) then
			return false;
		end;
		if not u3(p22) then
			return false;
		end;
		return true;
	end;
end;
function v1.numberConstrainedExclusive(p23, p24)
	assert(v1.number(p23));
	assert(v1.number(p24));
	local u4 = v1.numberMinExclusive(p23);
	local u5 = v1.numberMaxExclusive(p24);
	return function(p25)
		if not u4(p25) then
			return false;
		end;
		if not u5(p25) then
			return false;
		end;
		return true;
	end;
end;
function v1.match(p26)
	assert(v1.string(p26));
	return function(p27)
		if not v1.string(p27) then
			return false;
		end;
		if string.match(p27, p26) == nil then
			return false;
		end;
		return true;
	end;
end;
function v1.optional(p28)
	assert(v1.callback(p28));
	return function(p29)
		if p29 == nil then
			return true;
		end;
		if p28(p29) then
			return true;
		end;
		return false;
	end;
end;
function v1.tuple(...)
	local u6 = { ... };
	return function(...)
		local v12 = { ... };
		for v13, v14 in ipairs(u6) do
			if v14(v12[v13]) == false then
				return false;
			end;
		end;
		return true;
	end;
end;
function v1.keys(p30)
	assert(v1.callback(p30));
	return function(p31)
		if v1.table(p31) == false then
			return false;
		end;
		for v15 in pairs(p31) do
			if p30(v15) == false then
				return false;
			end;
		end;
		return true;
	end;
end;
function v1.values(p32)
	assert(v1.callback(p32));
	return function(p33)
		if v1.table(p33) == false then
			return false;
		end;
		for v16, v17 in pairs(p33) do
			if p32(v17) == false then
				return false;
			end;
		end;
		return true;
	end;
end;
function v1.map(p34, p35)
	assert(v1.callback(p34));
	assert(v1.callback(p35));
	local u7 = v1.keys(p34);
	local u8 = v1.values(p35);
	return function(p36)
		if not u7(p36) then
			return false;
		end;
		if not u8(p36) then
			return false;
		end;
		return true;
	end;
end;
function v1.set(p37)
	return v1.map(p37, v1.literal(true));
end;
local u9 = v1.keys(v1.integer);
function v1.array(p38)
	assert(v1.callback(p38));
	local u10 = v1.values(p38);
	return function(p39)
		if u9(p39) == false then
			return false;
		end;
		local v18 = 0;
		for v19, v20 in ipairs(p39) do
			v18 = v18 + 1;
		end;
		for v21 in pairs(p39) do
			if v21 < 1 then
				return false;
			end;
			if v18 < v21 then
				return false;
			end;
		end;
		if not u10(p39) then
			return false;
		end;
		return true;
	end;
end;
function v1.strictArray(...)
	local v22 = { ... };
	assert(v1.array(v1.callback)(v22));
	return function(p40)
		if u9(p40) == false then
			return false;
		end;
		if #v22 < #p40 then
			return false;
		end;
		for v23, v24 in pairs(v22) do
			if not v24(p40[v23]) then
				return false;
			end;
		end;
		return true;
	end;
end;
u9 = v1.array;
u9 = u9(v1.callback);
function v1.union(...)
	local v25 = { ... };
	assert(u9(v25));
	return function(p41)
		for v26, v27 in ipairs(v25) do
			if v27(p41) then
				return true;
			end;
		end;
		return false;
	end;
end;
v1.some = v1.union;
function v1.intersection(...)
	local v28 = { ... };
	assert(u9(v28));
	return function(p42)
		for v29, v30 in ipairs(v28) do
			if not v30(p42) then
				return false;
			end;
		end;
		return true;
	end;
end;
v1.every = v1.intersection;
u9 = v1.map;
u9 = u9(v1.any, v1.callback);
function v1.interface(p43)
	assert(u9(p43));
	return function(p44)
		if v1.table(p44) == false then
			return false;
		end;
		for v31, v32 in pairs(p43) do
			if v32(p44[v31]) == false then
				return false;
			end;
		end;
		return true;
	end;
end;
function v1.strictInterface(p45)
	assert(u9(p45));
	return function(p46)
		if v1.table(p46) == false then
			return false;
		end;
		for v33, v34 in pairs(p45) do
			if v34(p46[v33]) == false then
				return false;
			end;
		end;
		for v35 in pairs(p46) do
			if not p45[v35] then
				return false;
			end;
		end;
		return true;
	end;
end;
u9 = function(p47, p48)
	assert(v1.string(p47));
	local v36 = nil;
	if p48 ~= nil then
		v36 = v1.children(p48);
	end;
	return function(p49)
		if not v1.Instance(p49) then
			return false;
		end;
		if p49.ClassName ~= p47 then
			return false;
		end;
		if v36 and not v36(p49) then
			return false;
		end;
		return true;
	end;
end;
v1.instanceOf = u9;
u9 = v1.instanceOf;
v1.instance = u9;
u9 = function(p50, p51)
	assert(v1.string(p50));
	local v37 = nil;
	if p51 ~= nil then
		v37 = v1.children(p51);
	end;
	return function(p52)
		if not v1.Instance(p52) then
			return false;
		end;
		if not p52:IsA(p50) then
			return false;
		end;
		if v37 and not v37(p52) then
			return false;
		end;
		return true;
	end;
end;
v1.instanceIsA = u9;
u9 = function(p53)
	assert(v1.Enum(p53));
	return function(p54)
		if not v1.EnumItem(p54) then
			return false;
		end;
		if p54.EnumType == p53 then
			return true;
		end;
		return false;
	end;
end;
v1.enum = u9;
u9 = v1.tuple;
u9 = u9(v1.callback, v1.callback);
function v1.wrap(p55, p56)
	assert(u9(p55, p56));
	return function(...)
		assert(p56(...));
		return p55(...);
	end;
end;
u9 = function(p57)
	return function(...)
		assert(p57(...));
	end;
end;
v1.strict = u9;
u9 = v1.map;
u9 = u9(v1.string, v1.callback);
function v1.children(p58)
	assert(u9(p58));
	return function(p59)
		if not v1.Instance(p59) then
			return false;
		end;
		local v38 = {};
		for v39, v40 in ipairs(p59:GetChildren()) do
			local l__Name__41 = v40.Name;
			if p58[l__Name__41] then
				if v38[l__Name__41] then
					return false;
				end;
				v38[l__Name__41] = v40;
			end;
		end;
		for v42, v43 in pairs(p58) do
			if not v43(v38[v42]) then
				return false;
			end;
		end;
		return true;
	end;
end;
u9 = {
	t = v1
};
return u9;
