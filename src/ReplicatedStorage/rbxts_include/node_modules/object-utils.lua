-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	keys = function(p1)
		local v2 = table.create(#p1);
		for v3 in pairs(p1) do
			v2[#v2 + 1] = v3;
		end;
		return v2;
	end, 
	values = function(p2)
		local v4 = table.create(#p2);
		for v5, v6 in pairs(p2) do
			v4[#v4 + 1] = v6;
		end;
		return v4;
	end, 
	entries = function(p3)
		local v7 = table.create(#p3);
		for v8, v9 in pairs(p3) do
			v7[#v7 + 1] = { v8, v9 };
		end;
		return v7;
	end, 
	assign = function(p4, ...)
		for v10 = 1, select("#", ...) do
			local v11 = select(v10, ...);
			if type(v11) == "table" then
				for v12, v13 in pairs(v11) do
					p4[v12] = v13;
				end;
			end;
		end;
		return p4;
	end, 
	copy = function(p5)
		local v14 = table.create(#p5);
		for v15, v16 in pairs(p5) do
			v14[v15] = v16;
		end;
		return v14;
	end
};
local function u1(p6, p7)
	local v17 = table.create(#p6);
	p7[p6] = v17;
	local v18, v19, v20 = pairs(p6);
	while true do
		local v21, v22 = v18(v19, v20);
		if not v21 then
			break;
		end;
		if type(v21) == "table" then
			v21 = p7[v21] or u1(v21, p7);
		end;
		if type(v22) == "table" then
			v22 = p7[v22] or u1(v22, p7);
		end;
		v17[v21] = v22;	
	end;
	return v17;
end;
function v1.deepCopy(p8)
	return u1(p8, {});
end;
function v1.deepEquals(p9, p10)
	for v23 in pairs(p9) do
		local v24 = p9[v23];
		local v25 = p10[v23];
		if type(v24) == "table" and type(v25) == "table" then
			if not v1.deepEquals(v24, v25) then
				return false;
			end;
		elseif v24 ~= v25 then
			return false;
		end;
	end;
	for v26 in pairs(p10) do
		if p9[v26] == nil then
			return false;
		end;
	end;
	return true;
end;
local l__HttpService__2 = game:GetService("HttpService");
function v1.toString(p11)
	return l__HttpService__2:JSONEncode(p11);
end;
function v1.isEmpty(p12)
	return next(p12) == nil;
end;
function v1.fromEntries(p13)
	local v27 = #p13;
	local v28 = table.create(v27);
	if p13 then
		for v29 = 1, v27 do
			local v30 = p13[v29];
			v28[v30[1]] = v30[2];
		end;
	end;
	return v28;
end;
return v1;
