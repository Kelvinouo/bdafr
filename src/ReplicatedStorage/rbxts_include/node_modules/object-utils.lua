-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	keys = function(p1)
		local v2 = table.create(#p1);
		for v3, v4 in pairs(p1) do
			v2[#v2 + 1] = v3;
		end;
		return v2;
	end, 
	values = function(p2)
		local v5 = table.create(#p2);
		for v6, v7 in pairs(p2) do
			v5[#v5 + 1] = v7;
		end;
		return v5;
	end, 
	entries = function(p3)
		local v8 = table.create(#p3);
		for v9, v10 in pairs(p3) do
			v8[#v8 + 1] = { v9, v10 };
		end;
		return v8;
	end, 
	assign = function(p4, ...)
		for v11 = 1, select("#", ...) do
			local v12 = select(v11, ...);
			if type(v12) == "table" then
				for v13, v14 in pairs(v12) do
					p4[v13] = v14;
				end;
			end;
		end;
		return p4;
	end, 
	copy = function(p5)
		local v15 = table.create(#p5);
		for v16, v17 in pairs(p5) do
			v15[v16] = v17;
		end;
		return v15;
	end
};
local function u1(p6, p7)
	local v18 = table.create(#p6);
	p7[p6] = v18;
	local v19, v20, v21 = pairs(p6);
	while true do
		local v22, v23 = v19(v20, v21);
		if not v22 then
			break;
		end;
		if type(v22) == "table" then
			v22 = p7[v22] or u1(v22, p7);
		end;
		if type(v23) == "table" then
			v23 = p7[v23] or u1(v23, p7);
		end;
		v18[v22] = v23;	
	end;
	return v18;
end;
function v1.deepCopy(p8)
	return u1(p8, {});
end;
function v1.deepEquals(p9, p10)
	for v24, v25 in pairs(p9) do
		local v26 = p9[v24];
		local v27 = p10[v24];
		if type(v26) == "table" and type(v27) == "table" then
			if not v1.deepEquals(v26, v27) then
				return false;
			end;
		elseif v26 ~= v27 then
			return false;
		end;
	end;
	for v28, v29 in pairs(p10) do
		if p9[v28] == nil then
			return false;
		end;
	end;
	return true;
end;
local l__HttpService__2 = game:GetService("HttpService");
function v1.toString(p11)
	return l__HttpService__2:JSONEncode(p11);
end;
function v1.isEmpty(p12)
	return next(p12) == nil;
end;
function v1.fromEntries(p13)
	local v30 = #p13;
	local v31 = table.create(v30);
	if p13 then
		for v32 = 1, v30 do
			local v33 = p13[v32];
			v31[v33[1]] = v33[2];
		end;
	end;
	return v31;
end;
return v1;
