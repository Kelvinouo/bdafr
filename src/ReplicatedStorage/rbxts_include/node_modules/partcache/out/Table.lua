-- Script Hash: 8b9d9074ca4eef215d214544dfd1130ced3dbb8713fd1278488484ce0c10c6ae7b897073ad2a26098a3c23a769702015
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
for v2, v3 in pairs(table) do
	v1[v2] = v3;
end;
function v1.contains(p1, p2)
	return v1.indexOf(p1, p2) ~= nil;
end;
function v1.indexOf(p3, p4)
	local v4 = table.find(p3, p4);
	if v4 then
		return v4;
	end;
	return v1.keyOf(p3, p4);
end;
function v1.keyOf(p5, p6)
	for v5, v6 in pairs(p5) do
		if v6 == p6 then
			return v5;
		end;
	end;
	return nil;
end;
function v1.skip(p7, p8)
	return table.move(p7, p8 + 1, #p7, 1, table.create(#p7 - p8));
end;
function v1.take(p9, p10)
	return table.move(p9, 1, p10, 1, table.create(p10));
end;
function v1.range(p11, p12, p13)
	return table.move(p11, p12, p13, 1, table.create(p13 - p12 + 1));
end;
function v1.skipAndTake(p14, p15, p16)
	return table.move(p14, p15 + 1, p15 + p16, 1, table.create(p16));
end;
local u1 = Random.new();
function v1.random(p17)
	return p17[u1:NextInteger(1, #p17)];
end;
function v1.join(p18, p19)
	local v7 = table.create(#p18 + #p19);
	local v8 = table.move(p18, 1, #p18, 1, v7);
	return table.move(p19, 1, #p19, #p18 + 1, v7);
end;
function v1.removeObject(p20, p21)
	local v9 = v1.indexOf(p20, p21);
	if v9 then
		table.remove(p20, v9);
	end;
end;
function v1.expand(p22, p23)
	if p23 < 0 then
		error("Cannot expand a table by a negative amount of objects.");
	end;
	local v10 = table.create(#p22 + p23);
	for v11 = 1, #p22 do
		v10[v11] = p22[v11];
	end;
	return v10;
end;
return v1;
