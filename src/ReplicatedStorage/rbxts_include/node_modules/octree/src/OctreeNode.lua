
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	ClassName = "OctreeNode"
};
v1.__index = v1;
function v1.new(p1, p2)
	local v2 = setmetatable({}, v1);
	v2._octree = p1 or error("No octree");
	v2._object = p2 or error("No object");
	v2._currentLowestRegion = nil;
	v2._position = nil;
	return v2;
end;
function v1.KNearestNeighborsSearch(p3, p4, p5)
	return p3._octree:KNearestNeighborsSearch(p3._position, p4, p5);
end;
function v1.GetObject(p6)
	return p6._object;
end;
function v1.RadiusSearch(p7, p8)
	return p7._octree:RadiusSearch(p7._position, p8);
end;
function v1.GetPosition(p9)
	return p9._position;
end;
function v1.GetRawPosition(p10)
	return p10._px, p10._py, p10._pz;
end;
local u1 = require(script.Parent:WaitForChild("OctreeRegionUtils"));
function v1.SetPosition(p11, p12)
	if p11._position == p12 then
		return;
	end;
	local l__x__3 = p12.x;
	local l__y__4 = p12.y;
	local l__z__5 = p12.z;
	p11._px = l__x__3;
	p11._py = l__y__4;
	p11._pz = l__z__5;
	p11._position = p12;
	if p11._currentLowestRegion and u1.inRegionBounds(p11._currentLowestRegion, l__x__3, l__y__4, l__z__5) then
		return;
	end;
	local v6 = p11._octree:GetOrCreateLowestSubRegion(l__x__3, l__y__4, l__z__5);
	if p11._currentLowestRegion then
		u1.moveNode(p11._currentLowestRegion, v6, p11);
	else
		u1.addNode(v6, p11);
	end;
	p11._currentLowestRegion = v6;
end;
function v1.Destroy(p13)
	if p13._currentLowestRegion then
		u1.removeNode(p13._currentLowestRegion, p13);
	end;
end;
return v1;

