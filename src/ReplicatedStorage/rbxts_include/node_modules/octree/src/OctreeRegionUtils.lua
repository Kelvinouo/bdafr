-- Decompiled with the Synapse X Luau decompiler.

local u1 = {
	create = function(p1, p2, p3, p4, p5, p6, p7, p8)
		local v1 = p4 / 2;
		local v2 = p5 / 2;
		local v3 = p6 / 2;
		return {
			subRegions = {}, 
			lowerBounds = { p1 - v1, p2 - v2, p3 - v3 }, 
			upperBounds = { p1 + v1, p2 + v2, p3 + v3 }, 
			position = { p1, p2, p3 }, 
			size = { p4, p5, p6 }, 
			parent = p7, 
			depth = p7 and p7.depth + 1 or 1, 
			parentIndex = p8, 
			nodes = {}, 
			node_count = 0
		};
	end, 
	addNode = function(p9, p10)
		assert(p10);
		local v4 = p9;
		while v4 do
			if not v4.nodes[p10] then
				v4.nodes[p10] = p10;
				v4.node_count = v4.node_count + 1;
			end;
			v4 = v4.parent;		
		end;
	end, 
	moveNode = function(p11, p12, p13)
		assert(p11.depth == p12.depth, "fromLowest.depth ~= toLowest.depth");
		assert(p11 ~= p12, "fromLowest == toLowest");
		local v5 = p11;
		local v6 = p12;
		while v5 ~= v6 do
			assert(v5.nodes[p13]);
			assert(v5.node_count > 0);
			v5.nodes[p13] = nil;
			v5.node_count = v5.node_count - 1;
			if v5.node_count <= 0 and v5.parentIndex then
				assert(v5.parent);
				assert(v5.parent.subRegions[v5.parentIndex] == v5);
				v5.parent.subRegions[v5.parentIndex] = nil;
			end;
			assert(not v6.nodes[p13]);
			v6.nodes[p13] = p13;
			v6.node_count = v6.node_count + 1;
			v5 = v5.parent;
			v6 = v6.parent;		
		end;
	end, 
	removeNode = function(p14, p15)
		assert(p15);
		local v7 = p14;
		while v7 do
			assert(v7.nodes[p15]);
			assert(v7.node_count > 0);
			v7.nodes[p15] = nil;
			v7.node_count = v7.node_count - 1;
			if v7.node_count <= 0 and v7.parentIndex then
				assert(v7.parent);
				assert(v7.parent.subRegions[v7.parentIndex] == v7);
				v7.parent.subRegions[v7.parentIndex] = nil;
			end;
			v7 = v7.parent;		
		end;
	end, 
	getSearchRadiusSquared = function(p16, p17, p18)
		local v8 = p16 + 0.8660254037844386 * p17;
		return v8 * v8 + p18;
	end, 
	getNeighborsWithinRadius = function(p19, p20, p21, p22, p23, p24, p25, p26)
		assert(p26);
		local v9 = u1.getSearchRadiusSquared(p20, p19.size[1] / 2, 1E-06);
		local v10 = p20 * p20;
		for v11, v12 in pairs(p19.subRegions) do
			local l__position__13 = v12.position;
			local v14 = p21 - l__position__13[1];
			local v15 = p22 - l__position__13[2];
			local v16 = p23 - l__position__13[3];
			if v14 * v14 + v15 * v15 + v16 * v16 <= v9 then
				if v12.depth == p26 then
					for v17, v18 in pairs(v12.nodes) do
						local v19, v20, v21 = v17:GetRawPosition();
						local v22 = p21 - v19;
						local v23 = p22 - v20;
						local v24 = p23 - v21;
						local v25 = v22 * v22 + v23 * v23 + v24 * v24;
						if v25 <= v10 then
							p24[#p24 + 1] = v17:GetObject();
							p25[#p25 + 1] = v25;
						end;
					end;
				else
					u1.getNeighborsWithinRadius(v12, p20, p21, p22, p23, p24, p25, p26);
				end;
			end;
		end;
	end, 
	getOrCreateSubRegionAtDepth = function(p27, p28, p29, p30, p31)
		local v26 = nil;
		v26 = p27;
		for v27 = p27.depth, p31 do
			local v28 = u1.getSubRegionIndex(v26, p28, p29, p30);
			local v29 = v26.subRegions[v28];
			if not v29 then
				v29 = u1.createSubRegion(v26, v28);
				v26.subRegions[v28] = v29;
			end;
			v26 = v29;
		end;
		return local v30;
	end
};
local u2 = { { 0.25, 0.25, -0.25 }, { -0.25, 0.25, -0.25 }, { 0.25, 0.25, 0.25 }, { -0.25, 0.25, 0.25 }, { 0.25, -0.25, -0.25 }, { -0.25, -0.25, -0.25 }, { 0.25, -0.25, 0.25 }, { -0.25, -0.25, 0.25 } };
function u1.createSubRegion(p32, p33)
	local l__size__31 = p32.size;
	local l__position__32 = p32.position;
	local v33 = u2[p33];
	return u1.create(l__position__32[1] + v33[1] * l__size__31[1], l__position__32[2] + v33[2] * l__size__31[2], l__position__32[3] + v33[3] * l__size__31[3], l__size__31[1] / 2, l__size__31[2] / 2, l__size__31[3] / 2, p32, p33);
end;
function u1.inRegionBounds(p34, p35, p36, p37)
	local l__lowerBounds__34 = p34.lowerBounds;
	local l__upperBounds__35 = p34.upperBounds;
	local v36 = false;
	if l__lowerBounds__34[1] <= p35 then
		v36 = false;
		if p35 <= l__upperBounds__35[1] then
			v36 = false;
			if l__lowerBounds__34[2] <= p36 then
				v36 = false;
				if p36 <= l__upperBounds__35[2] then
					v36 = false;
					if l__lowerBounds__34[3] <= p37 then
						v36 = p37 <= l__upperBounds__35[3];
					end;
				end;
			end;
		end;
	end;
	return v36;
end;
function u1.getSubRegionIndex(p38, p39, p40, p41)
	if p38.position[1] < p39 then
		local v37 = 1;
	else
		v37 = 2;
	end;
	if p40 <= p38.position[2] then
		v37 = v37 + 4;
	end;
	if p38.position[3] <= p41 then
		v37 = v37 + 2;
	end;
	return v37;
end;
function u1.getTopLevelRegionHash(p42, p43, p44)
	return p42 * 73856093 + p43 * 19351301 + p44 * 83492791;
end;
function u1.getTopLevelRegionCellIndex(p45, p46, p47, p48)
	return math.floor(p46 / p45[1] + 0.5), math.floor(p47 / p45[2] + 0.5), math.floor(p48 / p45[3] + 0.5);
end;
function u1.getTopLevelRegionPosition(p49, p50, p51, p52)
	return p49[1] * p50, p49[2] * p51, p49[3] * p52;
end;
function u1.areEqualTopRegions(p53, p54, p55, p56)
	local l__position__38 = p53.position;
	local v39 = false;
	if l__position__38[1] == p54 then
		v39 = false;
		if l__position__38[2] == p55 then
			v39 = l__position__38[3] == p56;
		end;
	end;
	return v39;
end;
function u1.findRegion(p57, p58, p59, p60, p61)
	local v40, v41, v42 = u1.getTopLevelRegionCellIndex(p58, p59, p60, p61);
	local v43 = p57[u1.getTopLevelRegionHash(v40, v41, v42)];
	if not v43 then
		return nil;
	end;
	local v44, v45, v46 = u1.getTopLevelRegionPosition(p58, v40, v41, v42);
	for v47, v48 in pairs(v43) do
		if u1.areEqualTopRegions(v48, v44, v45, v46) then
			return v48;
		end;
	end;
	return nil;
end;
function u1.getOrCreateRegion(p62, p63, p64, p65, p66)
	local v49, v50, v51 = u1.getTopLevelRegionCellIndex(p63, p64, p65, p66);
	local v52 = u1.getTopLevelRegionHash(v49, v50, v51);
	local v53 = p62[v52];
	if not v53 then
		v53 = {};
		p62[v52] = v53;
	end;
	local v54, v55, v56 = u1.getTopLevelRegionPosition(p63, v49, v50, v51);
	for v57, v58 in pairs(v53) do
		if u1.areEqualTopRegions(v58, v54, v55, v56) then
			return v58;
		end;
	end;
	local v59 = u1.create(v54, v55, v56, p63[1], p63[2], p63[3]);
	table.insert(v53, v59);
	return v59;
end;
return u1;
