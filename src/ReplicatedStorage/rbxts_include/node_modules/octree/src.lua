-- Script Hash: 79170d53dd35dcc378a280aa4d96479ac4d8de5e1ca60f1b437484ca47f2027fe6ab165f5540002bfc34013aa1777e27
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	ClassName = "Octree"
};
v1.__index = v1;
function v1.new()
	local v2 = setmetatable({}, v1);
	v2._maxRegionSize = { 512, 512, 512 };
	v2._maxDepth = 4;
	v2._regionHashMap = {};
	return v2;
end;
function v1.ClearAllNodes(p1)
	p1._regionHashMap = {};
end;
function v1.GetAllNodes(p2)
	local v3 = {};
	for v4, v5 in pairs(p2._regionHashMap) do
		for v6, v7 in pairs(v5) do
			for v8, v9 in pairs(v7.nodes) do
				v3[#v3 + 1] = v8;
			end;
		end;
	end;
	return v3;
end;
local u1 = require(script:WaitForChild("OctreeNode"));
function v1.CreateNode(p3, p4, p5)
	assert(typeof(p4) == "Vector3", "Bad position value");
	assert(p5, "Bad object value");
	local v10 = u1.new(p3, p5);
	v10:SetPosition(p4);
	return v10;
end;
function v1.RadiusSearch(p6, p7, p8)
	assert(typeof(p7) == "Vector3");
	assert(type(p8) == "number");
	return p6:_radiusSearch(p7.x, p7.y, p7.z, p8);
end;
function v1.KNearestNeighborsSearch(p9, p10, p11, p12)
	assert(typeof(p10) == "Vector3");
	assert(type(p12) == "number");
	local v11, v12 = p9:_radiusSearch(p10.x, p10.y, p10.z, p12);
	local v13 = {};
	for v14, v15 in pairs(v12) do
		table.insert(v13, {
			dist2 = v15, 
			index = v14
		});
	end;
	table.sort(v13, function(p13, p14)
		return p13.dist2 < p14.dist2;
	end);
	local v16 = {};
	local v17 = {};
	for v18 = 1, math.min(#v13, p11) do
		local v19 = v13[v18];
		v17[#v17 + 1] = v19.dist2;
		v16[#v16 + 1] = v11[v19.index];
	end;
	return v16, v17;
end;
local u2 = require(script:WaitForChild("OctreeRegionUtils"));
function v1.GetOrCreateLowestSubRegion(p15, p16, p17, p18)
	return u2.getOrCreateSubRegionAtDepth(p15:_getOrCreateRegion(p16, p17, p18), p16, p17, p18, p15._maxDepth);
end;
function v1._radiusSearch(p19, p20, p21, p22, p23)
	local v20 = {};
	local v21 = {};
	local v22 = u2.getSearchRadiusSquared(p23, p19._maxRegionSize[1], 1E-09);
	for v23, v24 in pairs(p19._regionHashMap) do
		for v25, v26 in pairs(v24) do
			local l__position__27 = v26.position;
			local v28 = p20 - l__position__27[1];
			local v29 = p21 - l__position__27[2];
			local v30 = p22 - l__position__27[3];
			if v28 * v28 + v29 * v29 + v30 * v30 <= v22 then
				u2.getNeighborsWithinRadius(v26, p23, p20, p21, p22, v20, v21, p19._maxDepth);
			end;
		end;
	end;
	return v20, v21;
end;
function v1._getRegion(p24, p25, p26, p27)
	return u2.findRegion(p24._regionHashMap, p24._maxRegionSize, p25, p26, p27);
end;
function v1._getOrCreateRegion(p28, p29, p30, p31)
	return u2.getOrCreateRegion(p28._regionHashMap, p28._maxRegionSize, p29, p30, p31);
end;
return v1;
