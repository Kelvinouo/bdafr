-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local u1 = v1.import(script, script.Parent.Parent, "middleware", "createMiddlewareProcessor").createMiddlewareProcessor;
local l__fireNetworkHandler__2 = v1.import(script, script.Parent.Parent, "handlers").fireNetworkHandler;
local l__Players__3 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Players;
local u4 = nil;
u4 = function(p1, p2, p3, p4)
	local v2 = {};
	function v2.fire(p5, ...)
		p1:FireServer(unpack({ ... }));
	end;
	function v2.connect(p6, p7, p8)
		assert(p3, "Event " .. p1.Name .. " is not registered as a receiver.");
		return p3.Event:Connect(function(...)
			local v3 = { ... };
			if p8 then
				local v4 = 0;
				local v5 = false;
				while true do
					if v5 then
						v4 = v4 + 1;
					else
						v5 = true;
					end;
					if not (v4 < p2) then
						break;
					end;
					local v6 = p8[v4 + 1];
					if v6 ~= nil and not v6(v3[v4 + 1]) then
						return nil;
					end;				
				end;
			end;
			return p7(unpack(v3));
		end);
	end;
	function v2.predict(p9, ...)
		assert(p4, "Event " .. p1.Name .. " does not have a middleware processor.");
		p4(nil, unpack({ ... }));
	end;
	setmetatable(v2, {
		__call = function(p10, ...)
			p10:fire(unpack({ ... }));
		end
	});
	return v2;
end;
return {
	createClientHandler = function(p11, p12, p13, p14, p15)
		local v7 = {};
		local v8 = {};
		local v9 = {};
		for v10 in pairs(p14) do
			v8[v10] = Instance.new("BindableEvent");
		end;
		for v11, v12 in pairs(p11) do
			local v13 = p12[v11];
			local v14 = p15;
			if v14 ~= nil then
				v14 = v14[v11];
			end;
			local v15 = u1(v14, v13, function(p16, ...)
				local v16 = v8[v11];
				if v16 ~= nil then
					v16 = v16:Fire(unpack({ ... }));
				end;
				return v16;
			end);
			v9[v11] = v15;
			v12.OnClientEvent:Connect(function(...)
				local v17 = { ... };
				local v18 = p14[v11];
				if not v18 then
					return nil;
				end;
				local v19 = 0;
				local v20 = false;
				while true do
					if v20 then
						v19 = v19 + 1;
					else
						v20 = true;
					end;
					if not (v19 < #v18) then
						break;
					end;
					if not v18[v19 + 1](v17[v19 + 1]) then
						l__fireNetworkHandler__2("onBadRequest", l__Players__3.LocalPlayer, v13, v19);
						return nil;
					end;				
				end;
				v15(nil, unpack(v17));
			end);
		end;
		local v21, v22, v23 = pairs(p11);
		while true do
			local v24, v25 = v21(v22, v23);
			if not v24 then
				break;
			end;
			local v26 = p14[v24];
			if v26 ~= nil then
				v26 = #v26;
			end;
			local v27 = v26;
			if v27 == nil then
				v27 = 0;
			end;
			v7[v24] = u4(v25, v27, v8[v24], v9[v24]);		
		end;
		return v7;
	end
};
