-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local u1 = v1.import(script, script.Parent.Parent, "middleware", "createMiddlewareProcessor").createMiddlewareProcessor;
local l__fireNetworkHandler__2 = v1.import(script, script.Parent.Parent, "handlers").fireNetworkHandler;
local u3 = nil;
local l__Players__4 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Players;
u3 = function(p1, p2, p3, p4)
	local v2 = {};
	function v2.fire(p5, p6, ...)
		local v3 = { ... };
		if typeof(p6) == "Instance" then
			p1:FireClient(p6, unpack(v3));
			return;
		end;
		local v4, v5, v6 = ipairs(p6);
		while true do
			v4(v5, v6);
			if not v4 then
				break;
			end;
			v6 = v4;
			p1:FireClient(v5, unpack(v3));		
		end;
	end;
	function v2.broadcast(p7, ...)
		p1:FireAllClients(unpack({ ... }));
	end;
	function v2.except(p8, p9, ...)
		local v7 = { ... };
		if typeof(p9) == "Instance" then
			p9 = { p9 };
		end;
		local v8, v9, v10 = ipairs(l__Players__4:GetPlayers());
		while true do
			v8(v9, v10);
			if not v8 then
				break;
			end;
			v10 = v8;
			if table.find(p9, v9) == nil then
				p8:fire(v9, unpack(v7));
			end;		
		end;
	end;
	function v2.connect(p10, p11, p12)
		assert(p3, "Event " .. p1.Name .. " is not registered as a receiver.");
		return p3.Event:Connect(function(p13, ...)
			local v11 = { ... };
			if p12 then
				local v12 = 0;
				local v13 = false;
				while true do
					if v13 then
						v12 = v12 + 1;
					else
						v13 = true;
					end;
					if not (v12 < p2) then
						break;
					end;
					local v14 = p12[v12 + 1];
					if v14 ~= nil and not v14(v11[v12 + 1]) then
						return nil;
					end;				
				end;
			end;
			return p11(p13, unpack(v11));
		end);
	end;
	function v2.predict(p14, p15, ...)
		assert(p4, "Event " .. p1.Name .. " does not have a middleware processor.");
		p4(p15, unpack({ ... }));
	end;
	setmetatable(v2, {
		__call = function(p16, p17, ...)
			p16:fire(p17, unpack({ ... }));
		end
	});
	return v2;
end;
return {
	createServerHandler = function(p18, p19, p20, p21, p22)
		local v15 = {};
		local v16 = {};
		local v17 = {};
		for v18 in pairs(p20) do
			v16[v18] = Instance.new("BindableEvent");
		end;
		for v19, v20 in pairs(p18) do
			local v21 = p19[v19];
			local v22 = p22;
			if v22 ~= nil then
				v22 = v22[v19];
			end;
			local v23 = u1(v22, v21, function(p23, ...)
				local v24 = v16[v19];
				if v24 ~= nil then
					v24 = v24:Fire(p23, unpack({ ... }));
				end;
				return v24;
			end);
			v17[v19] = v23;
			v20.OnServerEvent:Connect(function(p24, ...)
				local v25 = { ... };
				local v26 = p20[v19];
				if not v26 then
					return nil;
				end;
				local v27 = 0;
				local v28 = false;
				while true do
					if v28 then
						v27 = v27 + 1;
					else
						v28 = true;
					end;
					if not (v27 < #v26) then
						break;
					end;
					if not v26[v27 + 1](v25[v27 + 1]) then
						l__fireNetworkHandler__2("onBadRequest", p24, v21, v27);
						return nil;
					end;				
				end;
				v23(p24, unpack(v25));
			end);
		end;
		local v29, v30, v31 = pairs(p18);
		while true do
			local v32, v33 = v29(v30, v31);
			if not v32 then
				break;
			end;
			local v34 = p20[v32];
			if v34 ~= nil then
				v34 = #v34;
			end;
			local v35 = v34;
			if v35 == nil then
				v35 = 0;
			end;
			v15[v32] = u3(v33, v35, v16[v32], v17[v32]);		
		end;
		return v15;
	end
};
