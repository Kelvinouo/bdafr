-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__populateInstanceMap__1 = v1.import(script, script.Parent.Parent, "util", "populateInstanceMap").populateInstanceMap;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__RunService__3 = v1.import(script, v1.getModule(script, "@rbxts", "services")).RunService;
local l__createServerHandler__4 = v1.import(script, script.Parent, "createServerHandler").createServerHandler;
local l__createClientHandler__5 = v1.import(script, script.Parent, "createClientHandler").createClientHandler;
return {
	createNetworkingEvent = function(p1, p2, p3, p4, p5)
		local v2 = {};
		local v3 = {};
		l__populateInstanceMap__1("RemoteEvent", "events-" .. p1, u2.keys(p2), v3);
		l__populateInstanceMap__1("RemoteEvent", "events-" .. p1, u2.keys(p3), v3);
		for v4, v5 in pairs(v3) do
			v2[v4] = {
				eventType = "Event", 
				globalName = p1, 
				name = v4
			};
		end;
		if l__RunService__3:IsServer() then
			return {
				server = l__createServerHandler__4(v3, v2, p2, p3, p4), 
				client = nil
			};
		end;
		return {
			server = nil, 
			client = l__createClientHandler__5(v3, v2, p2, p3, p5)
		};
	end
};
