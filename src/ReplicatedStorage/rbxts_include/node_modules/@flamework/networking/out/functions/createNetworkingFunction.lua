
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__populateInstanceMap__2 = v1.import(script, script.Parent.Parent, "util", "populateInstanceMap").populateInstanceMap;
local l__RunService__3 = v1.import(script, v1.getModule(script, "@rbxts", "services")).RunService;
local l__createServerHandler__4 = v1.import(script, script.Parent, "createServerHandler").createServerHandler;
local l__createClientHandler__5 = v1.import(script, script.Parent, "createClientHandler").createClientHandler;
return {
	createNetworkingFunction = function(p1, p2, p3, p4, p5)
		local v2 = {};
		local v3 = {};
		local v4 = {};
		local v5 = u1.keys(p2);
		local function v6(p6)
			return "s:" .. tostring(p6);
		end;
		local v7 = table.create(#v5);
		for v8, v9 in ipairs(v5) do
			v7[v8] = v6(v9, v8 - 1, v5);
		end;
		local v10 = u1.keys(p3);
		local function v11(p7)
			return "c:" .. tostring(p7);
		end;
		local v12 = table.create(#v10);
		for v13, v14 in ipairs(v10) do
			v12[v13] = v11(v14, v13 - 1, v10);
		end;
		l__populateInstanceMap__2("RemoteEvent", "functions-" .. p1, v7, v3);
		l__populateInstanceMap__2("RemoteEvent", "functions-" .. p1, v12, v4);
		for v15, v16 in pairs(v3) do
			local v17 = string.sub(v15, 3);
			v2[v17] = {
				eventType = "Function", 
				globalName = p1, 
				name = v17
			};
		end;
		for v18, v19 in pairs(v4) do
			local v20 = string.sub(v18, 3);
			v2[v20] = {
				eventType = "Function", 
				globalName = p1, 
				name = v20
			};
		end;
		if l__RunService__3:IsServer() then
			return {
				server = l__createServerHandler__4(v3, v4, v2, p2, p3, p4), 
				client = nil
			};
		end;
		return {
			server = nil, 
			client = l__createClientHandler__5(v3, v4, v2, p2, p3, p5)
		};
	end
};

