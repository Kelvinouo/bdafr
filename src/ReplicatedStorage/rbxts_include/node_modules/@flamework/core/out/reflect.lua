-- Script Hash: ecee3d9409653cebe2b3e6f64cc544c3dfce4b329b3a5a3ba0eec427fc36e3e53f70c1eba40418a3a4a055b530a91296
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local v2 = setmetatable({}, {
	__mode = "k"
});
v1.metadata = v2;
local v3 = {};
v1.decorators = v3;
local v4 = {};
v1.idToObj = v4;
local v5 = {};
v1.objToId = v5;
local u1 = {};
local function u2(p1, p2, p3)
	local v6 = p2;
	if v6 == nil then
		v6 = u1;
	end;
	if not p3 then
		local v7 = v2[p1];
		if v7 ~= nil then
			v7 = v7[v6];
		end;
		return v7;
	end;
	local v8 = v2[p1];
	if not v8 then
		v8 = {};
		v2[p1] = v8;
	end;
	local v9 = v8[v6];
	if not v9 then
		v9 = {};
		v8[v6] = v9;
	end;
	return v9;
end;
function v1.defineMetadata(p4, p5, p6, p7)
	if p5 == "identifier" then
		assert(type(p6) == "string", "identifier must be a string.");
		assert(v5[p4] == nil, "obj is already registered.");
		assert(v4[p6] == nil, "id is already registered.");
		v5[p4] = p6;
		v4[p6] = p4;
	end;
	u2(p4, p7, true)[p5] = p6;
end;
function v1.defineMetadataBatch(p8, p9, p10)
	local v10 = u2(p8, p10, true);
	for v11, v12 in pairs(p9) do
		v10[v11] = v12;
	end;
end;
function v1.deleteMetadata(p11, p12, p13)
	local v13 = u2(p11, p13);
	if v13 ~= nil then
		v13[p12] = nil;
	end;
end;
local function v14(p14, p15, p16)
	local v15 = u2(p14, p16);
	if v15 ~= nil then
		v15 = v15[p15];
	end;
	return v15;
end;
v1.getOwnMetadata = v14;
local function v16(p17, p18, p19)
	local v17 = u2(p17, p19);
	if v17 ~= nil then
		v17 = v17[p18] ~= nil;
	end;
	local v18 = v17;
	if v18 == nil then
		v18 = false;
	end;
	return v18;
end;
v1.hasOwnMetadata = v16;
local function v19(p20, p21)
	local v20 = {};
	local v21 = u2(p20, p21);
	if v21 ~= nil then
		local function v22(p22, p23)
			table.insert(v20, p23);
			return #v20;
		end;
		for v23, v24 in pairs(v21) do
			v22(v24, v23, v21);
		end;
	end;
	return v20;
end;
v1.getOwnMetadataKeys = v19;
local function v25(p24)
	local v26 = v2[p24];
	if not v26 then
		return {};
	end;
	local v27 = {};
	for v28, v29 in pairs(v26) do
		if v28 ~= u1 then
			table.insert(v27, v28);
		end;
	end;
	return v27;
end;
v1.getOwnProperties = v25;
local function u3(p25)
	local v30 = getmetatable(p25);
	if not v30 or type(v30) ~= "table" then
		return;
	end;
	return rawget(v30, "__index");
end;
local function u4(p26, p27, p28)
	local v31 = {};
	local v32 = v14(p26, p27, p28);
	if v32 ~= nil then
		table.insert(v31, v32);
	end;
	local v33 = u3(p26);
	if v33 then
		local v34 = u4(v33, p27, p28);
		local function v35(p29)
			table.insert(v31, p29);
			return #v31;
		end;
		for v36, v37 in ipairs(v34) do
			v35(v37, v36 - 1, v34);
		end;
	end;
	return v31;
end;
v1.getMetadatas = u4;
local function u5(p30, p31, p32)
	local v38 = v14(p30, p31, p32);
	if v38 ~= nil then
		return v38;
	end;
	local v39 = u3(p30);
	if not v39 then
		return;
	end;
	return u5(v39, p31, p32);
end;
v1.getMetadata = u5;
local function u6(p33, p34, p35)
	local v40 = v16(p33, p34, p35);
	if v40 then
		return v40;
	end;
	local v41 = u3(p33);
	if not v41 then
		return false;
	end;
	return u6(v41, p34, p35);
end;
v1.hasMetadata = u6;
local function u7(p36, p37)
	local v42 = {};
	for v43, v44 in ipairs(v19(p36, p37)) do
		v42[v44] = true;
	end;
	local v45 = u3(p36);
	if v45 then
		local v46 = u7(v45, p37);
		local function v47(p38)
			v42[p38] = true;
			return v42;
		end;
		for v48, v49 in ipairs(v46) do
			v47(v49, v48 - 1, v46);
		end;
	end;
	local v50 = {};
	local v51 = #v50;
	for v52, v53 in pairs(v42) do
		v51 = v51 + 1;
		v50[v51] = v52;
	end;
	return v50;
end;
v1.getMetadataKeys = u7;
local function u8(p39)
	local v54 = {};
	for v55, v56 in ipairs(v25(p39)) do
		v54[v56] = true;
	end;
	local v57 = u3(p39);
	if v57 then
		local v58 = u8(v57);
		local function v59(p40)
			v54[p40] = true;
			return v54;
		end;
		for v60, v61 in ipairs(v58) do
			v59(v61, v60 - 1, v58);
		end;
	end;
	local v62 = {};
	local v63 = #v62;
	for v64, v65 in pairs(v54) do
		v63 = v63 + 1;
		v62[v63] = v64;
	end;
	return v62;
end;
v1.getProperties = u8;
function v1.decorate(p41, p42, p43, p44, p45, p46)
	if p46 == nil then
		p46 = false;
	end;
	if p45 == nil then
		local v66 = v3[p42];
		if not v66 then
			v66 = {};
			v3[p42] = v66;
		end;
		table.insert(v66, p41);
	end;
	p43.func({
		id = p42, 
		isStatic = p46, 
		object = p41, 
		property = p45
	}, p44);
end;
return {
	Reflect = v1
};
