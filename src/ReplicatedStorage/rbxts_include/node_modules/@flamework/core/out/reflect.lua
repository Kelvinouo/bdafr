-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local v2 = setmetatable({}, {
	__mode = "k"
});
v1.metadata = v2;
local v3 = {};
v1.decorators = v3;
local v4 = {};
v1.idToObj = v4;
local v5 = {};
v1.objToId = v5;
local u1 = {};
local function u2(p1, p2, p3)
	local v6 = p2;
	if v6 == nil then
		v6 = u1;
	end;
	if not p3 then
		local v7 = v2[p1];
		if v7 ~= nil then
			v7 = v7[v6];
		end;
		return v7;
	end;
	local v8 = v2[p1];
	if not v8 then
		v8 = {};
		v2[p1] = v8;
	end;
	local v9 = v8[v6];
	if not v9 then
		v9 = {};
		v8[v6] = v9;
	end;
	return v9;
end;
function v1.defineMetadata(p4, p5, p6, p7)
	if p5 == "identifier" then
		assert(type(p6) == "string", "identifier must be a string.");
		assert(v5[p4] == nil, "obj is already registered.");
		assert(v4[p6] == nil, "id is already registered.");
		v5[p4] = p6;
		v4[p6] = p4;
	end;
	u2(p4, p7, true)[p5] = p6;
end;
function v1.defineMetadataBatch(p8, p9, p10)
	local v10 = u2(p8, p10, true);
	for v11, v12 in pairs(p9) do
		v10[v11] = v12;
	end;
end;
function v1.deleteMetadata(p11, p12, p13)
	local v13 = u2(p11, p13);
	if v13 ~= nil then
		v13[p12] = nil;
	end;
end;
function v1.getOwnMetadata(p14, p15, p16)
	local v14 = u2(p14, p16);
	if v14 ~= nil then
		v14 = v14[p15];
	end;
	return v14;
end;
function v1.hasOwnMetadata(p17, p18, p19)
	local v15 = u2(p17, p19);
	if v15 ~= nil then
		v15 = v15[p18] ~= nil;
	end;
	local v16 = v15;
	if v16 == nil then
		v16 = false;
	end;
	return v16;
end;
local function v17(p20, p21)
	local v18 = {};
	local v19 = u2(p20, p21);
	if v19 ~= nil then
		for v20, v21 in pairs(v19) do
			table.insert(v18, v20);
		end;
	end;
	return v18;
end;
v1.getOwnMetadataKeys = v17;
local function v22(p22)
	local v23 = v2[p22];
	if not v23 then
		return {};
	end;
	local v24 = {};
	for v25 in pairs(v23) do
		if v25 ~= u1 then
			table.insert(v24, v25);
		end;
	end;
	return v24;
end;
v1.getOwnProperties = v22;
local function u3(p23, p24, p25)
	local v26 = {};
	local v27 = u2(p23, p25);
	if v27 ~= nil then
		v27 = v27[p24];
	end;
	if v27 ~= nil then
		table.insert(v26, v27);
	end;
	local v28 = getmetatable(p23);
	if v28 and type(v28) == "table" then
		local v29 = rawget(v28, "__index");
	else
		v29 = nil;
	end;
	if v29 then
		for v30, v31 in ipairs((u3(v29, p24, p25))) do
			table.insert(v26, v31);
		end;
	end;
	return v26;
end;
v1.getMetadatas = u3;
local function u4(p26, p27, p28)
	local v32 = u2(p26, p28);
	if v32 ~= nil then
		v32 = v32[p27];
	end;
	if v32 ~= nil then
		return v32;
	end;
	local v33 = getmetatable(p26);
	if v33 and type(v33) == "table" then
		local v34 = rawget(v33, "__index");
	else
		v34 = nil;
	end;
	if not v34 then
		return;
	end;
	return u4(v34, p27, p28);
end;
v1.getMetadata = u4;
local function u5(p29, p30, p31)
	local v35 = u2(p29, p31);
	if v35 ~= nil then
		v35 = v35[p30] ~= nil;
	end;
	local v36 = v35;
	if v36 == nil then
		v36 = false;
	end;
	if v36 then
		return v36;
	end;
	local v37 = getmetatable(p29);
	if v37 and type(v37) == "table" then
		local v38 = rawget(v37, "__index");
	else
		v38 = nil;
	end;
	if not v38 then
		return false;
	end;
	return u5(v38, p30, p31);
end;
v1.hasMetadata = u5;
local function u6(p32, p33)
	local v39 = {};
	for v40, v41 in ipairs((v17(p32, p33))) do
		v39[v41] = true;
	end;
	local v42 = getmetatable(p32);
	if v42 and type(v42) == "table" then
		local v43 = rawget(v42, "__index");
	else
		v43 = nil;
	end;
	if v43 then
		for v44, v45 in ipairs((u6(v43, p33))) do
			v39[v45] = true;
		end;
	end;
	local v46 = {};
	local v47 = #v46;
	for v48 in pairs(v39) do
		v47 = v47 + 1;
		v46[v47] = v48;
	end;
	return v46;
end;
v1.getMetadataKeys = u6;
local function u7(p34)
	local v49 = {};
	for v50, v51 in ipairs((v22(p34))) do
		v49[v51] = true;
	end;
	local v52 = getmetatable(p34);
	if v52 and type(v52) == "table" then
		local v53 = rawget(v52, "__index");
	else
		v53 = nil;
	end;
	if v53 then
		for v54, v55 in ipairs((u7(v53))) do
			v49[v55] = true;
		end;
	end;
	local v56 = {};
	local v57 = #v56;
	for v58 in pairs(v49) do
		v57 = v57 + 1;
		v56[v57] = v58;
	end;
	return v56;
end;
v1.getProperties = u7;
function v1.decorate(p35, p36, p37, p38, p39, p40)
	if p40 == nil then
		p40 = false;
	end;
	if p39 == nil then
		local v59 = v3[p36];
		if not v59 then
			v59 = {};
			v3[p36] = v59;
		end;
		table.insert(v59, p35);
	end;
	p37.func({
		id = p36, 
		isStatic = p40, 
		object = p35, 
		property = p39
	}, p38);
end;
return {
	Reflect = v1
};
