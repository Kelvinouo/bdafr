-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local v2 = setmetatable({}, {
	__mode = "k"
});
v1.metadata = v2;
local v3 = {};
v1.decorators = v3;
local v4 = {};
v1.idToObj = v4;
local v5 = {};
v1.objToId = v5;
local u1 = {};
local u2 = v2;
local function u3(p1, p2, p3)
	local v6 = p2;
	if v6 == nil then
		v6 = u1;
	end;
	if not p3 then
		local v7 = u2[p1];
		if v7 ~= nil then
			v7 = v7[v6];
		end;
		return v7;
	end;
	local v8 = u2[p1];
	if not v8 then
		v8 = {};
		u2[p1] = v8;
	end;
	local v9 = v8[v6];
	if not v9 then
		v9 = {};
		v8[v6] = v9;
	end;
	return v9;
end;
function v1.defineMetadata(p4, p5, p6, p7)
	if p5 == "identifier" then
		assert(type(p6) == "string", "identifier must be a string.");
		assert(v5[p4] == nil, "obj is already registered.");
		assert(v4[p6] == nil, "id is already registered.");
		v5[p4] = p6;
		v4[p6] = p4;
	end;
	u3(p4, p7, true)[p5] = p6;
end;
function v1.defineMetadataBatch(p8, p9, p10)
	local v10 = u3(p8, p10, true);
	for v11, v12 in pairs(p9) do
		v10[v11] = v12;
	end;
end;
function v1.deleteMetadata(p11, p12, p13)
	local v13 = u3(p11, p13);
	if v13 ~= nil then
		v13[p12] = nil;
	end;
end;
function v1.getOwnMetadata(p14, p15, p16)
	local v14 = u3(p14, p16);
	if v14 ~= nil then
		v14 = v14[p15];
	end;
	return v14;
end;
function v1.hasOwnMetadata(p17, p18, p19)
	local v15 = u3(p17, p19);
	if v15 ~= nil then
		v15 = v15[p18] ~= nil;
	end;
	local v16 = v15;
	if v16 == nil then
		v16 = false;
	end;
	return v16;
end;
local function v17(p20, p21)
	local v18 = u3(p20, p21);
	local v19 = {};
	if v18 ~= nil then
		for v20, v21 in pairs(v18) do
			table.insert(v19, v20);
		end;
	end;
	return v19;
end;
v1.getOwnMetadataKeys = v17;
local function v22(p22)
	local v23 = u2[p22];
	if not v23 then
		return {};
	end;
	local v24 = {};
	for v25 in pairs(v23) do
		if v25 ~= u1 then
			table.insert(v24, v25);
		end;
	end;
	return v24;
end;
v1.getOwnProperties = v22;
local function u4(p23, p24, p25)
	local v26 = {};
	local v27 = u3(p23, p25);
	if v27 ~= nil then
		v27 = v27[p24];
	end;
	if v27 ~= nil then
		table.insert(v26, v27);
	end;
	local v28 = getmetatable(p23);
	if v28 and type(v28) == "table" then
		local v29 = rawget(v28, "__index");
	else
		v29 = nil;
	end;
	if v29 then
		local v30, v31, v32 = ipairs((u4(v29, p24, p25)));
		while true do
			v30(v31, v32);
			if not v30 then
				break;
			end;
			v32 = v30;
			table.insert(v26, v31);		
		end;
	end;
	return v26;
end;
v1.getMetadatas = u4;
local function u5(p26, p27, p28)
	local v33 = u3(p26, p28);
	if v33 ~= nil then
		v33 = v33[p27];
	end;
	if v33 ~= nil then
		return v33;
	end;
	local v34 = getmetatable(p26);
	if v34 and type(v34) == "table" then
		local v35 = rawget(v34, "__index");
	else
		v35 = nil;
	end;
	if not v35 then
		return;
	end;
	return u5(v35, p27, p28);
end;
v1.getMetadata = u5;
local function u6(p29, p30, p31)
	local v36 = u3(p29, p31);
	if v36 ~= nil then
		v36 = v36[p30] ~= nil;
	end;
	local v37 = v36;
	if v37 == nil then
		v37 = false;
	end;
	if v37 then
		return v37;
	end;
	local v38 = getmetatable(p29);
	if v38 and type(v38) == "table" then
		local v39 = rawget(v38, "__index");
	else
		v39 = nil;
	end;
	if not v39 then
		return false;
	end;
	return u6(v39, p30, p31);
end;
v1.hasMetadata = u6;
local function u7(p32, p33)
	local v40 = {};
	local v41, v42, v43 = ipairs((v17(p32, p33)));
	while true do
		v41(v42, v43);
		if not v41 then
			break;
		end;
		v43 = v41;
		v40[v42] = true;	
	end;
	local v44 = getmetatable(p32);
	if v44 and type(v44) == "table" then
		local v45 = rawget(v44, "__index");
	else
		v45 = nil;
	end;
	if v45 then
		local v46, v47, v48 = ipairs((u7(v45, p33)));
		while true do
			v46(v47, v48);
			if not v46 then
				break;
			end;
			v48 = v46;
			v40[v47] = true;		
		end;
	end;
	local v49 = {};
	local v50 = #v49;
	for v51 in pairs(v40) do
		v50 = v50 + 1;
		v49[v50] = v51;
	end;
	return v49;
end;
v1.getMetadataKeys = u7;
local function u8(p34)
	local v52 = {};
	local v53, v54, v55 = ipairs((v22(p34)));
	while true do
		v53(v54, v55);
		if not v53 then
			break;
		end;
		v55 = v53;
		v52[v54] = true;	
	end;
	local v56 = getmetatable(p34);
	if v56 and type(v56) == "table" then
		local v57 = rawget(v56, "__index");
	else
		v57 = nil;
	end;
	if v57 then
		local v58, v59, v60 = ipairs((u8(v57)));
		while true do
			v58(v59, v60);
			if not v58 then
				break;
			end;
			v60 = v58;
			v52[v59] = true;		
		end;
	end;
	local v61 = {};
	local v62 = #v61;
	for v63 in pairs(v52) do
		v62 = v62 + 1;
		v61[v62] = v63;
	end;
	return v61;
end;
v1.getProperties = u8;
function v1.decorate(p35, p36, p37, p38, p39, p40)
	if p40 == nil then
		p40 = false;
	end;
	if p39 == nil then
		local v64 = v3[p36];
		if not v64 then
			v64 = {};
			v3[p36] = v64;
		end;
		table.insert(v64, p35);
	end;
	p37.func({
		id = p36, 
		isStatic = p40, 
		object = p35, 
		property = p39
	}, p38);
end;
u2 = {
	Reflect = v1
};
return u2;
