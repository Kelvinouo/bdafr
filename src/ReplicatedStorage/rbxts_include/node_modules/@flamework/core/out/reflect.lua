-- Script Hash: d8bfae67c243224353b8116960b2444737094d601d0dc237181c19f77edd614be411127d1480e2890b6d8a0089b11742
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local v2 = setmetatable({}, {
	__mode = "k"
});
v1.metadata = v2;
local v3 = {};
v1.decorators = v3;
local v4 = {};
v1.idToObj = v4;
local v5 = {};
v1.objToId = v5;
local u1 = {};
local function u2(p1, p2, p3)
	local v6 = p2;
	if v6 == nil then
		v6 = u1;
	end;
	if not p3 then
		local v7 = v2[p1];
		if v7 ~= nil then
			v7 = v7[v6];
		end;
		return v7;
	end;
	local v8 = v2[p1];
	if not v8 then
		v8 = {};
		v2[p1] = v8;
	end;
	local v9 = v8[v6];
	if not v9 then
		v9 = {};
		v8[v6] = v9;
	end;
	return v9;
end;
function v1.defineMetadata(p4, p5, p6, p7)
	if p5 == "identifier" then
		assert(type(p6) == "string", "identifier must be a string.");
		assert(v5[p4] == nil, "obj is already registered.");
		assert(v4[p6] == nil, "id is already registered.");
		v5[p4] = p6;
		v4[p6] = p4;
	end;
	u2(p4, p7, true)[p5] = p6;
end;
function v1.defineMetadataBatch(p8, p9, p10)
	local v10 = u2(p8, p10, true);
	for v11, v12 in pairs(p9) do
		v10[v11] = v12;
	end;
end;
function v1.deleteMetadata(p11, p12, p13)
	local v13 = u2(p11, p13);
	if v13 ~= nil then
		v13[p12] = nil;
	end;
end;
local function v14(p14, p15, p16)
	local v15 = u2(p14, p16);
	if v15 ~= nil then
		v15 = v15[p15];
	end;
	return v15;
end;
v1.getOwnMetadata = v14;
local function v16(p17, p18, p19)
	local v17 = u2(p17, p19);
	if v17 ~= nil then
		v17 = v17[p18] ~= nil;
	end;
	local v18 = v17;
	if v18 == nil then
		v18 = false;
	end;
	return v18;
end;
v1.hasOwnMetadata = v16;
local function v19(p20, p21)
	local v20 = {};
	local v21 = u2(p20, p21);
	if v21 ~= nil then
		local function v22(p22, p23)
			table.insert(v20, p23);
			return #v20;
		end;
		for v23, v24 in pairs(v21) do
			v22(v24, v23, v21);
		end;
	end;
	return v20;
end;
v1.getOwnMetadataKeys = v19;
local function v25(p24)
	local v26 = v2[p24];
	if not v26 then
		return {};
	end;
	local v27 = {};
	for v28 in pairs(v26) do
		if v28 ~= u1 then
			table.insert(v27, v28);
		end;
	end;
	return v27;
end;
v1.getOwnProperties = v25;
local function u3(p25)
	local v29 = getmetatable(p25);
	if not v29 or type(v29) ~= "table" then
		return;
	end;
	return rawget(v29, "__index");
end;
local function u4(p26, p27, p28)
	local v30 = {};
	local v31 = v14(p26, p27, p28);
	if v31 ~= nil then
		table.insert(v30, v31);
	end;
	local v32 = u3(p26);
	if v32 then
		local v33 = u4(v32, p27, p28);
		local function v34(p29)
			table.insert(v30, p29);
			return #v30;
		end;
		for v35, v36 in ipairs(v33) do
			v34(v36, v35 - 1, v33);
		end;
	end;
	return v30;
end;
v1.getMetadatas = u4;
local function u5(p30, p31, p32)
	local v37 = v14(p30, p31, p32);
	if v37 ~= nil then
		return v37;
	end;
	local v38 = u3(p30);
	if not v38 then
		return;
	end;
	return u5(v38, p31, p32);
end;
v1.getMetadata = u5;
local function u6(p33, p34, p35)
	local v39 = v16(p33, p34, p35);
	if v39 then
		return v39;
	end;
	local v40 = u3(p33);
	if not v40 then
		return false;
	end;
	return u6(v40, p34, p35);
end;
v1.hasMetadata = u6;
local function u7(p36, p37)
	local v41 = {};
	for v42, v43 in ipairs(v19(p36, p37)) do
		v41[v43] = true;
	end;
	local v44 = u3(p36);
	if v44 then
		local v45 = u7(v44, p37);
		local function v46(p38)
			v41[p38] = true;
			return v41;
		end;
		for v47, v48 in ipairs(v45) do
			v46(v48, v47 - 1, v45);
		end;
	end;
	local v49 = {};
	local v50 = #v49;
	for v51 in pairs(v41) do
		v50 = v50 + 1;
		v49[v50] = v51;
	end;
	return v49;
end;
v1.getMetadataKeys = u7;
local function u8(p39)
	local v52 = {};
	for v53, v54 in ipairs(v25(p39)) do
		v52[v54] = true;
	end;
	local v55 = u3(p39);
	if v55 then
		local v56 = u8(v55);
		local function v57(p40)
			v52[p40] = true;
			return v52;
		end;
		for v58, v59 in ipairs(v56) do
			v57(v59, v58 - 1, v56);
		end;
	end;
	local v60 = {};
	local v61 = #v60;
	for v62 in pairs(v52) do
		v61 = v61 + 1;
		v60[v61] = v62;
	end;
	return v60;
end;
v1.getProperties = u8;
function v1.decorate(p41, p42, p43, p44, p45, p46)
	if p46 == nil then
		p46 = false;
	end;
	if p45 == nil then
		local v63 = v3[p42];
		if not v63 then
			v63 = {};
			v3[p42] = v63;
		end;
		table.insert(v63, p41);
	end;
	p43.func({
		id = p42, 
		isStatic = p46, 
		object = p41, 
		property = p45
	}, p44);
end;
return {
	Reflect = v1
};
