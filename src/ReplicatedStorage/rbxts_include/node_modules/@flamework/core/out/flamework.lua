-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v3 = {};
local v4 = {
	isDefault = true
};
v3.flameworkConfig = v4;
v3.isInitialized = false;
local l__Reflect__1 = v1.import(script, script.Parent, "reflect").Reflect;
local u2 = nil;
local l__Modding__3 = v1.import(script, script.Parent, "modding").Modding;
function v3.resolveDependency(p1)
	local v5 = l__Reflect__1.idToObj[p1];
	if v5 == nil then
		error("Dependency " .. p1 .. " could not be found.");
	end;
	if not u2(v5) then
		error("Dependency " .. p1 .. " did not resolve to a constructor.");
	end;
	return l__Modding__3.resolveSingleton(v5);
end;
local l__RunService__4 = v2.RunService;
local l__Players__5 = v2.Players;
function v3._addPaths(...)
	local v6 = {};
	local v7, v8, v9 = ipairs({ ... });
	while true do
		local v10, v11 = v7(v8, v9);
		if not v10 then
			break;
		end;
		local v12 = table.remove(v11, 1);
		local v13 = game:GetService(v12);
		if v12 == "StarterPlayer" then
			if v11[1] ~= "StarterPlayerScripts" then
				error("StarterPlayer only supports StarterPlayerScripts");
			end;
			if not l__RunService__4:IsClient() then
				error("The server cannot load StarterPlayer content");
			end;
			v13 = l__Players__5.LocalPlayer:WaitForChild("PlayerScripts");
			table.remove(v11, 1);
		end;
		local v14 = 0;
		local v15 = false;
		while true do
			if v15 then
				v14 = v14 + 1;
			else
				v15 = true;
			end;
			if not (v14 < #v11) then
				break;
			end;
			v13 = v13:WaitForChild(v11[v14 + 1]);		
		end;
		table.insert(v6, v13);	
	end;
	local function v16(p2)
		local v17 = os.clock();
		local v18, v19 = pcall(require, p2);
		local v20 = v18 and {
			success = true, 
			value = v19
		} or {
			success = false, 
			error = v19
		};
		local v21 = math.floor((os.clock() - v17) * 1000);
		if not v20.success then
			error(p2:GetFullName() .. " failed to preload (" .. tostring(v21) .. "ms): " .. v20.error);
		end;
	end;
	local v22, v23, v24 = ipairs(v6);
	while true do
		local v25, v26 = v22(v23, v24);
		if not v25 then
			break;
		end;
		if v26:IsA("ModuleScript") then
			v16(v26);
		end;
		for v27, v28 in ipairs(v26:GetDescendants()) do
			if v28:IsA("ModuleScript") then
				v16(v28);
			end;
		end;	
	end;
end;
function v3._implements(p3, p4)
	for v29, v30 in ipairs((l__Reflect__1.getMetadatas(p3, "flamework:implements"))) do
		if table.find(v30, p4) ~= nil then
			return true;
		end;
	end;
	return false;
end;
u2 = function(p5)
	local v31 = false;
	if p5.new ~= nil then
		v31 = p5.constructor ~= nil;
	end;
	return v31;
end;
local u6 = {};
function v3.registerExternalClass(p6)
	u6[p6] = true;
end;
local u7 = false;
local u8 = v4;
local u9 = v3;
function u9.ignite(p7)
	if u7 then
		error("Flamework.ignite() should only be called once");
	end;
	u7 = true;
	if p7 then
		for v32, v33 in pairs(p7) do
			u8[v32] = v33;
		end;
	end;
	for v34, v35 in pairs(l__Reflect__1.objToId) do
		if not l__RunService__4:IsServer() or l__Modding__3.getDecorator(v34, nil, "$:flamework@Service") ~= nil then
			if l__RunService__4:IsClient() then
				if l__Modding__3.getDecorator(v34, nil, "$:flamework@Controller") ~= nil and u2(v34) and (not u8.loadOverride or table.find(u8.loadOverride, v34) ~= nil or l__Reflect__1.getOwnMetadata(v34, "flamework:isPatched")) and (not l__Reflect__1.getOwnMetadata(v34, "flamework:isExternal") or u6[v34] ~= nil) then
					l__Modding__3.resolveSingleton(v34);
				end;
			elseif u2(v34) and (not u8.loadOverride or table.find(u8.loadOverride, v34) ~= nil or l__Reflect__1.getOwnMetadata(v34, "flamework:isPatched")) and (not l__Reflect__1.getOwnMetadata(v34, "flamework:isExternal") or u6[v34] ~= nil) then
				l__Modding__3.resolveSingleton(v34);
			end;
		end;
	end;
	local v36 = {};
	if l__RunService__4:IsServer() then
		local v37 = "$:flamework@Service";
	else
		v37 = "$:flamework@Controller";
	end;
	for v38 in pairs(l__Modding__3.getSingletons()) do
		local v39 = l__Modding__3.getDecorator(v38, nil, v37);
		if v39 and (not l__Reflect__1.getOwnMetadata(v38, "flamework:isExternal") or u6[v38] ~= nil) then
			table.insert(v36, { l__Modding__3.resolveSingleton(v38), v39.arguments[1] or {} });
		end;
	end;
	local v40 = {};
	local v41 = {};
	table.sort(v36, function(p8, p9)
		local v42 = p8[2].loadOrder;
		if v42 == nil then
			v42 = 1;
		end;
		local v43 = p9[2].loadOrder;
		if v43 == nil then
			v43 = 1;
		end;
		return v42 < v43;
	end);
	local u10 = {};
	l__Modding__3.onListenerAdded(function(p10)
		u10[p10] = true;
		return u10;
	end, "$:flamework@OnTick");
	local u11 = {};
	l__Modding__3.onListenerAdded(function(p11)
		u11[p11] = true;
		return u11;
	end, "$:flamework@OnPhysics");
	local u12 = {};
	l__Modding__3.onListenerAdded(function(p12)
		u12[p12] = true;
		return u12;
	end, "$:flamework@OnRender");
	l__Modding__3.onListenerRemoved(function(p13)
		u10[p13] = nil;
		return u10[p13] ~= nil;
	end, "$:flamework@OnTick");
	l__Modding__3.onListenerRemoved(function(p14)
		u11[p14] = nil;
		return u11[p14] ~= nil;
	end, "$:flamework@OnPhysics");
	l__Modding__3.onListenerRemoved(function(p15)
		u12[p15] = nil;
		return u12[p15] ~= nil;
	end, "$:flamework@OnRender");
	local v44, v45, v46 = ipairs(v36);
	while true do
		local v47, v48 = v44(v45, v46);
		if not v47 then
			break;
		end;
		local v49 = v48[1];
		if v3._implements(v49, "$:flamework@OnInit") then
			table.insert(v41, v49);
		end;
		if v3._implements(v49, "$:flamework@OnStart") then
			table.insert(v40, v49);
		end;	
	end;
	for v50, v51 in ipairs(v41) do
		debug.setmemorycategory(l__Reflect__1.getMetadata(v51, "identifier"));
		local v52 = v51:onInit();
		if v1.Promise.is(v52) then
			v52:await();
		end;
		debug.resetmemorycategory();
	end;
	u9.isInitialized = true;
	l__RunService__4.Heartbeat:Connect(function(p16)
		for v53 in pairs(u10) do
			task.spawn(function()
				return v53:onTick(p16);
			end);
		end;
	end);
	l__RunService__4.Stepped:Connect(function(p17, p18)
		for v54 in pairs(u11) do
			task.spawn(function()
				return v54:onPhysics(p18, p17);
			end);
		end;
	end);
	if l__RunService__4:IsClient() then
		l__RunService__4.RenderStepped:Connect(function(p19)
			for v55 in pairs(u12) do
				task.spawn(function()
					return v55:onRender(p19);
				end);
			end;
		end);
	end;
	for v56, v57 in ipairs(v40) do
		task.spawn(function()
			debug.setmemorycategory(l__Reflect__1.getMetadata(v57, "identifier"));
			v57:onStart();
		end);
	end;
	return v36;
end;
u9.Testing = {
	patchDependency = function(p20, p21)
		if p21 == nil then
			error("Patching failed, no ID");
		end;
		local v58 = l__Reflect__1.idToObj[p21];
		if v58 == nil then
			error("Dependency " .. p21 .. " was not found and cannot be patched.");
		end;
		if l__Modding__3.getSingletons()[v58] ~= nil then
			error(p21 .. " has already been resolved, continuing is unsafe");
		end;
		local v59 = l__Reflect__1.metadata[v58];
		if not v59 then
			error("Dependency " .. p21 .. " has no existing metadata.");
		end;
		l__Reflect__1.defineMetadata(v58, "flamework:isPatched", true);
		l__Reflect__1.metadata[v58] = nil;
		l__Reflect__1.metadata[p20] = v59;
		l__Reflect__1.objToId[p20] = p21;
		l__Reflect__1.idToObj[p21] = p20;
	end
};
u9 = l__Modding__3.createMetaDecorator;
u8 = "Class";
u9 = u9(u8);
u8 = l__Modding__3.createMetaDecorator;
u8 = u8("Class");
return {
	Flamework = v3, 
	Service = u9, 
	Controller = u8, 
	External = l__Modding__3.createDecorator("Class", function(p22)
		l__Reflect__1.defineMetadata(p22.object, "flamework:isExternal", true);
	end)
};
