-- Script Hash: a832d6ae748540858be7938f6912d04adeb7b48ee65def3170776b7c06dab447b3f4c79fd24ee041a082ca08b3d0b0d8
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v3 = {};
local v4 = {
	isDefault = true
};
v3.flameworkConfig = v4;
v3.isInitialized = false;
local l__Reflect__1 = v1.import(script, script.Parent, "reflect").Reflect;
local u2 = nil;
local l__Modding__3 = v1.import(script, script.Parent, "modding").Modding;
function v3.resolveDependency(p1)
	local v5 = l__Reflect__1.idToObj[p1];
	if v5 == nil then
		error("Dependency " .. p1 .. " could not be found.");
	end;
	if not u2(v5) then
		error("Dependency " .. p1 .. " did not resolve to a constructor.");
	end;
	return l__Modding__3.resolveSingleton(v5);
end;
local l__RunService__4 = v2.RunService;
local l__Players__5 = v2.Players;
function v3._addPaths(...)
	local v6 = {};
	local v7, v8, v9 = ipairs({ ... });
	while true do
		local v10, v11 = v7(v8, v9);
		if not v10 then
			break;
		end;
		local v12 = table.remove(v11, 1);
		local v13 = game:GetService(v12);
		if v12 == "StarterPlayer" then
			if v11[1] ~= "StarterPlayerScripts" then
				error("StarterPlayer only supports StarterPlayerScripts");
			end;
			if not l__RunService__4:IsClient() then
				error("The server cannot load StarterPlayer content");
			end;
			v13 = l__Players__5.LocalPlayer:WaitForChild("PlayerScripts");
			table.remove(v11, 1);
		end;
		local v14 = 0;
		local v15 = false;
		while true do
			if v15 then
				v14 = v14 + 1;
			else
				v15 = true;
			end;
			if not (v14 < #v11) then
				break;
			end;
			v13 = v13:WaitForChild(v11[v14 + 1]);		
		end;
		table.insert(v6, v13);	
	end;
	local function v16(p2)
		local v17 = os.clock();
		local v18, v19 = pcall(require, p2);
		local v20 = v18 and {
			success = true, 
			value = v19
		} or {
			success = false, 
			error = v19
		};
		local v21 = math.floor((os.clock() - v17) * 1000);
		if not v20.success then
			error(p2:GetFullName() .. " failed to preload (" .. tostring(v21) .. "ms): " .. v20.error);
		end;
	end;
	local v22, v23, v24 = ipairs(v6);
	while true do
		local v25, v26 = v22(v23, v24);
		if not v25 then
			break;
		end;
		if v26:IsA("ModuleScript") then
			v16(v26);
		end;
		for v27, v28 in ipairs(v26:GetDescendants()) do
			if v28:IsA("ModuleScript") then
				v16(v28);
			end;
		end;	
	end;
end;
function v3._implements(p3, p4)
	local v29 = l__Reflect__1.getMetadatas(p3, "flamework:implements");
	local function v30(p5)
		return table.find(p5, p4) ~= nil;
	end;
	for v31, v32 in ipairs(v29) do
		if v30(v32, v31 - 1, v29) then
			return true;
		end;
	end;
	return false;
end;
u2 = function(p6)
	local v33 = false;
	if p6.new ~= nil then
		v33 = p6.constructor ~= nil;
	end;
	return v33;
end;
local u6 = {};
function v3.registerExternalClass(p7)
	u6[p7] = true;
end;
local u7 = false;
local u8 = v4;
local function u9(p8)
	return l__Modding__3.getDecorator(p8, nil, "$:flamework@Service") ~= nil;
end;
local function u10(p9)
	return l__Modding__3.getDecorator(p9, nil, "$:flamework@Controller") ~= nil;
end;
local u11 = v3;
function u11.ignite(p10)
	if u7 then
		error("Flamework.ignite() should only be called once");
	end;
	u7 = true;
	if p10 then
		for v34, v35 in pairs(p10) do
			u8[v34] = v35;
		end;
	end;
	for v36, v37 in pairs(l__Reflect__1.objToId) do
		if (not l__RunService__4:IsServer() or u9(v36)) and ((not l__RunService__4:IsClient() or u10(v36)) and u2(v36)) and (not u8.loadOverride or table.find(u8.loadOverride, v36) ~= nil or l__Reflect__1.getOwnMetadata(v36, "flamework:isPatched")) and (not l__Reflect__1.getOwnMetadata(v36, "flamework:isExternal") or u6[v36] ~= nil) then
			l__Modding__3.resolveSingleton(v36);
		end;
	end;
	local v38 = {};
	if l__RunService__4:IsServer() then
		local v39 = "$:flamework@Service";
	else
		v39 = "$:flamework@Controller";
	end;
	for v40 in pairs(l__Modding__3.getSingletons()) do
		local v41 = l__Modding__3.getDecorator(v40, nil, v39);
		if v41 and (not l__Reflect__1.getOwnMetadata(v40, "flamework:isExternal") or u6[v40] ~= nil) then
			table.insert(v38, { l__Modding__3.resolveSingleton(v40), v41.arguments[1] or {} });
		end;
	end;
	local v42 = {};
	local v43 = {};
	table.sort(v38, function(p11, p12)
		local v44 = p11[2].loadOrder;
		if v44 == nil then
			v44 = 1;
		end;
		local v45 = p12[2].loadOrder;
		if v45 == nil then
			v45 = 1;
		end;
		return v44 < v45;
	end);
	local u12 = {};
	l__Modding__3.onListenerAdded(function(p13)
		u12[p13] = true;
		return u12;
	end, "$:flamework@OnTick");
	local u13 = {};
	l__Modding__3.onListenerAdded(function(p14)
		u13[p14] = true;
		return u13;
	end, "$:flamework@OnPhysics");
	local u14 = {};
	l__Modding__3.onListenerAdded(function(p15)
		u14[p15] = true;
		return u14;
	end, "$:flamework@OnRender");
	l__Modding__3.onListenerRemoved(function(p16)
		u12[p16] = nil;
		return u12[p16] ~= nil;
	end, "$:flamework@OnTick");
	l__Modding__3.onListenerRemoved(function(p17)
		u13[p17] = nil;
		return u13[p17] ~= nil;
	end, "$:flamework@OnPhysics");
	l__Modding__3.onListenerRemoved(function(p18)
		u14[p18] = nil;
		return u14[p18] ~= nil;
	end, "$:flamework@OnRender");
	local v46, v47, v48 = ipairs(v38);
	while true do
		local v49, v50 = v46(v47, v48);
		if not v49 then
			break;
		end;
		local v51 = v50[1];
		if v3._implements(v51, "$:flamework@OnInit") then
			table.insert(v43, v51);
		end;
		if v3._implements(v51, "$:flamework@OnStart") then
			table.insert(v42, v51);
		end;	
	end;
	for v52, v53 in ipairs(v43) do
		debug.setmemorycategory(l__Reflect__1.getMetadata(v53, "identifier"));
		local v54 = v53:onInit();
		if v1.Promise.is(v54) then
			v54:await();
		end;
		debug.resetmemorycategory();
	end;
	u11.isInitialized = true;
	l__RunService__4.Heartbeat:Connect(function(p19)
		for v55 in pairs(u12) do
			task.spawn(function()
				return v55:onTick(p19);
			end);
		end;
	end);
	l__RunService__4.Stepped:Connect(function(p20, p21)
		for v56 in pairs(u13) do
			task.spawn(function()
				return v56:onPhysics(p21, p20);
			end);
		end;
	end);
	if l__RunService__4:IsClient() then
		l__RunService__4.RenderStepped:Connect(function(p22)
			for v57 in pairs(u14) do
				task.spawn(function()
					return v57:onRender(p22);
				end);
			end;
		end);
	end;
	for v58, v59 in ipairs(v42) do
		task.spawn(function()
			debug.setmemorycategory(l__Reflect__1.getMetadata(v59, "identifier"));
			v59:onStart();
		end);
	end;
	return v38;
end;
u11.Testing = {
	patchDependency = function(p23, p24)
		if p24 == nil then
			error("Patching failed, no ID");
		end;
		local v60 = l__Reflect__1.idToObj[p24];
		if v60 == nil then
			error("Dependency " .. p24 .. " was not found and cannot be patched.");
		end;
		if l__Modding__3.getSingletons()[v60] ~= nil then
			error(p24 .. " has already been resolved, continuing is unsafe");
		end;
		local v61 = l__Reflect__1.metadata[v60];
		if not v61 then
			error("Dependency " .. p24 .. " has no existing metadata.");
		end;
		l__Reflect__1.defineMetadata(v60, "flamework:isPatched", true);
		l__Reflect__1.metadata[v60] = nil;
		l__Reflect__1.metadata[p23] = v61;
		l__Reflect__1.objToId[p23] = p24;
		l__Reflect__1.idToObj[p24] = p23;
	end
};
u11 = l__Modding__3.createMetaDecorator;
u8 = "Class";
u11 = u11(u8);
u8 = l__Modding__3.createMetaDecorator;
u8 = u8("Class");
return {
	Flamework = v3, 
	Service = u11, 
	Controller = u8, 
	External = l__Modding__3.createDecorator("Class", function(p25)
		l__Reflect__1.defineMetadata(p25.object, "flamework:isExternal", true);
	end)
};
