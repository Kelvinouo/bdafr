-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Modding__4 = v3.Modding;
local v5 = l__Modding__4.createMetaDecorator("Class");
local v6 = setmetatable({}, {
	__tostring = function()
		return "BaseComponent";
	end
});
v6.__index = v6;
function v6.new(...)
	local v7 = setmetatable({}, v6);
	return v7:constructor(...) and v7;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v6.constructor(p1)
	p1.maid = u1.new();
	p1._attributeChangeHandlers = {};
end;
function v6.setInstance(p2, p3, p4)
	p2.instance = p3;
	p2.attributes = p4;
end;
function v6.setAttribute(p5, p6, p7, p8)
	p5.attributes[p6] = p7;
	p5.instance:SetAttribute(p6, p7);
	if p8 then
		return p5.attributes[p6];
	end;
	return p7;
end;
function v6.onAttributeChanged(p9, p10, p11)
	local v8 = p9._attributeChangeHandlers[p10];
	if not v8 then
		v8 = {};
		p9._attributeChangeHandlers[p10] = v8;
	end;
	table.insert(v8, p11);
end;
function v6.destroy(p12)
	p12.maid:Destroy();
end;
local v9 = setmetatable({}, {
	__tostring = function()
		return "Components";
	end
});
v9.__index = v9;
function v9.new(...)
	local v10 = setmetatable({}, v9);
	return v10:constructor(...) and v10;
end;
function v9.constructor(p13)
	p13.components = {};
	p13.activeComponents = {};
	p13.reverseComponentsMapping = {};
end;
local l__Reflect__2 = v3.Reflect;
function v9.onInit(p14)
	local v11 = {};
	for v12, v13 in ipairs((l__Modding__4.getDecorators("$c:init@Component"))) do
		local l__object__14 = v13.object;
		v11[l__object__14] = {
			ctor = l__object__14, 
			config = v13.arguments[1] or {}, 
			identifier = l__Reflect__2.getMetadata(l__object__14, "identifier")
		};
	end;
	p14.components = v11;
end;
local l__RunService__3 = v2.RunService;
local l__CollectionService__4 = v2.CollectionService;
function v9.onStart(p15)
	for v15, v16 in pairs(p15.components) do
		local l__config__17 = v16.config;
		local l__ctor__18 = v16.ctor;
		local l__identifier__19 = v16.identifier;
		if l__config__17.tag ~= nil then
			local u5 = p15:getInstanceGuard(l__ctor__18);
			local u6 = {};
			local u7 = nil;
			local u8 = {};
			local function u9(p16)
				local u10 = nil;
				u10 = p16.DescendantAdded:Connect(function()
					if u5(p16) then
						p15:addComponent(p16, l__ctor__18, true);
						u10:Disconnect();
						u6[p16] = nil;
						u7(p16);
					end;
				end);
				u6[p16] = u10;
			end;
			u7 = function(p17)
				local u11 = nil;
				u11 = p17.DescendantRemoving:Connect(function()
					l__RunService__3.Heartbeat:Wait();
					if not u5(p17) then
						p15:removeComponent(p17, l__ctor__18);
						u11:Disconnect();
						u8[p17] = nil;
						u9(p17);
					end;
				end);
				u8[p17] = u11;
			end;
			local function v20(p18)
				if l__RunService__3:IsServer() or not u5 then
					return p15:addComponent(p18, l__ctor__18);
				end;
				if not u5(p18) then
					u9(p18);
					return;
				end;
				p15:addComponent(p18, l__ctor__18, true);
				u7(p18);
			end;
			l__CollectionService__4:GetInstanceAddedSignal(l__config__17.tag):Connect(v20);
			l__CollectionService__4:GetInstanceRemovedSignal(l__config__17.tag):Connect(function(p19)
				u6[p19] = nil;
				u8[p19] = nil;
				local v21 = u6[p19];
				if v21 ~= nil then
					v21:Disconnect();
				end;
				local v22 = u8[p19];
				if v22 ~= nil then
					v22:Disconnect();
				end;
				p15:removeComponent(p19, l__ctor__18);
			end);
			for v23, v24 in ipairs(l__CollectionService__4:GetTagged(l__config__17.tag)) do
				p15:safeCall("Failed to instantiate '" .. l__identifier__19 .. "' for " .. tostring(v24), function()
					return v20(v24);
				end);
			end;
		end;
	end;
end;
function v9.getAttributeGuards(p20, p21)
	local v25 = {};
	local v26 = p20.components[p21];
	if v26 then
		if v26.config.attributes ~= nil then
			for v27, v28 in pairs(v26.config.attributes) do
				v25[v27] = v28;
			end;
		end;
		local v29 = getmetatable(p21);
		if v29.__index ~= nil then
			for v30, v31 in pairs(p20:getAttributeGuards(v29.__index)) do
				if v25[v30] == nil then
					v25[v30] = v31;
				end;
			end;
		end;
	end;
	return v25;
end;
function v9.getAttributes(p22, p23, p24, p25)
	local v32 = p23:GetAttributes();
	local v33 = {};
	local l__defaults__34 = p24.config.defaults;
	for v35, v36 in pairs(p25) do
		local v37 = v32[v35];
		if not v36(v37) then
			local v38 = l__defaults__34;
			if v38 ~= nil then
				v38 = v38[v35];
			end;
			if v38 ~= nil then
				v33[v35] = l__defaults__34[v35];
			else
				error(p23:GetFullName() .. " has invalid attribute '" .. v35 .. "' for '" .. p24.identifier .. "'");
			end;
		else
			v33[v35] = v37;
		end;
	end;
	return v33;
end;
function v9.getInstanceGuard(p26, p27)
	local v39 = nil;
	local v40 = p26.components[p27];
	if v40 then
		if v40.config.instanceGuard ~= nil then
			return v40.config.instanceGuard;
		end;
		v39 = getmetatable(p27);
		if v39.__index == nil then
			return;
		end;
	else
		return;
	end;
	return p26:getInstanceGuard(v39.__index);
end;
function v9.safeCall(p28, p29, p30)
	task.spawn(function()
		xpcall(p30, function(p31)
			if type(p31) == "string" then
				local v41 = debug.traceback(p31, 2);
				warn(p29);
				warn(v41);
				return;
			end;
			warn(p29);
			warn(p31);
			warn(debug.traceback(nil, 2));
		end);
	end);
end;
local l__Flamework__12 = v3.Flamework;
function v9.setupComponent(p32, p33, p34, p35, p36, p37)
	local l__config__42 = p37.config;
	local l__identifier__43 = p37.identifier;
	p35:setInstance(p33, p34);
	p36();
	if l__Flamework__12._implements(p35, "$:flamework@OnStart") then
		p32:safeCall("Component '" .. l__identifier__43 .. "' failed to start " .. p33:GetFullName(), function()
			return p35:onStart();
		end);
	end;
	l__Modding__4.addListener(p35);
	p35.maid:GiveTask(function()
		return l__Modding__4.removeListener(p35);
	end);
	if l__config__42.refreshAttributes == nil or l__config__42.refreshAttributes then
		for v44, v45 in pairs((p32:getAttributeGuards(p37.ctor))) do
			if type(v44) == "string" then
				p35.maid:GiveTask(p33:GetAttributeChangedSignal(v44):Connect(function()
					local v46 = p35._attributeChangeHandlers[v44];
					local v47 = p33:GetAttribute(v44);
					local l__attributes__48 = p35.attributes;
					if v45(v47) then
						if v46 then
							for v49, v50 in ipairs(v46) do
								p32:safeCall("Component '" .. l__identifier__43 .. "' failed to call onAttributeChanged for " .. v44, function()
									return v50(v47, l__attributes__48[v44]);
								end);
							end;
						end;
						l__attributes__48[v44] = v47;
					end;
				end));
			end;
		end;
	end;
end;
function v9.getComponentFromSpecifier(p38, p39)
	if type(p39) ~= "string" then
		return p39;
	end;
	return l__Reflect__2.idToObj[p39];
end;
function v9.getComponent(p40, p41, p42)
	local v51 = p40:getComponentFromSpecifier(p42);
	assert(v51, "Could not find component from specifier: " .. tostring(p42));
	local v52 = p40.activeComponents[p41];
	if not v52 then
		return nil;
	end;
	return v52[v51];
end;
function v9.addComponent(p43, p44, p45, p46)
	local v53 = p43:getComponentFromSpecifier(p45);
	assert(v53, "Could not find component from specifier: " .. tostring(p45));
	local v54 = p43.components[v53];
	assert(v54, "Provided componentSpecifier does not exist");
	if p46 ~= true then
		local v55 = p43:getInstanceGuard(v53);
		if v55 ~= nil then
			assert(v55(p44), p44:GetFullName() .. " did not pass instance guard check for '" .. v54.identifier .. "'");
		end;
	end;
	local v56 = p43.activeComponents[p44];
	if not v56 then
		v56 = {};
		p43.activeComponents[p44] = v56;
	end;
	local v57 = p43.reverseComponentsMapping[v53];
	if not v57 then
		v57 = {};
		p43.reverseComponentsMapping[v53] = v57;
	end;
	local v58 = v56[v53];
	if v58 ~= nil then
		return v58;
	end;
	local v59 = l__Modding__4.createDeferredDependency(v53);
	local v60 = v59[1];
	v56[v53] = v60;
	v57[v60] = true;
	p43:setupComponent(p44, p43:getAttributes(p44, v54, (p43:getAttributeGuards(v53))), v60, v59[2], v54);
	return v60;
end;
function v9.removeComponent(p47, p48, p49)
	local v61 = p47:getComponentFromSpecifier(p49);
	assert(v61, "Could not find component from specifier: " .. tostring(p49));
	local v62 = p47.activeComponents[p48];
	if not v62 then
		return nil;
	end;
	local v63 = v62[v61];
	if not v63 then
		return nil;
	end;
	local v64 = p47.reverseComponentsMapping[v61];
	if v64 then
		v64[v63] = nil;
	end;
	v63:destroy();
	v62[v61] = nil;
	local v65 = 0;
	for v66, v67 in pairs(v62) do
		v65 = v65 + 1;
	end;
	if v65 == 0 then
		p47.activeComponents[p48] = nil;
	end;
end;
function v9.getAllComponents(p50, p51)
	local v68 = p50:getComponentFromSpecifier(p51);
	assert(v68, "Could not find component from specifier: " .. tostring(p51));
	local v69 = p50.reverseComponentsMapping[v68];
	if not v69 then
		return {};
	end;
	local v70 = {};
	local v71 = #v70;
	for v72, v73 in pairs(v69) do
		v71 = v71 + 1;
		v70[v71] = v72;
	end;
	return v70;
end;
l__Reflect__2.defineMetadata(v9, "identifier", "$c:init@Components");
l__Reflect__2.defineMetadata(v9, "flamework:implements", { "$:flamework@OnInit", "$:flamework@OnStart" });
l__Reflect__2.decorate(v9, "$:flamework@Service", v3.Service, { {
		loadOrder = 0
	} });
l__Reflect__2.decorate(v9, "$:flamework@Controller", v3.Controller, { {
		loadOrder = 0
	} });
return {
	Component = v5, 
	BaseComponent = v6, 
	Components = v9
};
