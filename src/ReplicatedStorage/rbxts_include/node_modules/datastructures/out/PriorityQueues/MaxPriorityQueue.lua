-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.Parent.Types);
local v2 = {
	ClassName = "MaxPriorityQueue"
};
v2.__index = v2;
function v2.new()
	return setmetatable({
		Heap = {}, 
		Length = 0
	}, v2);
end;
function v2.Is(p1)
	local v3 = false;
	if type(p1) == "table" then
		v3 = getmetatable(p1) == v2;
	end;
	return v3;
end;
function v2.IsEmpty(p2)
	return p2.Length == 0;
end;
local function u1(p3, p4, p5, p6)
	local v4 = p5 + p6;
	local v5 = (v4 - v4 % 2) / 2;
	if v5 == 0 then
		return -1;
	end;
	local l__Heap__6 = p3.Heap;
	local v7 = l__Heap__6[v5];
	while v5 ~= p6 do
		local l__Priority__8 = v7.Priority;
		if p4 == l__Priority__8 then
			return v5;
		end;
		if p4 < l__Priority__8 then
			p6 = v5 - 1;
		else
			p5 = v5 + 1;
		end;
		local v9 = p5 + p6;
		v5 = (v9 - v9 % 2) / 2;
		v7 = l__Heap__6[v5];	
	end;
	return v5;
end;
function v2.InsertWithPriority(p7, p8, p9)
	if p8 == nil then
		error("Argument #2 to 'MaxPriorityQueue:InsertWithPriority' missing or nil", 2);
	end;
	local l__Heap__10 = p7.Heap;
	local v11 = u1(p7, p9, 1, p7.Length);
	local v12 = l__Heap__10[v11];
	if v12 then
		local v13 = p9 < v12.Priority and v11 or v11 + 1;
	else
		v13 = 1;
	end;
	table.insert(l__Heap__10, v13, {
		Value = p8, 
		Priority = p9
	});
	p7.Length = p7.Length + 1;
	return v13;
end;
v2.Insert = v2.InsertWithPriority;
function v2.ChangePriority(p10, p11, p12)
	if p11 == nil then
		error("Argument #2 to 'MaxPriorityQueue:ChangePriority' missing or nil", 2);
	end;
	local l__Heap__14 = p10.Heap;
	local v15, v16, v17 = ipairs(l__Heap__14);
	while true do
		v15(v16, v17);
		if not v15 then
			break;
		end;
		v17 = v15;
		if v16.Value == p11 then
			table.remove(l__Heap__14, v15);
			p10.Length = p10.Length - 1;
			return p10:InsertWithPriority(p11, p12);
		end;	
	end;
	error("Couldn't find value in queue?", 2);
end;
function v2.GetFirstPriority(p13)
	if p13.Length == 0 then
		return nil;
	end;
	return p13.Heap[1].Priority;
end;
function v2.GetLastPriority(p14)
	local l__Length__18 = p14.Length;
	if l__Length__18 == 0 then
		return nil;
	end;
	return p14.Heap[l__Length__18].Priority;
end;
function v2.PopElement(p15, p16)
	local l__Heap__19 = p15.Heap;
	local l__Length__20 = p15.Length;
	p15.Length = l__Length__20 - 1;
	local v21 = l__Heap__19[l__Length__20];
	l__Heap__19[l__Length__20] = nil;
	return p16 and v21.Value or (v21 or nil);
end;
v2.PullHighestPriorityElement = v2.PopElement;
v2.GetMaximumElement = v2.PopElement;
function v2.ToArray(p17, p18)
	if not p18 then
		local v22 = table.create(p17.Length);
		local v23, v24, v25 = ipairs(p17.Heap);
		while true do
			v23(v24, v25);
			if not v23 then
				break;
			end;
			v25 = v23;
			v22[v23] = v24;		
		end;
		return v22;
	end;
	local v26 = table.create(p17.Length);
	local v27, v28, v29 = ipairs(p17.Heap);
	while true do
		v27(v28, v29);
		if not v27 then
			break;
		end;
		v29 = v27;
		v26[v27] = v28.Value;	
	end;
	return v26;
end;
function v2.Iterator(p19, p20)
	if not p20 then
		return ipairs(p19.Heap);
	end;
	local v30 = table.create(p19.Length);
	local v31, v32, v33 = ipairs(p19.Heap);
	while true do
		v31(v32, v33);
		if not v31 then
			break;
		end;
		v33 = v31;
		v30[v31] = v32.Value;	
	end;
	return ipairs(v30);
end;
function v2.ReverseIterator(p21, p22)
	local l__Length__34 = p21.Length;
	local v35 = l__Length__34 + 1;
	if not p22 then
		local v36 = table.create(l__Length__34);
		local v37, v38, v39 = ipairs(p21.Heap);
		while true do
			v37(v38, v39);
			if not v37 then
				break;
			end;
			v39 = v37;
			v36[v35 - v37] = v38;		
		end;
		return ipairs(v36);
	end;
	local v40 = table.create(l__Length__34);
	local v41, v42, v43 = ipairs(p21.Heap);
	while true do
		v41(v42, v43);
		if not v41 then
			break;
		end;
		v43 = v41;
		v40[v35 - v41] = v42.Value;	
	end;
	return ipairs(v40);
end;
v2.Iterate = v2.Iterator;
v2.ReverseIterate = v2.ReverseIterator;
function v2.Clear(p23)
	table.clear(p23.Heap);
	p23.Length = 0;
	return p23;
end;
function v2.Contains(p24, p25)
	if p25 == nil then
		error("Argument #2 to 'MaxPriorityQueue:Contains' missing or nil", 2);
	end;
	local v44, v45, v46 = ipairs(p24.Heap);
	while true do
		v44(v45, v46);
		if not v44 then
			break;
		end;
		v46 = v44;
		if v45.Value == p25 then
			return true;
		end;	
	end;
	return false;
end;
function v2.RemovePriority(p26, p27)
	local v47, v48, v49 = ipairs(p26.Heap);
	while true do
		v47(v48, v49);
		if not v47 then
			break;
		end;
		v49 = v47;
		if v48.Priority == p27 then
			table.remove(p26.Heap, v47);
			p26.Length = p26.Length - 1;
			return;
		end;	
	end;
end;
function v2.RemoveValue(p28, p29)
	if p29 == nil then
		error("Argument #2 to 'MaxPriorityQueue:RemoveValue' missing or nil", 2);
	end;
	local v50, v51, v52 = ipairs(p28.Heap);
	while true do
		v50(v51, v52);
		if not v50 then
			break;
		end;
		v52 = v50;
		if v51.Value == p29 then
			table.remove(p28.Heap, v50);
			p28.Length = p28.Length - 1;
			return;
		end;	
	end;
end;
function v2.__tostring(p30)
	local v53 = table.create(p30.Length);
	for v54, v55 in p30(false) do
		v53[v54] = string.format("\t{Priority = %s, Value = %s};", tostring(v55.Priority), tostring(v55.Value));
	end;
	return string.format("MaxPriorityQueue<{\n%s\n}>", table.concat(v53, "\n"));
end;
return v2;
