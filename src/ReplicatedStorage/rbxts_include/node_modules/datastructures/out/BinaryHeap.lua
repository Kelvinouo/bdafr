-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.Types);
local v2 = {
	ClassName = "BinaryHeap"
};
v2.__index = v2;
function v2.new(p1)
	return setmetatable({
		ComparisonFunction = p1, 
		Length = 0
	}, v2);
end;
function v2.FromArray(p2)
	p2.Length = #p2;
	return setmetatable(p2, v2);
end;
function v2.Is(p3)
	local v3 = false;
	if type(p3) == "table" then
		v3 = getmetatable(p3) == v2;
	end;
	return v3;
end;
function v2.Heapify(p4, p5)
	local v4 = p4[p5];
	local l__ComparisonFunction__5 = p4.ComparisonFunction;
	local v6 = p5 + p5;
	while v6 <= p4.Length do
		local v7 = p4[v6];
		local v8 = v6 + 1;
		local v9 = p4[v8];
		if v9 and (not (not l__ComparisonFunction__5) and not (not l__ComparisonFunction__5(v9, v7)) or not l__ComparisonFunction__5 and v9 < v7) then
			v7 = v9;
			v6 = v8;
		end;
		if not l__ComparisonFunction__5 or not l__ComparisonFunction__5(v7, v4) then
			if l__ComparisonFunction__5 then
				p4[p5] = v4;
				return;
			end;
			if not (v7 < v4) then
				p4[p5] = v4;
				return;
			end;
		end;
		p4[p5] = v7;
		p5 = v6;
		v6 = p5 + p5;	
	end;
	p4[p5] = v4;
end;
function v2.Push(p6, p7)
	local v10 = p6.Length + 1;
	p6.Length = v10;
	local l__ComparisonFunction__11 = p6.ComparisonFunction;
	local v12 = math.floor(v10 / 2);
	local v13 = p6[v12];
	while v13 do
		if not l__ComparisonFunction__11 or not l__ComparisonFunction__11(p7, v13) then
			if l__ComparisonFunction__11 then
				break;
			end;
			if not (p7 < v13) then
				break;
			end;
		end;
		p6[v10] = v13;
		v10 = v12;
		v12 = math.floor(v10 / 2);
		v13 = p6[v12];	
	end;
	p6[v10] = p7;
	return v10;
end;
function v2.Set(p8, p9, p10)
	local l__ComparisonFunction__14 = p8.ComparisonFunction;
	if not (not l__ComparisonFunction__14) and not (not l__ComparisonFunction__14(p10, p8[p9])) or not l__ComparisonFunction__14 and p10 < p8[p9] then
		local v15 = math.floor(p9 / 2);
		local v16 = p8[v15];
		while v16 do
			if not l__ComparisonFunction__14 or not l__ComparisonFunction__14(p10, v16) then
				if l__ComparisonFunction__14 then
					break;
				end;
				if not (p10 < v16) then
					break;
				end;
			end;
			p8[p9] = v16;
			p9 = v15;
			v15 = math.floor(p9 / 2);
			v16 = p8[v15];		
		end;
		p8[p9] = p10;
		return p9;
	end;
	local v17 = p9 + p9;
	while v17 <= p8.Length do
		local v18 = p8[v17];
		local v19 = v17 + 1;
		local v20 = p8[v19];
		if v20 and (not (not l__ComparisonFunction__14) and not (not l__ComparisonFunction__14(v20, v18)) or not l__ComparisonFunction__14 and v20 < v18) then
			v18 = v20;
			v17 = v19;
		end;
		if not l__ComparisonFunction__14 or not l__ComparisonFunction__14(v18, p10) then
			if l__ComparisonFunction__14 then
				break;
			end;
			if not (v18 < p10) then
				break;
			end;
		end;
		p8[p9] = v18;
		p9 = v17;
		v17 = p9 + p9;	
	end;
	p8[p9] = p10;
	return p9;
end;
function v2.Pop(p11)
	local l__Length__21 = p11.Length;
	if l__Length__21 == 0 then
		return nil;
	end;
	if l__Length__21 == 1 then
		p11[1] = nil;
		p11.Length = 0;
		return p11[1];
	end;
	local v22 = p11[1];
	local v23 = p11[l__Length__21];
	p11[l__Length__21] = nil;
	local v24 = l__Length__21 - 1;
	p11.Length = v24;
	local l__ComparisonFunction__25 = p11.ComparisonFunction;
	local v26 = 1;
	local v27 = v26 + v26;
	while v27 <= v24 do
		local v28 = p11[v27];
		local v29 = v27 + 1;
		local v30 = p11[v29];
		if v30 and (not (not l__ComparisonFunction__25) and not (not l__ComparisonFunction__25(v30, v28)) or not l__ComparisonFunction__25 and v30 < v28) then
			v28 = v30;
			v27 = v29;
		end;
		if not l__ComparisonFunction__25 or not l__ComparisonFunction__25(v28, v23) then
			if l__ComparisonFunction__25 then
				p11[v26] = v23;
				return v22;
			end;
			if not (v28 < v23) then
				p11[v26] = v23;
				return v22;
			end;
		end;
		p11[v26] = v28;
		v26 = v27;
		v27 = v26 + v26;	
	end;
	p11[v26] = v23;
	return v22;
end;
function v2.Delete(p12, p13)
	local l__Length__31 = p12.Length;
	if l__Length__31 == 1 then
		p12[1] = nil;
		p12.Length = 0;
		return p12;
	end;
	while p13 > 1 do
		local v32 = math.floor(p13 / 2);
		p12[p13] = p12[v32];
		p13 = v32;	
	end;
	local v33 = p12[l__Length__31];
	p12[l__Length__31] = nil;
	local v34 = l__Length__31 - 1;
	p12.Length = v34;
	local l__ComparisonFunction__35 = p12.ComparisonFunction;
	local v36 = p13 + p13;
	while v36 <= v34 do
		local v37 = p12[v36];
		local v38 = v36 + 1;
		local v39 = p12[v38];
		if v39 and (not (not l__ComparisonFunction__35) and not (not l__ComparisonFunction__35(v39, v37)) or not l__ComparisonFunction__35 and v39 < v37) then
			v37 = v39;
			v36 = v38;
		end;
		if not l__ComparisonFunction__35 or not l__ComparisonFunction__35(v37, v33) then
			if l__ComparisonFunction__35 then
				p12[p13] = v33;
				return p12;
			end;
			if not (v37 < v33) then
				p12[p13] = v33;
				return p12;
			end;
		end;
		p12[p13] = v37;
		p13 = v36;
		v36 = p13 + p13;	
	end;
	p12[p13] = v33;
	return p12;
end;
function v2.GetFront(p14)
	return p14[1];
end;
v2.Front = v2.GetFront;
function v2.IsEmpty(p15)
	return p15[1] == nil;
end;
function v2.__tostring(p16)
	return "BinaryHeap";
end;
return v2;
