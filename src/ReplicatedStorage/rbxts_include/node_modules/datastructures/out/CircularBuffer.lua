
-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.Types);
local v2 = {
	ClassName = "CircularBuffer"
};
v2.__index = v2;
function v2.new(p1)
	assert(type(p1) == "number", "MaxCapacity must be a number, instead got a " .. typeof(p1));
	assert(p1 > 0, "MaxCapacity must be greater than 0.");
	return setmetatable({
		Capacity = p1, 
		Data = table.create(p1), 
		Index = p1 + 1
	}, v2);
end;
function v2.Is(p2)
	local v3 = false;
	if type(p2) == "table" then
		v3 = getmetatable(p2) == v2;
	end;
	return v3;
end;
function v2.Clear(p3)
	table.clear(p3.Data);
	return p3;
end;
function v2.GetCapacity(p4)
	return p4.Capacity;
end;
function v2.GetMaxCapacity(p5)
	return p5.Capacity;
end;
function v2.IsEmpty(p6)
	return #p6.Data == 0;
end;
function v2.IsFull(p7)
	return #p7.Data == p7.Capacity;
end;
function v2.Push(p8, p9)
	assert(p9 ~= nil, "NewData cannot be nil.");
	local l__Data__4 = p8.Data;
	table.insert(l__Data__4, 1, p9);
	return table.remove(l__Data__4, p8.Index);
end;
function v2.Replace(p10, p11, p12)
	assert(p12 ~= nil, "NewData cannot be nil.");
	assert(type(p11) == "number", "Index must be an integer, instead got a " .. typeof(p11));
	assert(p11 <= p10.Capacity, "This is beyond the capacity of the CircularBuffer.");
	local v5 = p10.Data[p11];
	if v5 ~= nil then
		p10.Data[p11] = p12;
		return v5;
	end;
	error(string.format("[CircularBuffer.Replace] - Data[%d] does not exist and cannot be replaced as a result.", p11), 2);
	return v5;
end;
function v2.Insert(p13, p14, p15)
	assert(p15 ~= nil, "NewData cannot be nil.");
	assert(type(p14) == "number", "Index must be an integer, instead got a " .. typeof(p14));
	assert(p14 <= p13.Capacity, "This is beyond the capacity of the CircularBuffer.");
	local l__Data__6 = p13.Data;
	table.insert(l__Data__6, p14, p15);
	return table.remove(l__Data__6, p13.Index);
end;
function v2.PeekAt(p16, p17)
	local v7 = true;
	if p17 ~= nil then
		v7 = type(p17) == "number";
	end;
	assert(v7, "Index must be an integer?, instead got a " .. typeof(p17));
	if p17 then
		local v8 = p17;
	else
		v8 = 1;
	end;
	return p16.Data[v8];
end;
function v2.Iterator(p18)
	return ipairs(p18.Data);
end;
function v2.__tostring(p19)
	local l__Data__9 = p19.Data;
	local v10 = #l__Data__9;
	local v11 = table.move(l__Data__9, 1, v10, 1, table.create(v10));
	for v12, v13 in ipairs(v11) do
		v11[v12] = tostring(v13);
	end;
	return string.format("CircularBuffer<[%s]>", table.concat(v11, ", "));
end;
table.freeze(v2);
return v2;

