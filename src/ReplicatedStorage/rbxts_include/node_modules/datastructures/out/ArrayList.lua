-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(script.Parent.Types);
local v2 = {
	ClassName = "ArrayList"
};
v2.__index = v2;
function v2.new()
	return setmetatable({
		IsFixedSize = false, 
		IsReadOnly = false, 
		Length = 0
	}, v2);
end;
function v2.FromCapacity(p1)
	local v3 = table.create(p1);
	v3.IsFixedSize = false;
	v3.IsReadOnly = false;
	v3.Length = 0;
	return setmetatable(v3, v2);
end;
function v2.FromArray(p2)
	p2.IsFixedSize = false;
	p2.IsReadOnly = false;
	p2.Length = #p2;
	return setmetatable(p2, v2);
end;
v2.WithCapacity = v2.FromCapacity;
function v2.Is(p3)
	local v4 = false;
	if type(p3) == "table" then
		v4 = getmetatable(p3) == v2;
	end;
	return v4;
end;
function v2.MarkReadOnly(p4)
	if p4 == nil then
		error("Argument #1 to 'ArrayList.MarkReadOnly' missing or nil", 2);
	end;
	local v5 = p4:Clone();
	v5.IsReadOnly = true;
	return v5;
end;
function v2.MarkFixedSize(p5)
	if p5 == nil then
		error("Argument #1 to 'ArrayList.MarkFixedSize' missing or nil", 2);
	end;
	local v6 = p5:Clone();
	v6.IsFixedSize = true;
	return v6;
end;
function v2.Add(p6, p7)
	if p6.IsFixedSize then
		error("This ArrayList has a fixed size.", 2);
	end;
	if p6.IsReadOnly then
		error("This ArrayList is read-only.", 2);
	end;
	if p7 == nil then
		error("Argument #2 to 'ArrayList:Add' missing or nil", 2);
	end;
	local v7 = p6.Length + 1;
	p6.Length = v7;
	p6[v7] = p7;
	return v7;
end;
function v2.Clone(p8)
	local v8 = {
		IsFixedSize = p8.IsFixedSize, 
		IsReadOnly = p8.IsReadOnly, 
		Length = p8.Length
	};
	for v9, v10 in ipairs(p8) do
		v8[v9] = v10;
	end;
	return setmetatable(v8, v2);
end;
function v2.Clear(p9)
	if p9.IsFixedSize then
		error("This ArrayList has a fixed size.", 2);
	end;
	if p9.IsReadOnly then
		error("This ArrayList is read-only.", 2);
	end;
	table.clear(p9);
	p9.IsReadOnly = false;
	p9.Length = 0;
end;
function v2.Contains(p10, p11)
	if p11 == nil then
		error("Argument #2 to 'ArrayList:Contains' missing or nil", 2);
	end;
	return table.find(p10, p11) ~= nil;
end;
function v2.IndexOf(p12, p13)
	if p13 == nil then
		error("Argument #2 to 'ArrayList:IndexOf' missing or nil", 2);
	end;
	return table.find(p12, p13);
end;
function v2.Insert(p14, p15, p16)
	if p14.IsFixedSize then
		error("This ArrayList has a fixed size.", 2);
	end;
	if p14.IsReadOnly then
		error("This ArrayList is read-only.", 2);
	end;
	if p16 == nil then
		error("Argument #3 to 'ArrayList:Insert' missing or nil", 2);
	end;
	if p15 < 1 then
		error("Argument #2 to 'ArrayList:Insert' must be greater than zero.", 2);
	end;
	if p14.Length + 1 < p15 then
		error("Argument #2 to 'ArrayList:Insert' must be less than or equal to the length of the ArrayList.", 2);
	end;
	p14.Length = p14.Length + 1;
	table.insert(p14, p15, p16);
end;
function v2.__tostring(p17)
	return "ArrayList";
end;
return v2;
