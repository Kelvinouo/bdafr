-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	ClassName = "LinkedList"
};
v1.__index = v1;
local v2 = {
	ClassName = "ListNode"
};
v2.__index = v2;
function v1.new(p1)
	if not p1 then
		return setmetatable({
			First = nil, 
			Last = nil, 
			Length = 0
		}, v1);
	end;
	local v3 = setmetatable({
		First = nil, 
		Last = nil, 
		Length = 0
	}, v1);
	local v4, v5, v6 = ipairs(p1);
	while true do
		v4(v5, v6);
		if not v4 then
			break;
		end;
		v6 = v4;
		v3:Push(v5);	
	end;
	return v3;
end;
function v1.Is(p2)
	local v7 = false;
	if type(p2) == "table" then
		v7 = getmetatable(p2) == v1;
	end;
	return v7;
end;
function v2.new()
	return setmetatable({
		List = nil, 
		Next = nil, 
		Previous = nil, 
		Value = nil
	}, v2);
end;
function v2.Is(p3)
	local v8 = false;
	if type(p3) == "table" then
		v8 = getmetatable(p3) == v2;
	end;
	return v8;
end;
function v1.Push(p4, p5)
	if p5 == nil then
		error("Value passed to LinkedList:Push was nil!", 2);
	end;
	p4.Length = p4.Length + 1;
	local l__Last__9 = p4.Last;
	local v10 = v2.new();
	v10.List = p4;
	v10.Previous = l__Last__9;
	v10.Value = p5;
	if l__Last__9 then
		l__Last__9.Next = v10;
	else
		p4.First = v10;
	end;
	p4.Last = v10;
	return v10;
end;
local u1 = require(script.Parent.Types);
function v1.Append(p6, p7)
	if not v1.Is(p7) then
		error(string.format("Invalid argument #%d to '%s' (%s expected, got %s)", 2, "LinkedList:Append", "LinkedList", u1.TypeOf(p7)), 2);
	end;
	for v11, v12 in p7() do
		p6:Push(v12);
	end;
end;
function v1.PushFront(p8, p9)
	if p9 == nil then
		error("Value passed to LinkedList:PushFront was nil!", 2);
	end;
	p8.Length = p8.Length + 1;
	local l__First__13 = p8.First;
	local v14 = v2.new();
	v14.List = p8;
	v14.Next = l__First__13;
	v14.Previous = nil;
	v14.Value = p9;
	if l__First__13 then
		l__First__13.Previous = v14;
	else
		p8.Last = v14;
	end;
	p8.First = v14;
	return v14;
end;
function v1.Prepend(p10, p11)
	if not v1.Is(p11) then
		error(string.format("Invalid argument #%d to '%s' (%s expected, got %s)", 2, "LinkedList:Prepend", "LinkedList", u1.TypeOf(p11)), 2);
	end;
	for v15, v16 in p11() do
		p10:PushFront(v16);
	end;
end;
function v1.Pop(p12)
	if p12.Length == 0 then
		return nil;
	end;
	local l__First__17 = p12.First;
	if not l__First__17 then
		return nil;
	end;
	l__First__17:Destroy();
	return l__First__17;
end;
function v1.PopBack(p13)
	if p13.Length == 0 then
		return nil;
	end;
	local l__Last__18 = p13.Last;
	if not l__Last__18 then
		return nil;
	end;
	l__Last__18:Destroy();
	return l__Last__18;
end;
function v1.IsEmpty(p14)
	return p14.Length <= 0;
end;
function v1.Clear(p15)
	while p15.Length > 0 do
		local l__First__19 = p15.First;
		if l__First__19 then
			l__First__19:Destroy();
		end;	
	end;
	return p15;
end;
function v1.Contains(p16, p17)
	if v2.Is(p17) then
		for v20 in p16() do
			if v20 == p17 then
				return true;
			end;
		end;
	else
		for v21, v22 in p16() do
			if v22 == p17 then
				return true;
			end;
		end;
	end;
	return false;
end;
function v1._Iterator(p18, p19)
	p19 = not p19 and p18.First or p19 and p19.Next;
	if not p19 then
		return nil, nil;
	end;
	return p19, p19.Value;
end;
function v1._ReverseIterator(p20, p21)
	p21 = not p21 and p20.Last or p21 and p21.Previous;
	if not p21 then
		return nil, nil;
	end;
	return p21, p21.Value;
end;
function v1.Iterator(p22)
	return v1._Iterator, p22;
end;
function v1.ReverseIterator(p23)
	return v1._ReverseIterator, p23;
end;
function v1.ToArray(p24)
	local v23 = table.create(p24.Length);
	local v24 = 0;
	for v25, v26 in p24() do
		v24 = v24 + 1;
		v23[v24] = v26;
	end;
	return v23;
end;
function v1.Remove(p25, p26)
	local l__Length__27 = p25.Length;
	if l__Length__27 < p26 or p26 < 1 then
		error(string.format("Index %d is out of the range of [1, %d]", p26, l__Length__27), 2);
	end;
	local v28 = p25.First;
	local v29 = 0;
	while v28 do
		v29 = v29 + 1;
		if v29 == p26 then
			if v28 == p25.First then
				p25.First = v28.Next;
			elseif v28 == p25.Last then
				p25.Last = v28.Previous;
			else
				v28.Previous.Next = v28.Next;
				v28.Next.Previous = v28.Previous;
			end;
			p25.Length = l__Length__27 - 1;
			return p25;
		end;
		v28 = v28.Next;	
	end;
	return p25;
end;
function v1.RemoveValue(p27, p28)
	local v30 = p27.First;
	local v31 = p27.Length;
	while v30 do
		if v30.Value == p28 then
			if v30 == p27.First then
				p27.First = v30.Next;
			elseif v30 == p27.Last then
				p27.Last = v30.Previous;
			else
				v30.Previous.Next = v30.Next;
				v30.Next.Previous = v30.Previous;
			end;
			v31 = v31 - 1;
		end;
		v30 = v30.Next;	
	end;
	p27.Length = v31;
	return p27;
end;
function v1.RemoveNode(p29, p30)
	local v32 = p29.First;
	local v33 = p29.Length;
	while v32 do
		if v32 == p30 then
			if v32 == p29.First then
				p29.First = v32.Next;
			elseif v32 == p29.Last then
				p29.Last = v32.Previous;
			else
				v32.Previous.Next = v32.Next;
				v32.Next.Previous = v32.Previous;
			end;
			v33 = v33 - 1;
		end;
		v32 = v32.Next;	
	end;
	p29.Length = v33;
	return p29;
end;
function v2.After(p31, p32)
	local l__List__34 = p31.List;
	if not l__List__34 then
		return nil;
	end;
	l__List__34.Length = l__List__34.Length + 1;
	local v35 = v2.new();
	v35.Previous = p31;
	v35.Next = p31.Next;
	v35.Value = p32;
	if l__List__34.Last == p31 then
		l__List__34.Last = v35;
	else
		p31.Next.Previous = v35;
	end;
	p31.Next = v35;
	return v35;
end;
function v2.Before(p33, p34)
	local l__List__36 = p33.List;
	if not l__List__36 then
		return nil;
	end;
	l__List__36.Length = l__List__36.Length + 1;
	local v37 = v2.new();
	v37.Previous = p33.Previous;
	v37.Next = p33;
	v37.Value = p34;
	if l__List__36.First == p33 then
		l__List__36.First = v37;
	else
		p33.Previous.Next = v37;
	end;
	p33.Previous = v37;
	return v37;
end;
function v2.Destroy(p35)
	local l__List__38 = p35.List;
	if not l__List__38 then
		return false;
	end;
	p35.List = nil;
	l__List__38.Length = l__List__38.Length - 1;
	local l__Previous__39 = p35.Previous;
	local l__Next__40 = p35.Next;
	if p35 == l__List__38.Last then
		l__List__38.Last = l__Previous__39;
	end;
	if p35 == l__List__38.First then
		l__List__38.First = l__Next__40;
	end;
	if l__Previous__39 then
		l__Previous__39.Next = l__Next__40;
	end;
	if l__Next__40 then
		l__Next__40.Previous = l__Previous__39;
	end;
	return true;
end;
function v2.Iterator(p36)
	local l__List__41 = p36.List;
	if not l__List__41 then
		return;
	end;
	return v1._Iterator, l__List__41, p36;
end;
function v2.ReverseIterator(p37)
	local l__List__42 = p37.List;
	if not l__List__42 then
		return;
	end;
	return v1._ReverseIterator, l__List__42, p37;
end;
function v1.__tostring(p38)
	local v43 = table.create(p38.Length);
	for v44, v45 in p38() do
		table.insert(v43, tostring(v45));
	end;
	return "LinkedList<[" .. table.concat(v43, ", ") .. "]>";
end;
function v2.__tostring(p39)
	return tostring(p39.Value);
end;
return v1;
