-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "log").out);
local l__default__3 = v2.default;
local v4 = setmetatable({}, {
	__tostring = function()
		return "Analytics";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = l__default__3.Create():SetMinLogLevel(v2.LogLevel.Information):WriteTo(l__default__3.RobloxOutput({
	Prefix = "Analytics RbxTS"
})):Create();
function v4.constructor(p1, p2, p3)
	p1.closing = false;
	if p2 == "" or not p2 then
		u1:Warn("No analytics write key was provided. Analytics will not be sent.");
		p1.enable = false;
	end;
	p1.queue = {};
	p1.writeKey = p2;
	local v6 = p3;
	if v6 ~= nil then
		v6 = v6.host;
	end;
	local v7 = v6;
	if v7 == nil then
		v7 = "https://api.segment.io";
	end;
	p1.host = v7;
	local v8 = p3;
	if v8 ~= nil then
		v8 = v8.path;
	end;
	local v9 = v8;
	if v9 == nil then
		v9 = "/v1/batch";
	end;
	p1.path = v9;
	local v10 = p3;
	if v10 ~= nil then
		v10 = v10.flushAt;
	end;
	local v11 = v10;
	if v11 == nil then
		v11 = 20;
	end;
	p1.flushAt = v11;
	local v12 = p3;
	if v12 ~= nil then
		v12 = v12.maxQueueSize;
	end;
	local v13 = v12;
	if v13 == nil then
		v13 = 460800;
	end;
	p1.maxQueueSize = v13;
	local v14 = p3;
	if v14 ~= nil then
		v14 = v14.flushInterval;
	end;
	local v15 = v14;
	if v15 == nil then
		v15 = 10000;
	end;
	p1.flushInterval = v15;
	task.spawn(function()
		while not p1.closing do
			p1:flush();
			wait(p1.flushInterval / 1000);		
		end;
	end);
	game:BindToClose(function()
		p1.closing = true;
		p1:flush();
	end);
	local v16 = p3;
	if v16 ~= nil then
		v16 = v16.enable;
	end;
	local v17 = v16;
	if v17 == nil then
		v17 = true;
	end;
	p1.enable = v17;
end;
function v4.identify(p4, p5)
	p4:enqueue("identify", p5);
	return p4;
end;
function v4.group(p6, p7)
	p6:enqueue("group", p7);
	return p6;
end;
function v4.track(p8, p9)
	p8:enqueue("track", p9);
	return p8;
end;
function v4.page(p10, p11)
	p10:enqueue("page", p11);
	return p10;
end;
function v4.screen(p12, p13)
	p12:enqueue("screen", p13);
	return p12;
end;
function v4.alias(p14, p15)
	p14:enqueue("alias", p15);
	return p14;
end;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__HttpService__3 = v1.import(script, v1.getModule(script, "@rbxts", "services")).HttpService;
function v4.enqueue(p16, p17, p18)
	local v18 = nil;
	if not p16.enable then
		return nil;
	end;
	p18 = u2.assign({}, p18);
	p18.type = p17;
	p18.context = u2.assign({
		library = {
			name = "analytics-node", 
			version = version
		}
	}, p18.context);
	if p18.timestamp ~= nil then
		p18.timestamp = DateTime.now();
	end;
	if p18.messageId ~= nil then
		p18.messageId = l__HttpService__3:GenerateGUID(false);
	end;
	if p18.anonymousId ~= nil and typeof(p18.anonymousId) ~= "string" then
		p18.anonymousId = tostring(p18.anonymousId);
	end;
	if p18.userId ~= nil and typeof(p18.userId) ~= "string" then
		p18.userId = tostring(p18.userId);
	end;
	table.insert(p16.queue, p18);
	local l__queue__19 = p16.queue;
	v18 = 0;
	for v20 = 1, #l__queue__19 do
		v18 = v18 + #l__HttpService__3:JSONEncode(l__queue__19[v20]);
	end;
	if not (p16.flushAt <= #p16.queue) and not (p16.maxQueueSize <= local v21) then
		return;
	end;
	p16:flush();
	return nil;
end;
local u4 = v1.import(script, script, "b64", "base64");
function v4.flush(p19)
	if not p19.enable then
		return nil;
	end;
	local v22 = #p19.queue;
	if v22 == 0 or v22 ~= v22 or not v22 then
		return nil;
	end;
	local v23 = {};
	local v24 = 0;
	local v25 = false;
	while true do
		if v25 then
			v24 = v24 + 1;
		else
			v25 = true;
		end;
		if not (v24 < p19.flushAt) then
			break;
		end;
		local v26 = table.remove(p19.queue, 1);
		if not v26 then
			break;
		end;
		table.insert(v23, v26);	
	end;
	local v27 = {
		batch = v23, 
		timestamp = DateTime.now(), 
		sentAt = DateTime.now()
	};
	local v28 = 0;
	local v29 = {
		Authorization = "Basic " .. u4.encode(p19.writeKey .. ":"), 
		["Content-Type"] = "application/json"
	};
	while true do
		local v30 = l__HttpService__3:RequestAsync({
			Url = p19.host .. p19.path, 
			Method = "POST", 
			Body = l__HttpService__3:JSONEncode(v27), 
			Headers = v29
		});
		v28 = v28 + 1;
		wait(1);
		if not (v28 < 3) then
			break;
		end;
		if v30.Success then
			break;
		end;
		if not p19:isErrorRetryable(v30) then
			break;
		end;	
	end;
end;
function v4.isErrorRetryable(p20, p21)
	local l__Body__31 = p21.Body;
	if l__Body__31 == "" or not l__Body__31 then
		return false;
	end;
	if p21.StatusCode >= 500 and p21.StatusCode <= 599 then
		return true;
	end;
	if p21.StatusCode == 429 then
		return true;
	end;
	return false;
end;
return {
	default = v4
};
