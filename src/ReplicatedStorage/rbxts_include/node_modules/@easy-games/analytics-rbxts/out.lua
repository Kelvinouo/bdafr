-- Script Hash: 2bffa08ba6156cc2824b3ed2b9fe28dc988287e9473cea325799fb04a200533acb298d2b2b65e97c1c210e8977017a76
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "log").out);
local l__default__3 = v2.default;
local v4 = setmetatable({}, {
	__tostring = function()
		return "Analytics";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = l__default__3.Create():SetMinLogLevel(v2.LogLevel.Information):WriteTo(l__default__3.RobloxOutput({
	Prefix = "Analytics RbxTS"
})):Create();
local function u2(p1)
	return p1;
end;
function v4.constructor(p2, p3, p4)
	p2.closing = false;
	if p3 == "" or not p3 then
		u1:Warn("No analytics write key was provided. Analytics will not be sent.");
		p2.enable = false;
	end;
	p2.queue = {};
	p2.writeKey = p3;
	local v6 = p4;
	if v6 ~= nil then
		v6 = v6.host;
	end;
	local v7 = v6;
	if v7 == nil then
		v7 = "https://api.segment.io";
	end;
	p2.host = u2(v7);
	local v8 = p4;
	if v8 ~= nil then
		v8 = v8.path;
	end;
	local v9 = v8;
	if v9 == nil then
		v9 = "/v1/batch";
	end;
	p2.path = u2(v9);
	local v10 = p4;
	if v10 ~= nil then
		v10 = v10.flushAt;
	end;
	local v11 = v10;
	if v11 == nil then
		v11 = 20;
	end;
	p2.flushAt = v11;
	local v12 = p4;
	if v12 ~= nil then
		v12 = v12.maxQueueSize;
	end;
	local v13 = v12;
	if v13 == nil then
		v13 = 460800;
	end;
	p2.maxQueueSize = v13;
	local v14 = p4;
	if v14 ~= nil then
		v14 = v14.flushInterval;
	end;
	local v15 = v14;
	if v15 == nil then
		v15 = 10000;
	end;
	p2.flushInterval = v15;
	task.spawn(function()
		while not p2.closing do
			p2:flush();
			wait(p2.flushInterval / 1000);		
		end;
	end);
	game:BindToClose(function()
		p2.closing = true;
		p2:flush();
	end);
	local v16 = p4;
	if v16 ~= nil then
		v16 = v16.enable;
	end;
	local v17 = v16;
	if v17 == nil then
		v17 = true;
	end;
	p2.enable = v17;
end;
function v4.identify(p5, p6)
	p5:enqueue("identify", p6);
	return p5;
end;
function v4.group(p7, p8)
	p7:enqueue("group", p8);
	return p7;
end;
function v4.track(p9, p10)
	p9:enqueue("track", p10);
	return p9;
end;
function v4.page(p11, p12)
	p11:enqueue("page", p12);
	return p11;
end;
function v4.screen(p13, p14)
	p13:enqueue("screen", p14);
	return p13;
end;
function v4.alias(p15, p16)
	p15:enqueue("alias", p16);
	return p15;
end;
local u3 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__HttpService__4 = v1.import(script, v1.getModule(script, "@rbxts", "services")).HttpService;
function v4.enqueue(p17, p18, p19)
	local v18 = nil;
	if not p17.enable then
		return nil;
	end;
	p19 = u3.assign({}, p19);
	p19.type = p18;
	p19.context = u3.assign({
		library = {
			name = "analytics-node", 
			version = version
		}
	}, p19.context);
	if p19.timestamp ~= nil then
		p19.timestamp = DateTime.now();
	end;
	if p19.messageId ~= nil then
		p19.messageId = l__HttpService__4:GenerateGUID(false);
	end;
	if p19.anonymousId ~= nil and typeof(p19.anonymousId) ~= "string" then
		p19.anonymousId = tostring(p19.anonymousId);
	end;
	if p19.userId ~= nil and typeof(p19.userId) ~= "string" then
		p19.userId = tostring(p19.userId);
	end;
	table.insert(p17.queue, p19);
	local l__queue__19 = p17.queue;
	v18 = 0;
	local function v20(p20, p21)
		return p20 + #l__HttpService__4:JSONEncode(p21);
	end;
	for v21 = 1, #l__queue__19 do
		v18 = v20(v18, l__queue__19[v21], v21 - 1, l__queue__19);
	end;
	if not (p17.flushAt <= #p17.queue) and not (p17.maxQueueSize <= local v22) then
		return;
	end;
	p17:flush();
	return nil;
end;
local u5 = v1.import(script, script, "b64", "base64");
function v4.flush(p22)
	if not p22.enable then
		return nil;
	end;
	local v23 = #p22.queue;
	if v23 == 0 or v23 ~= v23 or not v23 then
		return nil;
	end;
	local v24 = {};
	local v25 = 0;
	local v26 = false;
	while true do
		if v26 then
			v25 = v25 + 1;
		else
			v26 = true;
		end;
		if not (v25 < p22.flushAt) then
			break;
		end;
		local v27 = table.remove(p22.queue, 1);
		if not v27 then
			break;
		end;
		table.insert(v24, v27);	
	end;
	local v28 = {
		batch = v24, 
		timestamp = DateTime.now(), 
		sentAt = DateTime.now()
	};
	local v29 = 0;
	local v30 = {
		Authorization = "Basic " .. u5.encode(p22.writeKey .. ":"), 
		["Content-Type"] = "application/json"
	};
	while true do
		local v31 = l__HttpService__4:RequestAsync({
			Url = p22.host .. p22.path, 
			Method = "POST", 
			Body = l__HttpService__4:JSONEncode(v28), 
			Headers = v30
		});
		v29 = v29 + 1;
		wait(1);
		if not (v29 < 3) then
			break;
		end;
		if v31.Success then
			break;
		end;
		if not p22:isErrorRetryable(v31) then
			break;
		end;	
	end;
end;
function v4.isErrorRetryable(p23, p24)
	local l__Body__32 = p24.Body;
	if l__Body__32 == "" or not l__Body__32 then
		return false;
	end;
	if p24.StatusCode >= 500 and p24.StatusCode <= 599 then
		return true;
	end;
	if p24.StatusCode == 429 then
		return true;
	end;
	return false;
end;
return {
	default = v4
};
