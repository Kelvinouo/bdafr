-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
function v1._new(p1)
	return setmetatable({
		ClassName = "Option", 
		_v = p1, 
		_s = p1 ~= nil
	}, v1);
end;
function v1.Some(p2)
	assert(p2 ~= nil, "Option.Some() value cannot be nil");
	return v1._new(p2);
end;
function v1.Wrap(p3)
	if p3 == nil then
		return v1.None;
	end;
	return v1.Some(p3);
end;
function v1.Is(p4)
	local v2 = false;
	if type(p4) == "table" then
		v2 = getmetatable(p4) == v1;
	end;
	return v2;
end;
function v1.Assert(p5)
	assert(v1.Is(p5), "Result was not of type Option");
end;
function v1.Deserialize(p6)
	local v3 = false;
	if type(p6) == "table" then
		v3 = p6.ClassName == "Option";
	end;
	assert(v3, "Invalid data for deserializing Option");
	return p6.Value == nil and v1.None or v1.Some(p6.Value);
end;
function v1.Serialize(p7)
	return {
		ClassName = p7.ClassName, 
		Value = p7._v
	};
end;
function v1.Match(p8, p9)
	local l__Some__4 = p9.Some;
	local l__None__5 = p9.None;
	assert(type(l__Some__4) == "function", "Missing 'Some' match");
	assert(type(l__None__5) == "function", "Missing 'None' match");
	if not p8:IsSome() then
		return l__None__5();
	end;
	return l__Some__4(p8:Unwrap());
end;
function v1.IsSome(p10)
	return p10._s;
end;
function v1.IsNone(p11)
	return not p11._s;
end;
function v1.Expect(p12, p13)
	assert(p12:IsSome(), p13);
	return p12._v;
end;
function v1.ExpectNone(p14, p15)
	assert(p14:IsNone(), p15);
end;
function v1.Unwrap(p16)
	return p16:Expect("Cannot unwrap option of None type");
end;
function v1.UnwrapOr(p17, p18)
	if not p17:IsSome() then
		return p18;
	end;
	return p17:Unwrap();
end;
function v1.UnwrapOrElse(p19, p20)
	if not p19:IsSome() then
		return p20();
	end;
	return p19:Unwrap();
end;
function v1.And(p21, p22)
	if p21:IsSome() then
		return p22;
	end;
	return v1.None;
end;
function v1.AndThen(p23, p24)
	if not p23:IsSome() then
		return v1.None;
	end;
	local v6 = p24(p23:Unwrap());
	v1.Assert(v6);
	return v6;
end;
function v1.Or(p25, p26)
	if p25:IsSome() then
		return p25;
	end;
	return p26;
end;
function v1.OrElse(p27, p28)
	if p27:IsSome() then
		return p27;
	end;
	local v7 = p28();
	v1.Assert(v7);
	return v7;
end;
function v1.XOr(p29, p30)
	local v8 = p29:IsSome();
	if v8 == p30:IsSome() then
		return v1.None;
	end;
	if v8 then
		return p29;
	end;
	return p30;
end;
function v1.Filter(p31, p32)
	if not p31:IsNone() and p32(p31._v) then
		return p31;
	end;
	return v1.None;
end;
function v1.Contains(p33, p34)
	return p33:IsSome() and p33._v == p34;
end;
function v1.__tostring(p35)
	if not p35:IsSome() then
		return "Option<None>";
	end;
	return "Option<" .. typeof(p35._v) .. ">";
end;
function v1.__eq(p36, p37)
	if v1.Is(p37) then
		if p36:IsSome() and p37:IsSome() then
			return p36:Unwrap() == p37:Unwrap();
		end;
		if p36:IsNone() and p37:IsNone() then
			return true;
		end;
	end;
	return false;
end;
v1.None = v1._new();
return v1;
