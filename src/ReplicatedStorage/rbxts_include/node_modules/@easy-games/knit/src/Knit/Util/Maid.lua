-- Script Hash: 29d77fb16523e696b67560c5ff84d078e2618a714ed6fd3b37240d2a7500b33235e61d2fe2a1de69e0add76effd437d0
-- Decompiled with the Synapse X Luau decompiler.

local u1 = {
	ClassName = "Maid", 
	new = function()
		return setmetatable({
			_tasks = {}
		}, u1);
	end, 
	__index = function(p1, p2)
		if u1[p2] then
			return u1[p2];
		end;
		return p1._tasks[p2];
	end
};
local u2 = require(script.Parent.Promise);
function u1.__newindex(p3, p4, p5)
	if u1[p4] ~= nil then
		error(("'%s' is reserved"):format(tostring(p4)), 2);
	end;
	local l___tasks__1 = p3._tasks;
	local v2 = l___tasks__1[p4];
	l___tasks__1[p4] = p5;
	if v2 then
		if type(v2) == "function" then
			v2();
			return;
		end;
		if typeof(v2) == "RBXScriptConnection" then
			v2:Disconnect();
			return;
		end;
		if not v2.Destroy then
			if u2.Is(v2) then
				v2:Cancel();
			end;
			return;
		end;
	else
		return;
	end;
	v2:Destroy();
end;
function u1.GiveTask(p6, p7)
	assert(p7, "Task cannot be false or nil");
	local v3 = #p6._tasks + 1;
	p6[v3] = p7;
	if type(p7) == "table" and not p7.Destroy and not u2.Is(p7) then
		warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n" .. debug.traceback());
	end;
	return v3;
end;
function u1.GivePromise(p8, p9)
	assert(u2.Is(p9), "Expected promise");
	if p9:GetStatus() ~= u2.Status.Started then
		return p9;
	end;
	local v4 = u2.Resolve(p9);
	local u3 = p8:GiveTask(v4);
	v4:Finally(function()
		p8[u3] = nil;
	end);
	return v4;
end;
function u1.DoCleaning(p10)
	local l___tasks__5 = p10._tasks;
	for v6, v7 in pairs(l___tasks__5) do
		if typeof(v7) == "RBXScriptConnection" then
			l___tasks__5[v6] = nil;
			v7:Disconnect();
		end;
	end;
	local v8, v9 = next(l___tasks__5);
	while v9 ~= nil do
		l___tasks__5[v8] = nil;
		if type(v9) == "function" then
			v9();
		elseif typeof(v9) == "RBXScriptConnection" then
			v9:Disconnect();
		elseif v9.Destroy then
			v9:Destroy();
		elseif u2.Is(v9) then
			v9:Cancel();
		end;
		local v10, v11 = next(l___tasks__5);
		v8 = v10;
		v9 = v11;	
	end;
end;
u1.Destroy = u1.DoCleaning;
return u1;
