-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	Version = script.Parent.Version.Value, 
	Player = game:GetService("Players").LocalPlayer, 
	Controllers = {}, 
	Util = script.Parent.Util
};
local u1 = require(v1.Util.Ser);
local u2 = require(v1.Util.Promise);
local u3 = require(v1.Util.Remote.ClientRemoteSignal);
local u4 = require(v1.Util.Remote.ClientRemoteProperty);
local u5 = {};
local u6 = require(v1.Util.TableUtil);
function v1.CreateController(p1)
	assert(type(p1) == "table", "Controller must be a table; got " .. type(p1));
	assert(type(p1.Name) == "string", "Controller.Name must be a string; got " .. type(p1.Name));
	assert(#p1.Name > 0, "Controller.Name must be a non-empty string");
	assert(v1.Controllers[p1.Name] == nil, "Service \"" .. p1.Name .. "\" already exists");
	u6.Extend(p1, {
		_knit_is_controller = true
	});
	v1.Controllers[p1.Name] = p1;
	return p1;
end;
local u7 = require(v1.Util.Loader);
function v1.AddControllers(p2)
	return u7.LoadChildren(p2);
end;
function v1.AddControllersDeep(p3)
	return u7.LoadDescendants(p3);
end;
local l__Services__8 = script.Parent:WaitForChild("Services");
local function u9(p4, p5)
	local v2 = {};
	if p5:FindFirstChild("RF") then
		local v3, v4, v5 = ipairs(p5.RF:GetChildren());
		while true do
			v3(v4, v5);
			if not v3 then
				break;
			end;
			v5 = v3;
			if v4:IsA("RemoteFunction") then
				v2[v4.Name] = function(p6, ...)
					return u1.DeserializeArgsAndUnpack(v4:InvokeServer(u1.SerializeArgsAndUnpack(...)));
				end;
				v2[v4.Name .. "Promise"] = function(p7, ...)
					local u10 = u1.SerializeArgs(...);
					return u2.new(function(p8)
						p8(u1.DeserializeArgsAndUnpack(v4:InvokeServer(table.unpack(u10, 1, u10.n))));
					end);
				end;
			end;		
		end;
	end;
	if p5:FindFirstChild("RE") then
		local v6, v7, v8 = ipairs(p5.RE:GetChildren());
		while true do
			v6(v7, v8);
			if not v6 then
				break;
			end;
			v8 = v6;
			if v7:IsA("RemoteEvent") then
				v2[v7.Name] = u3.new(v7);
			end;		
		end;
	end;
	if p5:FindFirstChild("RP") then
		local v9, v10, v11 = ipairs(p5.RP:GetChildren());
		while true do
			v9(v10, v11);
			if not v9 then
				break;
			end;
			v11 = v9;
			if v10:IsA("ValueBase") or v10:IsA("RemoteEvent") then
				v2[v10.Name] = u4.new(v10);
			end;		
		end;
	end;
	u5[p4] = v2;
	return v2;
end;
function v1.GetService(p9)
	assert(type(p9) == "string", "ServiceName must be a string; got " .. type(p9));
	local v12 = l__Services__8:FindFirstChild(p9);
	assert(v12 ~= nil, "Could not find service \"" .. p9 .. "\"");
	return u5[p9] or u9(p9, v12);
end;
function v1.GetController(p10)
	return v1.Controllers[p10];
end;
local u11 = false;
local u12 = false;
local u13 = Instance.new("BindableEvent");
local u14 = require(v1.Util.Thread);
function v1.Start()
	if u11 then
		return u2.Reject("Knit already started");
	end;
	u11 = true;
	local l__Controllers__15 = v1.Controllers;
	return u2.new(function(p11)
		local v13 = {};
		for v14, v15 in pairs(l__Controllers__15) do
			if type(v15.KnitInit) == "function" then
				table.insert(v13, u2.new(function(p12)
					debug.setmemorycategory(v15.Name);
					v15:KnitInit();
					p12();
				end));
			end;
		end;
		p11(u2.All(v13));
	end):Then(function()
		for v16, v17 in pairs(l__Controllers__15) do
			if type(v17.KnitStart) == "function" then
				task.spawn(function()
					debug.setmemorycategory(v17.Name);
					v17:KnitStart();
				end);
			end;
		end;
		u12 = true;
		u13:Fire();
		u14.Spawn(function()
			u13:Destroy();
		end);
	end);
end;
function v1.OnStart()
	if u12 then
		return u2.Resolve();
	end;
	return u2.new(function(p13)
		if u12 then
			p13();
			return;
		end;
		u13.Event:Wait();
		p13();
	end);
end;
return v1;
