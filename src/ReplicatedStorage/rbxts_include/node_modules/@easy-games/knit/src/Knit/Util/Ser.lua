-- Decompiled with the Synapse X Luau decompiler.

local u1 = {
	Classes = {
		Option = {
			Serialize = function(p1)
				return p1:Serialize();
			end, 
			Deserialize = require(script.Parent.Option).Deserialize
		}
	}, 
	SerializeArgs = function(...)
		local v1 = table.pack(...);
		local v2, v3, v4 = ipairs(v1);
		while true do
			v2(v3, v4);
			if not v2 then
				break;
			end;
			v4 = v2;
			if type(v3) == "table" then
				local v5 = u1.Classes[v3.ClassName];
				if v5 then
					v1[v2] = v5.Serialize(v3);
				end;
			end;		
		end;
		return v1;
	end, 
	SerializeArgsAndUnpack = function(...)
		local v6 = u1.SerializeArgs(...);
		return table.unpack(v6, 1, v6.n);
	end, 
	DeserializeArgs = function(...)
		local v7 = table.pack(...);
		local v8, v9, v10 = ipairs(v7);
		while true do
			v8(v9, v10);
			if not v8 then
				break;
			end;
			v10 = v8;
			if type(v9) == "table" then
				local v11 = u1.Classes[v9.ClassName];
				if v11 then
					v7[v8] = v11.Deserialize(v9);
				end;
			end;		
		end;
		return v7;
	end, 
	DeserializeArgsAndUnpack = function(...)
		local v12 = u1.DeserializeArgs(...);
		return table.unpack(v12, 1, v12.n);
	end, 
	Serialize = function(p2)
		if type(p2) == "table" then
			local v13 = u1.Classes[p2.ClassName];
			if v13 then
				p2 = v13.Serialize(p2);
			end;
		end;
		return p2;
	end, 
	Deserialize = function(p3)
		if type(p3) == "table" then
			local v14 = u1.Classes[p3.ClassName];
			if v14 then
				p3 = v14.Deserialize(p3);
			end;
		end;
		return p3;
	end, 
	UnpackArgs = function(p4)
		return table.unpack(p4, 1, p4.n);
	end
};
return u1;
