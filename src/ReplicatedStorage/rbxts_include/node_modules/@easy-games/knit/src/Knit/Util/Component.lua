-- Decompiled with the Synapse X Luau decompiler.

local l__RunService__1 = game:GetService("RunService");
local v2 = {};
v2.__index = v2;
local u1 = { workspace, (game:GetService("Players")) };
local u2 = {};
function v2.FromTag(p1)
	return u2[p1];
end;
function v2.Auto(p2)
	local v3, v4, v5 = ipairs(p2:GetDescendants());
	while true do
		v3(v4, v5);
		if not v3 then
			break;
		end;
		v5 = v3;
		if v4:IsA("ModuleScript") then
			local v6 = require(v4);
			assert(type(v6) == "table", "Expected table for component");
			assert(type(v6.Tag) == "string", "Expected .Tag property");
			v2.new(v6.Tag, v6, v6.RenderPriority);
		end;	
	end;
	p2.DescendantAdded:Connect(function(p3)
		if p3:IsA("ModuleScript") then
			local v7 = require(p3);
			assert(type(v7) == "table", "Expected table for component");
			assert(type(v7.Tag) == "string", "Expected .Tag property");
			v2.new(v7.Tag, v7, v7.RenderPriority);
		end;
	end);
end;
local u3 = require(script.Parent.Signal);
local u4 = require(script.Parent.Maid);
local l__CollectionService__5 = game:GetService("CollectionService");
local function u6(p4)
	local v8, v9, v10 = ipairs(u1);
	while true do
		v8(v9, v10);
		if not v8 then
			break;
		end;
		v10 = v8;
		if p4:IsDescendantOf(v9) then
			return true;
		end;	
	end;
	return false;
end;
function v2.new(p5, p6, p7)
	assert(type(p5) == "string", "Argument #1 (tag) should be a string; got " .. type(p5));
	assert(type(p6) == "table", "Argument #2 (class) should be a table; got " .. type(p6));
	assert(type(p6.new) == "function", "Class must contain a .new constructor function");
	assert(type(p6.Destroy) == "function", "Class must contain a :Destroy function");
	assert(u2[p5] == nil, "Component already bound to this tag");
	local v11 = setmetatable({}, v2);
	v11.Added = u3.new();
	v11.Removed = u3.new();
	v11._maid = u4.new();
	v11._lifecycleMaid = u4.new();
	v11._tag = p5;
	v11._class = p6;
	v11._objects = {};
	v11._instancesToObjects = {};
	v11._hasHeartbeatUpdate = type(p6.HeartbeatUpdate) == "function";
	v11._hasSteppedUpdate = type(p6.SteppedUpdate) == "function";
	v11._hasRenderUpdate = type(p6.RenderUpdate) == "function";
	v11._hasInit = type(p6.Init) == "function";
	v11._hasDeinit = type(p6.Deinit) == "function";
	v11._renderPriority = p7 or Enum.RenderPriority.Last.Value;
	v11._lifecycle = false;
	v11._nextId = 0;
	v11._maid:GiveTask(l__CollectionService__5:GetInstanceAddedSignal(p5):Connect(function(p8)
		if u6(p8) then
			v11:_instanceAdded(p8);
		end;
	end));
	v11._maid:GiveTask(l__CollectionService__5:GetInstanceRemovedSignal(p5):Connect(function(p9)
		v11:_instanceRemoved(p9);
	end));
	v11._maid:GiveTask(v11._lifecycleMaid);
	local v12 = Instance.new("BindableEvent");
	local v13, v14, v15 = ipairs(l__CollectionService__5:GetTagged(p5));
	while true do
		v13(v14, v15);
		if not v13 then
			break;
		end;
		v15 = v13;
		if u6(v14) then
			local v16 = v12.Event:Connect(function()
				v11:_instanceAdded(v14);
			end);
			v12:Fire();
			v16:Disconnect();
		end;	
	end;
	v12:Destroy();
	u2[p5] = v11;
	v11._maid:GiveTask(function()
		u2[p5] = nil;
	end);
	return v11;
end;
function v2._startHeartbeatUpdate(p10)
	local l___objects__7 = p10._objects;
	p10._heartbeatUpdate = l__RunService__1.Heartbeat:Connect(function(p11)
		local v17, v18, v19 = ipairs(l___objects__7);
		while true do
			v17(v18, v19);
			if not v17 then
				break;
			end;
			v19 = v17;
			v18:HeartbeatUpdate(p11);		
		end;
	end);
	p10._lifecycleMaid:GiveTask(p10._heartbeatUpdate);
end;
function v2._startSteppedUpdate(p12)
	local l___objects__8 = p12._objects;
	p12._steppedUpdate = l__RunService__1.Stepped:Connect(function(p13, p14)
		local v20, v21, v22 = ipairs(l___objects__8);
		while true do
			v20(v21, v22);
			if not v20 then
				break;
			end;
			v22 = v20;
			v21:SteppedUpdate(p14);		
		end;
	end);
	p12._lifecycleMaid:GiveTask(p12._steppedUpdate);
end;
function v2._startRenderUpdate(p15)
	p15._renderName = p15._tag .. "RenderUpdate";
	local l___objects__9 = p15._objects;
	l__RunService__1:BindToRenderStep(p15._renderName, p15._renderPriority, function(p16)
		local v23, v24, v25 = ipairs(l___objects__9);
		while true do
			v23(v24, v25);
			if not v23 then
				break;
			end;
			v25 = v23;
			v24:RenderUpdate(p16);		
		end;
	end);
	p15._lifecycleMaid:GiveTask(function()
		l__RunService__1:UnbindFromRenderStep(p15._renderName);
	end);
end;
function v2._startLifecycle(p17)
	p17._lifecycle = true;
	if p17._hasHeartbeatUpdate then
		p17:_startHeartbeatUpdate();
	end;
	if p17._hasSteppedUpdate then
		p17:_startSteppedUpdate();
	end;
	if p17._hasRenderUpdate then
		p17:_startRenderUpdate();
	end;
end;
function v2._stopLifecycle(p18)
	p18._lifecycle = false;
	p18._lifecycleMaid:DoCleaning();
end;
local u10 = l__RunService__1:IsServer();
local u11 = require(script.Parent.Thread);
function v2._instanceAdded(p19, p20)
	if p19._instancesToObjects[p20] then
		return;
	end;
	if not p19._lifecycle then
		p19:_startLifecycle();
	end;
	p19._nextId = p19._nextId + 1;
	local v26 = p19._tag .. tostring(p19._nextId);
	if u10 then
		p20:SetAttribute("ComponentServerId", v26);
	end;
	local v27 = p19._class.new(p20);
	v27.Instance = p20;
	v27._id = v26;
	p19._instancesToObjects[p20] = v27;
	table.insert(p19._objects, v27);
	if p19._hasInit then
		u11.Spawn(function()
			if p19._instancesToObjects[p20] ~= v27 then
				return;
			end;
			v27:Init();
		end);
	end;
	p19.Added:Fire(v27);
	return v27;
end;
function v2._instanceRemoved(p21, p22)
	p21._instancesToObjects[p22] = nil;
	local v28, v29, v30 = ipairs(p21._objects);
	while true do
		v28(v29, v30);
		if not v28 then
			break;
		end;
		v30 = v28;
		if v29.Instance == p22 then
			if p21._hasDeinit then
				v29:Deinit();
			end;
			if u10 and p22.Parent and p22:GetAttribute("ComponentServerId") ~= nil then
				p22:SetAttribute("ComponentServerId", nil);
			end;
			p21.Removed:Fire(v29);
			v29:Destroy();
			v29._destroyed = true;
			local l___objects__31 = p21._objects;
			local v32 = #l___objects__31;
			l___objects__31[v28] = l___objects__31[v32];
			l___objects__31[v32] = nil;
			break;
		end;	
	end;
	if #p21._objects == 0 and p21._lifecycle then
		p21:_stopLifecycle();
	end;
end;
local u12 = require(script.Parent.TableUtil);
function v2.GetAll(p23)
	return u12.CopyShallow(p23._objects);
end;
function v2.GetFromInstance(p24, p25)
	return p24._instancesToObjects[p25];
end;
function v2.GetFromID(p26, p27)
	local v33, v34, v35 = ipairs(p26._objects);
	while true do
		v33(v34, v35);
		if not v33 then
			break;
		end;
		v35 = v33;
		if v34._id == p27 then
			return v34;
		end;	
	end;
	return nil;
end;
function v2.Filter(p28, p29)
	return u12.Filter(p28._objects, p29);
end;
local u13 = require(script.Parent.Promise);
function v2.WaitFor(p30, p31, p32)
	local u14 = type(p31) == "string";
	local v36, v37, v38 = ipairs(p30._objects);
	while true do
		v36(v37, v38);
		if not v36 then
			break;
		end;
		v38 = v36;
		if u14 then
			local v39 = true;
			if v37.Instance.Name ~= p31 then
				v39 = not u14 and v37.Instance == p31;
			end;
		else
			v39 = not u14 and v37.Instance == p31;
		end;
		if v39 then
			return u13.resolve(v37);
		end;	
	end;
	local u15 = nil;
	return u13.FromEvent(p30.Added, function(p33)
		u15 = p33;
		if u14 then
			local v40 = true;
			if p33.Instance.Name ~= p31 then
				v40 = not u14 and p33.Instance == p31;
			end;
		else
			v40 = not u14 and p33.Instance == p31;
		end;
		return v40;
	end):Then(function()
		return u15;
	end):Timeout(p32 and 60);
end;
function v2.Destroy(p34)
	p34._maid:Destroy();
end;
return v2;
