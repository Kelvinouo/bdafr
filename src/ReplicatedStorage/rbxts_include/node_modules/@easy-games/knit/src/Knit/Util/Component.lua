-- Decompiled with the Synapse X Luau decompiler.

local l__RunService__1 = game:GetService("RunService");
local v2 = {};
v2.__index = v2;
local u1 = { workspace, (game:GetService("Players")) };
local u2 = {};
function v2.FromTag(p1)
	return u2[p1];
end;
function v2.Auto(p2)
	for v3, v4 in ipairs(p2:GetDescendants()) do
		if v4:IsA("ModuleScript") then
			local v5 = require(v4);
			assert(type(v5) == "table", "Expected table for component");
			assert(type(v5.Tag) == "string", "Expected .Tag property");
			v2.new(v5.Tag, v5, v5.RenderPriority);
		end;
	end;
	p2.DescendantAdded:Connect(function(p3)
		if p3:IsA("ModuleScript") then
			local v6 = require(p3);
			assert(type(v6) == "table", "Expected table for component");
			assert(type(v6.Tag) == "string", "Expected .Tag property");
			v2.new(v6.Tag, v6, v6.RenderPriority);
		end;
	end);
end;
local u3 = require(script.Parent.Signal);
local u4 = require(script.Parent.Maid);
local l__CollectionService__5 = game:GetService("CollectionService");
local function u6(p4)
	for v7, v8 in ipairs(u1) do
		if p4:IsDescendantOf(v8) then
			return true;
		end;
	end;
	return false;
end;
function v2.new(p5, p6, p7)
	assert(type(p5) == "string", "Argument #1 (tag) should be a string; got " .. type(p5));
	assert(type(p6) == "table", "Argument #2 (class) should be a table; got " .. type(p6));
	assert(type(p6.new) == "function", "Class must contain a .new constructor function");
	assert(type(p6.Destroy) == "function", "Class must contain a :Destroy function");
	assert(u2[p5] == nil, "Component already bound to this tag");
	local v9 = setmetatable({}, v2);
	v9.Added = u3.new();
	v9.Removed = u3.new();
	v9._maid = u4.new();
	v9._lifecycleMaid = u4.new();
	v9._tag = p5;
	v9._class = p6;
	v9._objects = {};
	v9._instancesToObjects = {};
	v9._hasHeartbeatUpdate = type(p6.HeartbeatUpdate) == "function";
	v9._hasSteppedUpdate = type(p6.SteppedUpdate) == "function";
	v9._hasRenderUpdate = type(p6.RenderUpdate) == "function";
	v9._hasInit = type(p6.Init) == "function";
	v9._hasDeinit = type(p6.Deinit) == "function";
	v9._renderPriority = p7 or Enum.RenderPriority.Last.Value;
	v9._lifecycle = false;
	v9._nextId = 0;
	v9._maid:GiveTask(l__CollectionService__5:GetInstanceAddedSignal(p5):Connect(function(p8)
		if u6(p8) then
			v9:_instanceAdded(p8);
		end;
	end));
	v9._maid:GiveTask(l__CollectionService__5:GetInstanceRemovedSignal(p5):Connect(function(p9)
		v9:_instanceRemoved(p9);
	end));
	v9._maid:GiveTask(v9._lifecycleMaid);
	local v10 = Instance.new("BindableEvent");
	for v11, v12 in ipairs(l__CollectionService__5:GetTagged(p5)) do
		if u6(v12) then
			local v13 = v10.Event:Connect(function()
				v9:_instanceAdded(v12);
			end);
			v10:Fire();
			v13:Disconnect();
		end;
	end;
	v10:Destroy();
	u2[p5] = v9;
	v9._maid:GiveTask(function()
		u2[p5] = nil;
	end);
	return v9;
end;
function v2._startHeartbeatUpdate(p10)
	local l___objects__7 = p10._objects;
	p10._heartbeatUpdate = l__RunService__1.Heartbeat:Connect(function(p11)
		for v14, v15 in ipairs(l___objects__7) do
			v15:HeartbeatUpdate(p11);
		end;
	end);
	p10._lifecycleMaid:GiveTask(p10._heartbeatUpdate);
end;
function v2._startSteppedUpdate(p12)
	local l___objects__8 = p12._objects;
	p12._steppedUpdate = l__RunService__1.Stepped:Connect(function(p13, p14)
		for v16, v17 in ipairs(l___objects__8) do
			v17:SteppedUpdate(p14);
		end;
	end);
	p12._lifecycleMaid:GiveTask(p12._steppedUpdate);
end;
function v2._startRenderUpdate(p15)
	p15._renderName = p15._tag .. "RenderUpdate";
	local l___objects__9 = p15._objects;
	l__RunService__1:BindToRenderStep(p15._renderName, p15._renderPriority, function(p16)
		for v18, v19 in ipairs(l___objects__9) do
			v19:RenderUpdate(p16);
		end;
	end);
	p15._lifecycleMaid:GiveTask(function()
		l__RunService__1:UnbindFromRenderStep(p15._renderName);
	end);
end;
function v2._startLifecycle(p17)
	p17._lifecycle = true;
	if p17._hasHeartbeatUpdate then
		p17:_startHeartbeatUpdate();
	end;
	if p17._hasSteppedUpdate then
		p17:_startSteppedUpdate();
	end;
	if p17._hasRenderUpdate then
		p17:_startRenderUpdate();
	end;
end;
function v2._stopLifecycle(p18)
	p18._lifecycle = false;
	p18._lifecycleMaid:DoCleaning();
end;
local u10 = l__RunService__1:IsServer();
local u11 = require(script.Parent.Thread);
function v2._instanceAdded(p19, p20)
	if p19._instancesToObjects[p20] then
		return;
	end;
	if not p19._lifecycle then
		p19:_startLifecycle();
	end;
	p19._nextId = p19._nextId + 1;
	local v20 = p19._tag .. tostring(p19._nextId);
	if u10 then
		p20:SetAttribute("ComponentServerId", v20);
	end;
	local v21 = p19._class.new(p20);
	v21.Instance = p20;
	v21._id = v20;
	p19._instancesToObjects[p20] = v21;
	table.insert(p19._objects, v21);
	if p19._hasInit then
		u11.Spawn(function()
			if p19._instancesToObjects[p20] ~= v21 then
				return;
			end;
			v21:Init();
		end);
	end;
	p19.Added:Fire(v21);
	return v21;
end;
function v2._instanceRemoved(p21, p22)
	p21._instancesToObjects[p22] = nil;
	for v22, v23 in ipairs(p21._objects) do
		if v23.Instance == p22 then
			if p21._hasDeinit then
				v23:Deinit();
			end;
			if u10 and p22.Parent and p22:GetAttribute("ComponentServerId") ~= nil then
				p22:SetAttribute("ComponentServerId", nil);
			end;
			p21.Removed:Fire(v23);
			v23:Destroy();
			v23._destroyed = true;
			local l___objects__24 = p21._objects;
			local v25 = #l___objects__24;
			l___objects__24[v22] = l___objects__24[v25];
			l___objects__24[v25] = nil;
			break;
		end;
	end;
	if #p21._objects == 0 and p21._lifecycle then
		p21:_stopLifecycle();
	end;
end;
local u12 = require(script.Parent.TableUtil);
function v2.GetAll(p23)
	return u12.CopyShallow(p23._objects);
end;
function v2.GetFromInstance(p24, p25)
	return p24._instancesToObjects[p25];
end;
function v2.GetFromID(p26, p27)
	for v26, v27 in ipairs(p26._objects) do
		if v27._id == p27 then
			return v27;
		end;
	end;
	return nil;
end;
function v2.Filter(p28, p29)
	return u12.Filter(p28._objects, p29);
end;
local u13 = require(script.Parent.Promise);
function v2.WaitFor(p30, p31, p32)
	local u14 = type(p31) == "string";
	for v28, v29 in ipairs(p30._objects) do
		if u14 then
			local v30 = true;
			if v29.Instance.Name ~= p31 then
				v30 = not u14 and v29.Instance == p31;
			end;
		else
			v30 = not u14 and v29.Instance == p31;
		end;
		if v30 then
			return u13.resolve(v29);
		end;
	end;
	local u15 = nil;
	return u13.FromEvent(p30.Added, function(p33)
		u15 = p33;
		if u14 then
			local v31 = true;
			if p33.Instance.Name ~= p31 then
				v31 = not u14 and p33.Instance == p31;
			end;
		else
			v31 = not u14 and p33.Instance == p31;
		end;
		return v31;
	end):Then(function()
		return u15;
	end):Timeout(p32 and 60);
end;
function v2.Destroy(p34)
	p34._maid:Destroy();
end;
return v2;
