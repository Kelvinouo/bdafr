-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	Tau = 0.5, 
	InitialVolatility = 0.06
};
v1.__index = v1;
function v1.gv(p1, p2, p3, p4)
	return setmetatable({
		Rating = p1, 
		RD = p2, 
		Vol = p3 or v1.InitialVolatility, 
		Version = p4 and 2
	}, v1);
end;
function v1.g1(p5, p6, p7)
	return v1.gv(p5 and 1500, p6 and 350, p7, 1);
end;
function v1.g2(p8, p9, p10)
	return v1.gv(p8 and 0, p9 and 2.014761872416068, p10, 2);
end;
function v1.copy(p11)
	return v1.gv(p11.Rating, p11.RD, p11.Vol, p11.Version);
end;
function v1.to2(p12)
	if p12.Version == 2 then
		local v2 = p12:copy();
		v2.Score = p12.Score;
		return v2;
	end;
	local v3 = v1.g2((p12.Rating - 1500) / 173.7178, p12.RD / 173.7178, p12.Vol);
	if p12.Score then
		v3.Score = p12.Score;
	end;
	return v3;
end;
function v1.to1(p13)
	if p13.Version == 1 then
		local v4 = p13:copy();
		v4.Score = p13.Score;
		return v4;
	end;
	local v5 = v1.g1(p13.Rating * 173.7178 + 1500, p13.RD * 173.7178, p13.Vol);
	if p13.Score then
		v5.Score = p13.Score;
	end;
	return v5;
end;
function v1.serialize(p14)
	return { p14.Rating, p14.RD, p14.Vol, p14.Score };
end;
function v1.deserialize(p15, p16)
	local v6 = nil;
	if p16 == 1 then
		v6 = v1.g1;
	elseif p16 == 2 then
		v6 = v1.g2;
	else
		error("Version must be specified for deserialization", 2);
	end;
	local v7 = v6(p15[1], p15[2], p15[3]);
	if p15[4] then
		v7 = v7:score(p15[4]);
	end;
	return v7;
end;
function v1.score(p17, p18)
	local v8 = p17:copy();
	v8.Score = p18 and 0;
	return v8;
end;
local l__math_sqrt__1 = math.sqrt;
local function u2(p19)
	return 1 / l__math_sqrt__1(1 + 3 * p19 ^ 2 / math.pi ^ 2);
end;
local l__math_exp__3 = math.exp;
local l__math_log__4 = math.log;
local function u5(p20, p21, p22)
	return 1 / (1 + l__math_exp__3(-u2(p22) * (p20 - p21)));
end;
local function u6(p23, p24, p25)
	local u7 = l__math_log__4(p23.Vol ^ 2);
	return function(p26)
		return l__math_exp__3(p26) * (p25 ^ 2 - p23.RD ^ 2 - p24 - l__math_exp__3(p26)) / (2 * (p23.RD ^ 2 + p24 + l__math_exp__3(p26)) ^ 2) - (p26 - u7) / v1.Tau ^ 2;
	end;
end;
function v1.update(p27, p28)
	local v9 = p27;
	local l__Version__10 = v9.Version;
	if l__Version__10 == 1 then
		v9 = v9:to2();
	end;
	for v11, v12 in ipairs(p28) do
		if v12.Version == 1 then
			p28[v11] = v12:to2();
		end;
	end;
	local v13 = 0;
	for v14, v15 in ipairs(p28) do
		local v16 = u5(v9.Rating, v15.Rating, v15.RD);
		v13 = v13 + u2(v15.RD) ^ 2 * v16 * (1 - v16);
	end;
	local v17 = 1 / v13;
	local v18 = 0;
	for v19, v20 in ipairs(p28) do
		v18 = v18 + u2(v20.RD) * (v20.Score - u5(v9.Rating, v20.Rating, v20.RD));
	end;
	local v21 = v18 * v17;
	local v22 = l__math_log__4(v9.Vol ^ 2);
	local v23 = u6(v9, v17, v21);
	local v24 = v22;
	if v9.RD ^ 2 + v17 < v21 ^ 2 then
		local v25 = l__math_log__4(v21 ^ 2 - v9.RD ^ 2 - v17);
	else
		local v26 = 1;
		while v23(v22 - v26 * v1.Tau) < 0 do
			v26 = v26 + 1;		
		end;
		v25 = v22 - v26 * v1.Tau;
	end;
	local v27 = v23(v24);
	local v28 = v23(v25);
	while math.abs(v25 - v24) > 1E-06 do
		local v29 = v24 + (v24 - v25) * v27 / (v28 - v27);
		local v30 = v23(v29);
		if v30 * v28 < 0 then
			v24 = v25;
			v27 = v28;
		else
			v27 = v27 / 2;
		end;
		v25 = v29;
		v28 = v30;	
	end;
	local v31 = v9.Vol;
	if #p28 > 0 then
		v31 = l__math_exp__3(v24 / 2);
	end;
	local v32 = l__math_sqrt__1(v9.RD ^ 2 + v31 ^ 2);
	local v33 = v9.Rating;
	if #p28 > 0 then
		v32 = 1 / l__math_sqrt__1(1 / v32 ^ 2 + 1 / v17);
		local v34 = 0;
		for v35, v36 in ipairs(p28) do
			v34 = v34 + u2(v36.RD) * (v36.Score - u5(v9.Rating, v36.Rating, v36.RD));
		end;
		v33 = v9.Rating + v32 ^ 2 * v34;
	end;
	local v37 = v1.g2(v33, v32, v31);
	if l__Version__10 == 1 then
		v37 = v37:to1();
	end;
	return v37;
end;
function v1.deviation(p29, p30)
	p30 = p30 and 2;
	local v38 = p29.RD * p30;
	return p29.Rating - v38, p29.Rating + v38;
end;
function v1.range(p31, p32)
	p32 = p32 and 0;
	local v39, v40 = p31:deviation();
	return v39 - p32, v40 + p32;
end;
function v1.percent(p33, p34)
	p34 = math.clamp(p34, 0, 1);
	assert(p34 < 1, "Percentage cannot be equal or greater than 1");
	return p33:deviation(0.5877 * math.log((1 + p34) / (1 - p34)));
end;
return {
	Glicko2 = v1
};
