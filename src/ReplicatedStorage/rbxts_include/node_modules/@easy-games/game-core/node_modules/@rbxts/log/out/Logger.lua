-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out.MessageTemplateToken);
local v3 = setmetatable({}, {
	__tostring = function()
		return "Logger";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__LogLevel__1 = v1.import(script, script.Parent, "Core").LogLevel;
function v3.constructor(p1)
	p1.logLevel = l__LogLevel__1.Information;
	p1.sinks = {};
	p1.enrichers = {};
end;
local l__LogConfiguration__2 = v1.import(script, script.Parent, "Configuration").LogConfiguration;
function v3.configure(p2)
	return l__LogConfiguration__2.new(v3.new());
end;
function v3._setSinks(p3, p4)
	p3.sinks = p4;
end;
function v3._setEnrichers(p5, p6)
	p5.enrichers = p6;
end;
function v3._setMinLogLevel(p7, p8)
	p7.logLevel = p8;
end;
function v3.default(p9)
	return p9.defaultLogger;
end;
function v3._serializeValue(p10, p11)
	if typeof(p11) == "Vector3" then
		return {
			X = p11.X, 
			Y = p11.Y, 
			Z = p11.Z
		};
	end;
	if typeof(p11) == "Vector2" then
		return {
			X = p11.X, 
			Y = p11.Y
		};
	end;
	if typeof(p11) == "Instance" then
		return p11:GetFullName();
	end;
	if typeof(p11) == "EnumItem" then
		return tostring(p11);
	end;
	if type(p11) ~= "string" and type(p11) ~= "number" and type(p11) ~= "boolean" and type(p11) ~= "table" then
		return tostring(p11);
	end;
	return p11;
end;
local l__MessageTemplateParser__3 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out.MessageTemplateParser).MessageTemplateParser;
local l__TemplateTokenKind__4 = v2.TemplateTokenKind;
local l__DestructureMode__5 = v2.DestructureMode;
local l__RbxSerializer__6 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out.RbxSerializer).RbxSerializer;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "message-templates").out).PlainTextMessageTemplateRenderer;
function v3.Write(p12, p13, p14, ...)
	local v5 = { ... };
	local v6 = {
		Level = p13, 
		SourceContext = nil, 
		Template = p14, 
		Timestamp = DateTime.now():ToIsoDate()
	};
	local v7 = l__MessageTemplateParser__3.GetTokens(p14);
	local function v8(p15)
		return p15.kind == l__TemplateTokenKind__4.Property;
	end;
	local v9 = {};
	local v10 = 0;
	for v11, v12 in ipairs(v7) do
		if v8(v12, v11 - 1, v7) == true then
			v10 = v10 + 1;
			v9[v10] = v12;
		end;
	end;
	local v13 = 0;
	for v14, v15 in ipairs(v9) do
		v13 = v13 + 1;
		local v16 = v5[v13 + 1];
		if v13 <= #v5 and v16 ~= nil then
			if v15.destructureMode == l__DestructureMode__5.ToString then
				v6[v15.propertyName] = tostring(v16);
			else
				v6[v15.propertyName] = type(v16) == "table" and v16 or l__RbxSerializer__6.Serialize(v16);
			end;
		end;
	end;
	for v17, v18 in ipairs(p12.enrichers) do
		local v19 = {};
		v18:Enrich(v6, v19);
		for v20, v21 in pairs(v19) do
			v6[v20] = type(v21) == "table" and v21 or l__RbxSerializer__6.Serialize(v21);
		end;
	end;
	for v22, v23 in ipairs(p12.sinks) do
		v23:Emit(v6);
	end;
	return u7.new(v7):Render(v6);
end;
function v3.GetLevel(p16)
	return p16.logLevel;
end;
function v3.Verbose(p17, p18, ...)
	if l__LogLevel__1.Verbose < p17:GetLevel() then
		return nil;
	end;
	p17:Write(l__LogLevel__1.Verbose, p18, unpack({ ... }));
end;
function v3.Info(p19, p20, ...)
	if l__LogLevel__1.Information < p19:GetLevel() then
		return nil;
	end;
	p19:Write(l__LogLevel__1.Information, p20, unpack({ ... }));
end;
function v3.Debug(p21, p22, ...)
	if l__LogLevel__1.Debugging < p21:GetLevel() then
		return nil;
	end;
	p21:Write(l__LogLevel__1.Debugging, p22, unpack({ ... }));
end;
function v3.Warn(p23, p24, ...)
	if l__LogLevel__1.Warning < p23:GetLevel() then
		return nil;
	end;
	p23:Write(l__LogLevel__1.Warning, p24, unpack({ ... }));
end;
function v3.Error(p25, p26, ...)
	if l__LogLevel__1.Error < p25:GetLevel() then
		return nil;
	end;
	return p25:Write(l__LogLevel__1.Error, p26, unpack({ ... }));
end;
function v3.Fatal(p27, p28, ...)
	return p27:Write(l__LogLevel__1.Fatal, p28, unpack({ ... }));
end;
function v3.Copy(p29)
	local v24 = l__LogConfiguration__2.new(v3.new());
	v24:SetMinLogLevel(p29:GetLevel());
	for v25, v26 in ipairs(p29.sinks) do
		v24:WriteTo(v26);
	end;
	for v27, v28 in ipairs(p29.enrichers) do
		v24:Enrich(v28);
	end;
	return v24;
end;
function v3.ForContext(p30, p31, p32)
	local v29 = p30:Copy();
	if typeof(p31) == "Instance" then
		local v30 = p31:GetFullName();
	else
		v30 = tostring(p31);
	end;
	if p32 ~= nil then
		p32(v29);
	end;
	return v29:EnrichWithProperty("SourceContext", v30):Create();
end;
function v3.ForScript(p33, p34)
	local v31 = p33:Copy();
	if p34 ~= nil then
		p34(v31);
	end;
	return v31:EnrichWithProperty("SourceContext", (debug.info(2, "s"))):Create();
end;
function v3.ForFunction(p35, p36, p37)
	local v32 = p35:Copy();
	if p37 ~= nil then
		p37(v32);
	end;
	local v33 = debug.info(p36, "n");
	if v33 == nil then
		v33 = "<anonymous>";
	end;
	return v32:EnrichWithProperty("SourceContext", v33);
end;
function v3.ForProperty(p38, p39, p40)
	return p38:Copy():EnrichWithProperty(p39, p40):Create();
end;
v3.defaultLogger = v3.new();
return {
	Logger = v3
};
