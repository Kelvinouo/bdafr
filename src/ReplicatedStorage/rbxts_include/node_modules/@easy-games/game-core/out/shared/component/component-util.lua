-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__CollectionService__1 = v1.import(script, v1.getModule(script, "@rbxts", "services")).CollectionService;
local u2 = nil;
local u3 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__MapUtil__4 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local u5 = {};
local u6 = {};
u2 = setmetatable({}, {
	__tostring = function()
		return "ComponentUtil";
	end
});
u2.__index = u2;
function u2.new(...)
	local v2 = setmetatable({}, u2);
	return v2:constructor(...) and v2;
end;
function u2.constructor(p1)

end;
function u2.extractComponent(p2, p3, p4, p5)
	if p5 == nil then
		p5 = false;
	end;
	if p3 == nil then
		return nil;
	end;
	if typeof(p3) == "table" then
		return p3;
	end;
	if p5 then
		local v3 = u2:getComponentFromDescendant(p3, p4);
	else
		v3 = u2:getComponent(p3, p4);
	end;
	if v3 ~= 0 and v3 == v3 and v3 ~= "" and v3 then
		return v3;
	end;
end;
local l__waitWithSignal__7 = v1.import(script, script.Parent.Parent, "signal-wait", "signal-wait").waitWithSignal;
function u2.waitForComponent(p6, p7, p8, p9)
	local v4 = nil;
	local v5 = p8:getTag();
	local v6 = u2:getComponent(p7, p8);
	if v6 then
		return v6;
	end;
	local v7 = u3.new();
	if p9 then
		p9:GiveTask(v7);
	end;
	v7:GiveTask(p7.Destroying:Connect(function()
		v7:DoCleaning();
	end));
	local u8 = false;
	v7:GiveTask(function()
		u8 = true;
	end);
	if table.find(l__CollectionService__1:GetTags(p7), v5) == nil then
		local v8 = nil;
		while true do
			v8 = l__waitWithSignal__7(l__CollectionService__1:GetInstanceAddedSignal(v5), v7);
			if not v8 then
				break;
			end;
			if v8[1] == p7 then
				break;
			end;		
		end;
		if not v8 then
			v7:DoCleaning();
			return nil;
		end;
	end;
	while true do
		v4 = u2:getComponent(p7, p8);
		if u8 then
			break;
		end;
		local v9 = not v4 and task.wait();
		if v9 == 0 then
			break;
		end;
		if v9 ~= v9 then
			break;
		end;
		if not v9 then
			break;
		end;	
	end;
	v7:DoCleaning();
	return v4;
end;
local l__Flamework__9 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Flamework;
function u2.removeComponent(p10, p11, p12)
	if not u2:getComponent(p11, p12) then
		return false;
	end;
	l__Flamework__9.resolveDependency("$c:init@Components"):removeComponent(p11, p12);
	l__CollectionService__1:RemoveTag(p11, p12:getTag());
	return true;
end;
local u10 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function u2.addComponent(p13, p14, p15, p16)
	local v10 = u2:getComponent(p14, p15);
	if v10 then
		return v10;
	end;
	local v11 = l__Flamework__9.resolveDependency("$c:init@Components"):addComponent(p14, p15);
	if p16 ~= 0 and p16 == p16 and p16 ~= "" and p16 then
		local v12, v13, v14 = ipairs(u10.entries(p16));
		while true do
			v12(v13, v14);
			if not v12 then
				break;
			end;
			v14 = v12;
			v11:setAttribute(v13[1], v13[2]);		
		end;
	end;
	l__CollectionService__1:AddTag(p14, (p15:getTag()));
	return v11;
end;
function u2.getAllComponents(p17, p18)
	local v15 = {};
	local v16, v17, v18 = ipairs(l__CollectionService__1:GetTagged(p18:getTag()));
	while true do
		v16(v17, v18);
		if not v16 then
			break;
		end;
		v18 = v16;
		local v19 = p17:getComponent(v17, p18);
		if v19 then
			table.insert(v15, v19);
		end;	
	end;
	return v15;
end;
function u2.hasComponent(p19, p20, p21)
	return u2:getComponent(p20, p21) ~= nil;
end;
function u2.getComponent(p22, p23, p24)
	if not p23 then
		return nil;
	end;
	local v20 = l__Flamework__9.resolveDependency("$c:init@Components"):getComponent(p23, p24);
	if not v20 then
		return;
	end;
	return v20;
end;
function u2.getComponentFromDescendant(p25, p26, p27)
	if not p26 then
		return nil;
	end;
	local v21 = l__Flamework__9.resolveDependency("$c:init@Components"):getComponent(p26, p27);
	if v21 then
		return v21;
	end;
	return u2:getComponentFromDescendant(p26.Parent, p27);
end;
function u2.componentAdded(p28, p29, p30)
	return l__CollectionService__1:GetInstanceAddedSignal(p29:getTag()):Connect(function(p31)
		local v22 = p28:waitForComponent(p31, p29);
		if v22 then
			p30(v22);
		end;
	end);
end;
function u2.findFirstChild(p32, p33, p34)
	local v23, v24, v25 = ipairs(p33:GetChildren());
	while true do
		v23(v24, v25);
		if not v23 then
			break;
		end;
		v25 = v23;
		local v26 = u2:getComponent(v24, p34);
		if v26 then
			return v26;
		end;	
	end;
	return nil;
end;
function u2.findFirstDescendant(p35, p36, p37)
	local v27, v28, v29 = ipairs(p36:GetDescendants());
	while true do
		v27(v28, v29);
		if not v27 then
			break;
		end;
		v29 = v27;
		local v30 = u2:getComponent(v28, p37);
		if v30 then
			return v30;
		end;	
	end;
	return nil;
end;
return {
	WatchComponent = function(p38, p39)
		local v31, v32, v33 = ipairs(u2:getAllComponents(p38));
		while true do
			v31(v32, v33);
			if not v31 then
				break;
			end;
			v33 = v31;
			task.spawn(function()
				p39(v32);
			end);		
		end;
		return u2:componentAdded(p38, function(p40)
			return p39(p40);
		end);
	end, 
	WatchInstanceComponent = function(p41, p42, p43)
		local v34 = u3.new();
		local v35 = u2:getComponent(p41, p42);
		if v35 then
			task.spawn(function()
				p43(v35);
			end);
		end;
		local v36 = l__MapUtil__4.getOrCreate(u5, p42, {});
		local v37 = v36[p41];
		if not v37 then
			v37 = {};
			v36[p41] = v37;
			p41.Destroying:Connect(function()
				v36[p41] = nil;
			end);
		end;
		table.insert(v37, p43);
		v34:GiveTask(function()
			local v38 = v37;
			if v38 ~= nil then
				v38 = (table.find(v38, p43) and 0) - 1;
			end;
			if v38 ~= nil and v38 >= 0 and v37 ~= nil then
				table.remove(v37, v38 + 1);
			end;
		end);
		if u6[p42:getTag()] == nil then
			u6[p42:getTag()] = u2:componentAdded(p42, function(p44)
				local v39 = v36[p44.instance];
				if v39 == nil then
					v39 = {};
				end;
				local v40, v41, v42 = ipairs(v39);
				while true do
					v40(v41, v42);
					if not v40 then
						break;
					end;
					v42 = v40;
					task.spawn(function()
						v41(p44);
					end);				
				end;
			end);
		end;
		return v34;
	end, 
	ComponentUtil = u2
};
