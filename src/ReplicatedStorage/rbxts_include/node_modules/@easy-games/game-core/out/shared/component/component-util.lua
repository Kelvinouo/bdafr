
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__CollectionService__1 = v1.import(script, v1.getModule(script, "@rbxts", "services")).CollectionService;
local u2 = nil;
local u3 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__MapUtil__4 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local u5 = {};
local u6 = {};
u2 = setmetatable({}, {
	__tostring = function()
		return "ComponentUtil";
	end
});
u2.__index = u2;
function u2.new(...)
	local v2 = setmetatable({}, u2);
	return v2:constructor(...) and v2;
end;
function u2.constructor(p1)

end;
function u2.extractComponent(p2, p3, p4, p5)
	if p5 == nil then
		p5 = false;
	end;
	if p3 == nil then
		return nil;
	end;
	if typeof(p3) == "table" then
		return p3;
	end;
	if p5 then
		local v3 = u2:getComponentFromDescendant(p3, p4);
	else
		v3 = u2:getComponent(p3, p4);
	end;
	if v3 ~= 0 and v3 == v3 and v3 ~= "" and v3 then
		return v3;
	end;
end;
local l__waitWithSignal__7 = v1.import(script, script.Parent.Parent, "signal-wait", "signal-wait").waitWithSignal;
function u2.waitForComponent(p6, p7, p8, p9)
	local v4 = nil;
	local v5 = p8:getTag();
	local v6 = u2:getComponent(p7, p8);
	if v6 then
		return v6;
	end;
	local v7 = u3.new();
	if p9 then
		p9:GiveTask(v7);
	end;
	v7:GiveTask(p7.Destroying:Connect(function()
		v7:DoCleaning();
	end));
	local u8 = false;
	v7:GiveTask(function()
		u8 = true;
	end);
	if table.find(l__CollectionService__1:GetTags(p7), v5) == nil then
		local v8 = nil;
		while true do
			v8 = l__waitWithSignal__7(l__CollectionService__1:GetInstanceAddedSignal(v5), v7);
			if not v8 then
				break;
			end;
			if v8[1] == p7 then
				break;
			end;		
		end;
		if not v8 then
			v7:DoCleaning();
			return nil;
		end;
	end;
	while true do
		v4 = u2:getComponent(p7, p8);
		if u8 then
			break;
		end;
		local v9 = not v4 and task.wait();
		if v9 == 0 then
			break;
		end;
		if v9 ~= v9 then
			break;
		end;
		if not v9 then
			break;
		end;	
	end;
	v7:DoCleaning();
	return v4;
end;
local l__Flamework__9 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Flamework;
function u2.removeComponent(p10, p11, p12)
	if not u2:getComponent(p11, p12) then
		return false;
	end;
	l__Flamework__9.resolveDependency("$c:init@Components"):removeComponent(p11, p12);
	return true;
end;
local u10 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local function u11(p13, p14)
	l__CollectionService__1:AddTag(p13, p14);
end;
function u2.addComponent(p15, p16, p17, p18)
	local v10 = u2:getComponent(p16, p17);
	if v10 then
		return v10;
	end;
	local v11 = l__Flamework__9.resolveDependency("$c:init@Components"):addComponent(p16, p17);
	if p18 ~= 0 and p18 == p18 and p18 ~= "" and p18 then
		for v12, v13 in ipairs(u10.entries(p18)) do
			v11:setAttribute(v13[1], v13[2]);
		end;
	end;
	u11(p16, (p17:getTag()));
	return v11;
end;
function u2.getAllComponents(p19, p20)
	local v14 = {};
	for v15, v16 in ipairs(l__CollectionService__1:GetTagged(p20:getTag())) do
		local v17 = p19:getComponent(v16, p20);
		if v17 then
			table.insert(v14, v17);
		end;
	end;
	return v14;
end;
function u2.hasComponent(p21, p22, p23)
	return u2:getComponent(p22, p23) ~= nil;
end;
function u2.getComponent(p24, p25, p26)
	if not p25 then
		return nil;
	end;
	local v18 = l__Flamework__9.resolveDependency("$c:init@Components"):getComponent(p25, p26);
	if not v18 then
		return;
	end;
	return v18;
end;
function u2.getComponentFromDescendant(p27, p28, p29)
	if not p28 then
		return nil;
	end;
	local v19 = l__Flamework__9.resolveDependency("$c:init@Components"):getComponent(p28, p29);
	if v19 then
		return v19;
	end;
	return u2:getComponentFromDescendant(p28.Parent, p29);
end;
function u2.componentAdded(p30, p31, p32)
	return l__CollectionService__1:GetInstanceAddedSignal(p31:getTag()):Connect(function(p33)
		local v20 = p30:waitForComponent(p33, p31);
		if v20 then
			p32(v20);
		end;
	end);
end;
function u2.findFirstChild(p34, p35, p36)
	for v21, v22 in ipairs(p35:GetChildren()) do
		local v23 = u2:getComponent(v22, p36);
		if v23 then
			return v23;
		end;
	end;
	return nil;
end;
function u2.findFirstDescendant(p37, p38, p39)
	for v24, v25 in ipairs(p38:GetDescendants()) do
		local v26 = u2:getComponent(v25, p39);
		if v26 then
			return v26;
		end;
	end;
	return nil;
end;
return {
	WatchComponent = function(p40, p41)
		for v27, v28 in ipairs(u2:getAllComponents(p40)) do
			task.spawn(function()
				p41(v28);
			end);
		end;
		return u2:componentAdded(p40, function(p42)
			return p41(p42);
		end);
	end, 
	WatchInstanceComponent = function(p43, p44, p45)
		local v29 = u3.new();
		local v30 = u2:getComponent(p43, p44);
		if v30 then
			task.spawn(function()
				p45(v30);
			end);
		end;
		local v31 = l__MapUtil__4.getOrCreate(u5, p44, {});
		local v32 = v31[p43];
		if not v32 then
			v32 = {};
			v31[p43] = v32;
			p43.Destroying:Connect(function()
				v31[p43] = nil;
			end);
		end;
		table.insert(v32, p45);
		v29:GiveTask(function()
			local v33 = v32;
			if v33 ~= nil then
				v33 = (table.find(v33, p45) and 0) - 1;
			end;
			if v33 ~= nil and v33 >= 0 and v32 ~= nil then
				table.remove(v32, v33 + 1);
			end;
		end);
		if u6[p44:getTag()] == nil then
			u6[p44:getTag()] = u2:componentAdded(p44, function(p46)
				local v34 = v31[p46.instance];
				if v34 == nil then
					v34 = {};
				end;
				for v35, v36 in ipairs(v34) do
					task.spawn(function()
						v36(p46);
					end);
				end;
			end);
		end;
		return v29;
	end, 
	ComponentUtil = u2
};

