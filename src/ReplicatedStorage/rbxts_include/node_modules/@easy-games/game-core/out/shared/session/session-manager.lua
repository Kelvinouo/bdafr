-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "Session";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
function v2.constructor(p1, p2)
	p1.destroyFunction = p2;
end;
function v2.Destroy(p3)
	p3.destroyFunction();
end;
local v4 = setmetatable({}, {
	__tostring = function()
		return "ISessionManager";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local l__Players__1 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Players;
function v4.constructor(p4)
	p4.sessionCompleteCallbacks = {};
	p4.playerRemovingCallbacks = {};
	l__Players__1.PlayerAdded:Connect(function(p5)
		p4:handlePlayer(p5);
	end);
	local v6, v7, v8 = ipairs(l__Players__1:GetPlayers());
	while true do
		v6(v7, v8);
		if not v6 then
			break;
		end;
		v8 = v6;
		p4:handlePlayer(v7);	
	end;
end;
function v4.onSessionComplete(p6, p7)
	p6.sessionCompleteCallbacks[p7] = true;
	return v2.new(function()
		p6.sessionCompleteCallbacks[p7] = nil;
	end);
end;
function v4.onPlayerRemoving(p8, p9)
	p8.playerRemovingCallbacks[p9] = true;
	return v2.new(function()
		p8.playerRemovingCallbacks[p9] = nil;
	end);
end;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__SetUtil__3 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).SetUtil;
function v4.handlePlayer(p10, p11)
	local v9 = u2.new();
	local u4 = false;
	v9:GiveTask(l__Players__1.PlayerRemoving:Connect(function(p12)
		if p12 ~= p11 then
			return nil;
		end;
		if not u4 then
			local v10, v11, v12 = ipairs(l__SetUtil__3.values(p10.sessionCompleteCallbacks));
			while true do
				v10(v11, v12);
				if not v10 then
					break;
				end;
				local v13, v14 = pcall(function()
					v11(p11);
				end);
				local v15 = v13 and {
					success = true, 
					value = v14
				} or {
					success = false, 
					error = v14
				};
				if not v15.success then
					v1.Promise.defer(function()
						error(v15.error);
					end);
				end;			
			end;
		end;
		local v16, v17, v18 = ipairs(l__SetUtil__3.values(p10.playerRemovingCallbacks));
		while true do
			v16(v17, v18);
			if not v16 then
				break;
			end;
			local v19, v20 = pcall(function()
				v17(p11, not u4);
			end);
			local v21 = v19 and {
				success = true, 
				value = v20
			} or {
				success = false, 
				error = v20
			};
			if not v21.success then
				v1.Promise.defer(function()
					error(v21.error);
				end);
			end;		
		end;
	end));
	v9:GiveTask(p11.OnTeleport:Connect(function(p13)
		if p13 ~= Enum.TeleportState.Failed then
			u4 = true;
			return;
		end;
		u4 = false;
	end));
	v9:GiveTask(p11.AncestryChanged:Connect(function()
		if not p11.Parent then
			v9:DoCleaning();
		end;
	end));
end;
return {
	SessionManager = v4.new()
};
