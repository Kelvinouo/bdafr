-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	fromList = function(...)
		local v2 = { ... };
		return v2[math.floor(math.random() * #v2) + 1];
	end
};
local function v3(p1, p2, p3)
	if p2 < 1 then
		return {};
	end;
	local v4 = {};
	local v5 = table.create(#p1);
	local v6, v7, v8 = ipairs(p1);
	while true do
		v6(v7, v8);
		if not v6 then
			break;
		end;
		v8 = v6;
		v5[v6] = v7;	
	end;
	local v9 = 0;
	local v10 = false;
	while true do
		if v10 then
			v9 = v9 + 1;
		else
			v10 = true;
		end;
		if not (v9 < math.min(p2, #p1)) then
			break;
		end;
		local v11 = p3;
		if v11 ~= nil then
			v11 = v11:NextNumber();
		end;
		local v12 = v11;
		if v12 == nil then
			v12 = math.random();
		end;
		local v13 = table.remove(v5, math.clamp(math.floor(v12 * #v5), 0, #v5 - 1) + 1);
		if v13 ~= 0 and v13 == v13 and v13 ~= "" and v13 then
			table.insert(v4, v13);
		end;	
	end;
	return v4;
end;
v1.randomArraySelectN = v3;
function v1.shuffleArray(p4, p5)
	return v3(p4, #p4, p5);
end;
return {
	RandomUtil = v1
};
