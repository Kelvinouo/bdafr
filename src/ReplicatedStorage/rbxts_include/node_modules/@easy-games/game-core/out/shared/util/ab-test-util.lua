-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "ABTestUtil";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
function v2.constructor(p1)

end;
local l__MathExtras__1 = v1.import(script, script.Parent, "math-util").MathExtras;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v2.pickValue(p2, p3, p4, p5, p6)
	local v4 = nil;
	if not p6 then
		p6 = {};
		local u3 = 1 / #p5;
		local v5, v6, v7 = ipairs(p5);
		while true do
			v5(v6, v7);
			if not v5 then
				break;
			end;
			v7 = v5;
			if p6 ~= nil then
				table.insert(p6, u3);
			end;		
		end;
	end;
	if #p6 ~= #p5 then
		warn("Bucket size does not match the size of ratios. Each bucket must have a ratio");
		return p5[1];
	end;
	v4 = 0;
	for v8 = 1, #p6 do
		v4 = v4 + p6[v8];
	end;
	local function v9(p7, p8, p9)
		local v10 = p7;
		local v11 = 0;
		local v12 = false;
		while true do
			if v12 then
				v11 = v11 + 1;
			else
				v12 = true;
			end;
			if not (v11 < p8) then
				break;
			end;
			v10 = v10 + p9[v11 + 1];		
		end;
		return v10;
	end;
	local v13 = table.create(#p6);
	local v14, v15, v16 = ipairs(p6);
	while true do
		v14(v15, v16);
		if not v14 then
			break;
		end;
		v16 = v14;
		v13[v14] = v9(v15, v14 - 1, p6);	
	end;
	local v17 = l__MathExtras__1:rangeMap((1103515245 * (p4 + p3) + 12345) % 2147483648 / 2147483648, { 0, 1 }, { 0, local v18 });
	local v19 = 0;
	local v20 = false;
	while true do
		if v20 then
			v19 = v19 + 1;
		else
			v20 = true;
		end;
		if not (v19 < #v13) then
			break;
		end;
		if v17 < v13[v19 + 1] then
			print("Buckets values", u2(p5), "ratios", u2(p6), "checkable ratios", u2(v13), "max", v18, "roll", v17, "picked", p5[v19 + 1]);
			return p5[v19 + 1];
		end;	
	end;
	warn("Rolled a value outside of the allowed range. This should never happen...");
	return p5[1];
end;
return {
	ABTestUtil = v2
};
