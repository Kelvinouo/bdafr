-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script].import(script, script.Parent, "modifier-group");
local l__ModifierGroup__1 = v1.ModifierGroup;
local l__GroupModifierBehavior__2 = v1.GroupModifierBehavior;
return function()
	it("should apply base properties", function()
		local v2 = Instance.new("Part");
		l__ModifierGroup__1.new(v2, {
			behavior = l__GroupModifierBehavior__2.Merge, 
			baseProperties = {
				Size = Vector3.new(1, 1, 1), 
				Transparency = 0.5
			}
		});
		expect(v2.Size).to.equal(Vector3.new(1, 1, 1));
		expect(v2.Transparency).to.equal(0.5);
	end);
	it("should reset a property when a modifier is removed", function()
		local v3 = Instance.new("Part");
		local v4 = l__ModifierGroup__1.new(v3, {
			behavior = l__GroupModifierBehavior__2.Merge, 
			baseProperties = {
				Transparency = 0.5
			}
		});
		expect(v3.Transparency).to.equal(0.5);
		local v5 = v4:addModifier(1, {
			Transparency = 1
		});
		expect(v3.Transparency).to.equal(1);
		v5:destroy();
		expect(v3.Transparency).to.equal(0.5);
	end);
	describe("fallthrough", function()
		it("should apply lower-priority modifiers", function()
			local v6 = Instance.new("Part");
			local v7 = l__ModifierGroup__1.new(v6, {
				behavior = l__GroupModifierBehavior__2.Merge, 
				baseProperties = {
					Size = Vector3.new(1, 1, 1), 
					Transparency = 0.5
				}
			});
			v7:addModifier(1, {
				Position = Vector3.new(0, 10, 0)
			});
			v7:addModifier(2, {
				Color = Color3.new(1, 0, 0)
			});
			v7:addModifier(3, {
				Color = Color3.new(0, 1, 0)
			});
			v7:addModifier(4, {
				Reflectance = 1
			});
			expect(v6.Reflectance).to.equal(1);
			expect(v6.Color).to.equal(Color3.new(0, 1, 0));
			expect(v6.Position).to.equal(Vector3.new(0, 10, 0));
			expect(v6.Size).to.equal(Vector3.new(1, 1, 1));
			expect(v6.Transparency).to.equal(0.5);
		end);
	end);
	describe("static", function()
		it("should only apply highest-priority modifier", function()
			local v8 = Instance.new("Part");
			local v9 = l__ModifierGroup__1.new(v8, {
				behavior = l__GroupModifierBehavior__2.HighestOnly, 
				baseProperties = {
					Size = Vector3.new(1, 1, 1), 
					Position = Vector3.new(), 
					Transparency = 0.5, 
					Color = Color3.new(0, 1, 0)
				}
			});
			v9:addModifier(1, {
				Position = Vector3.new(0, 10, 0)
			});
			v9:addModifier(2, {
				Color = Color3.new(1, 0, 0)
			});
			expect(v8.Color).to.equal(Color3.new(1, 0, 0));
			expect(v8.Position).to.never.equal(Vector3.new(0, 10, 0));
			expect(v8.Size).to.equal(Vector3.new(1, 1, 1));
			expect(v8.Position).to.equal(Vector3.new());
			expect(v8.Transparency).to.equal(0.5);
		end);
	end);
end;
