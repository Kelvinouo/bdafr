-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "ResetTime";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
function v2.constructor(p1, p2)
	p1.firstResetTime = 0;
	local v4 = tonumber(p2);
	if v4 ~= 0 and v4 == v4 and v4 then
		p1.firstResetTime = p2;
		return;
	end;
	local v5 = {};
	for v6, v7 in pairs(p2) do
		v5[v6] = v7;
	end;
	p1.firstResetTime = os.time(v5);
end;
function v2.getResetId(p3, p4)
	return tostring((math.floor((os.time() - p3.firstResetTime) / p4)));
end;
function v2.getNextResetTime(p5, p6)
	return p5.firstResetTime + p6 * math.ceil((os.time() - p5.firstResetTime) / p6);
end;
function v2.getDailyResetId(p7)
	return p7:getResetId(86400);
end;
function v2.getNextDailyResetTime(p8)
	return p8:getNextResetTime(86400);
end;
function v2.getWeeklyResetId(p9)
	return p9:getResetId(604800);
end;
function v2.getNextWeeklyResetTime(p10)
	return p10:getNextResetTime(604800);
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v2.poll(p11, p12, p13, p14)
	local v8 = u1.new();
	local u2 = true;
	local u3 = p11:getResetId(p12);
	local function u4()
		if u2 then
			local v9 = p11:getResetId(p12);
			if v9 ~= u3 then
				p14(v9);
			end;
			u3 = v9;
			task.delay(p13, u4);
		end;
	end;
	u4();
	v8:GiveTask(function()
		u2 = false;
	end);
	return v8;
end;
return {
	ResetTime = v2
};
