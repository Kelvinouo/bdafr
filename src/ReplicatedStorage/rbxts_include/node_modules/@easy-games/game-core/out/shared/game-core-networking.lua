-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__DeviceUtil__1 = v1.import(script, script.Parent, "util", "device-util").DeviceUtil;
local l__createNetworkingEvent__2 = v1.import(script, v1.getModule(script, "@flamework", "networking").out.events.createNetworkingEvent).createNetworkingEvent;
local l__t__3 = v1.import(script, v1.getModule(script, "@rbxts", "t").lib.ts).t;
local l__createNetworkingFunction__4 = v1.import(script, v1.getModule(script, "@flamework", "networking").out.functions.createNetworkingFunction).createNetworkingFunction;
return {
	GameCoreNetEvents = (function()
		if l__DeviceUtil__1.isHoarceKat() then
			return {
				client = {}, 
				server = {}
			};
		end;
		return l__createNetworkingEvent__2("@easy-games/game-core:shared/game-core-networking@getEvents.Events", {
			reportPerformanceMetrics = { l__t__3.interface({
					deviceType = l__t__3.union(l__t__3.literal("computer-windows"), l__t__3.literal("computer-other"), l__t__3.literal("mobile"), l__t__3.literal("xbox"), l__t__3.literal("unknown")), 
					fps = l__t__3.number, 
					luaGc = l__t__3.number, 
					heartbeatTime = l__t__3.number, 
					physicsStepTime = l__t__3.number, 
					totalMemory = l__t__3.number, 
					internalMemory = l__t__3.number, 
					heapMemory = l__t__3.number, 
					signalMemory = l__t__3.number, 
					instanceMemory = l__t__3.number, 
					physicsCollisionMemory = l__t__3.number, 
					physicsPartsMemory = l__t__3.number, 
					graphicsMeshPartsMemory = l__t__3.number, 
					graphicsParticlesMemory = l__t__3.number, 
					graphicsPartsMemory = l__t__3.number, 
					graphicsTextureMemory = l__t__3.number, 
					graphicsTextureCharacterMemory = l__t__3.number, 
					soundMemory = l__t__3.number, 
					guiMemory = l__t__3.number, 
					animationMemory = l__t__3.number, 
					dataReceive = l__t__3.number, 
					dataSend = l__t__3.number, 
					physicsReceive = l__t__3.number, 
					physicsSend = l__t__3.number
				}) }, 
			useAbility = { l__t__3.string, l__t__3.union(l__t__3.any, l__t__3.none) }, 
			requestCodeGenUpdate = {}
		}, {
			sendErrorNotification = { l__t__3.interface({
					onClick = l__t__3.optional(l__t__3.callback), 
					message = l__t__3.string
				}) }, 
			sendInfoNotification = { l__t__3.interface({
					onClick = l__t__3.optional(l__t__3.callback), 
					message = l__t__3.string, 
					image = l__t__3.optional(l__t__3.string)
				}) }, 
			abilityProgressUpdate = { l__t__3.string, l__t__3.number }, 
			registerAbilityProgressSource = { l__t__3.string, l__t__3.number, l__t__3.number }, 
			unregisterAbilityProgressSource = { l__t__3.string, l__t__3.number }, 
			abilityUsed = { l__t__3.instanceIsA("Model"), l__t__3.string, l__t__3.union(l__t__3.any, l__t__3.none) }, 
			announcementEvent = { l__t__3.union(l__t__3.interface({
					type = l__t__3.literal("image"), 
					message = l__t__3.string, 
					duration = l__t__3.optional(l__t__3.number), 
					themeColor = l__t__3.optional(l__t__3.Color3), 
					backgroundImage = l__t__3.string, 
					important = l__t__3.optional(l__t__3.union(l__t__3.literal(false), l__t__3.literal(true))), 
					position = l__t__3.optional(l__t__3.UDim2), 
					metadata = l__t__3.optional(l__t__3.any)
				}), l__t__3.interface({
					type = l__t__3.literal("text"), 
					message = l__t__3.string, 
					duration = l__t__3.optional(l__t__3.number), 
					themeColor = l__t__3.optional(l__t__3.Color3), 
					backgroundImage = l__t__3.optional(l__t__3.string), 
					important = l__t__3.optional(l__t__3.union(l__t__3.literal(false), l__t__3.literal(true))), 
					position = l__t__3.optional(l__t__3.UDim2), 
					metadata = l__t__3.optional(l__t__3.any), 
					textlabel = l__t__3.optional(l__t__3.interface({
						props = l__t__3.optional(l__t__3.interface({
							Position = l__t__3.optional(l__t__3.UDim2), 
							Size = l__t__3.optional(l__t__3.UDim2), 
							AnchorPoint = l__t__3.optional(l__t__3.Vector2), 
							TextColor3 = l__t__3.optional(l__t__3.Color3), 
							Font = l__t__3.optional(l__t__3.enum(Enum.Font))
						})), 
						stroke = l__t__3.optional(l__t__3.interface({
							color = l__t__3.optional(l__t__3.Color3), 
							thickness = l__t__3.optional(l__t__3.number)
						})), 
						tween = l__t__3.optional(l__t__3.interface({
							disabled = l__t__3.optional(l__t__3.union(l__t__3.literal(false), l__t__3.literal(true))), 
							tweenInPosition = l__t__3.optional(l__t__3.UDim2), 
							tweenOutPosition = l__t__3.optional(l__t__3.UDim2)
						}))
					})), 
					variant = l__t__3.optional(l__t__3.union(l__t__3.literal("textWithBG"), l__t__3.literal("bordered")))
				}), l__t__3.interface({
					type = l__t__3.literal("countdown"), 
					message = l__t__3.string, 
					duration = l__t__3.optional(l__t__3.number), 
					themeColor = l__t__3.optional(l__t__3.Color3), 
					backgroundImage = l__t__3.optional(l__t__3.string), 
					important = l__t__3.optional(l__t__3.union(l__t__3.literal(false), l__t__3.literal(true))), 
					position = l__t__3.optional(l__t__3.UDim2), 
					metadata = l__t__3.optional(l__t__3.any), 
					endTime = l__t__3.number
				})) }, 
			sendCodeGenUpdate = { l__t__3.interface({
					codeGenerators = l__t__3.map(l__t__3.string, l__t__3.interface({
						codes = l__t__3.array(l__t__3.interface({
							type = l__t__3.string, 
							code = l__t__3.string, 
							createdTime = l__t__3.number, 
							active = l__t__3.boolean, 
							timesRedeemed = l__t__3.number, 
							creator = l__t__3.optional(l__t__3.number), 
							codeGeneratorId = l__t__3.optional(l__t__3.string), 
							codeRedeemLimits = l__t__3.optional(l__t__3.interface({
								maxRedemptions = l__t__3.optional(l__t__3.number), 
								expiresAt = l__t__3.optional(l__t__3.number)
							}))
						})), 
						lastRegenTime = l__t__3.number, 
						totalCodesGenerated = l__t__3.optional(l__t__3.number), 
						timesGeneratedNewCodes = l__t__3.optional(l__t__3.number)
					}))
				}) }
		});
	end)(), 
	GameCoreNetFunctions = (function()
		if l__DeviceUtil__1.isHoarceKat() then
			return {
				client = {}, 
				server = {}
			};
		end;
		return l__createNetworkingFunction__4("@easy-games/game-core:shared/game-core-networking@getFunctions.Functions", {
			redeemCode = { { l__t__3.string }, l__t__3.interface({
					success = l__t__3.boolean, 
					errorMessage = l__t__3.optional(l__t__3.string), 
					data = l__t__3.optional(l__t__3.interface({
						codeType = l__t__3.string
					}))
				}) }, 
			regenCodeGenerator = { { l__t__3.string }, l__t__3.interface({
					success = l__t__3.boolean, 
					errorMessage = l__t__3.optional(l__t__3.string), 
					data = l__t__3.optional(l__t__3.interface({
						codes = l__t__3.array(l__t__3.interface({
							type = l__t__3.string, 
							code = l__t__3.string, 
							createdTime = l__t__3.number, 
							active = l__t__3.boolean, 
							timesRedeemed = l__t__3.number, 
							creator = l__t__3.optional(l__t__3.number), 
							codeGeneratorId = l__t__3.optional(l__t__3.string), 
							codeRedeemLimits = l__t__3.optional(l__t__3.interface({
								maxRedemptions = l__t__3.optional(l__t__3.number), 
								expiresAt = l__t__3.optional(l__t__3.number)
							}))
						}))
					}))
				}) }
		}, {});
	end)()
};
