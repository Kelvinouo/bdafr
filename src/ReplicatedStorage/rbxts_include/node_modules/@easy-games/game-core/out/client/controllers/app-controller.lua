-- Script Hash: c52ddfa34cbb1f64b270be9090e9d8f5cb6ff8cb6842a6c37045afd98be6f9ea5bd9598c1b5c4a2f549c353ea485996c
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "AppController";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
function v5.constructor(p1)

end;
local l__ContextActionService__1 = v4.ContextActionService;
local l__UILayers__2 = v1.import(script, script.Parent.Parent, "ui", "types", "ui-app").UILayers;
function v5.onInit(p2)
	l__ContextActionService__1:BindAction("GameCoreCloseUI", function(p3, p4)
		if p4 ~= Enum.UserInputState.Begin or not p2:isLayerOpen(l__UILayers__2.MAIN) then
			return Enum.ContextActionResult.Pass;
		end;
		p2:closeLayer(l__UILayers__2.MAIN);
		return Enum.ContextActionResult.Sink;
	end, false, Enum.KeyCode.F, Enum.KeyCode.E);
end;
local l__GameCoreClientConfig__3 = v1.import(script, script.Parent.Parent, "config", "game-core-config").GameCoreClientConfig;
local l__GameCoreClientSyncEvents__4 = v1.import(script, script.Parent.Parent, "game-core-client-events").GameCoreClientSyncEvents;
function v5.onStart(p5)
	l__GameCoreClientConfig__3.Store.changed:connect(function(p6, p7)
		local v7 = {};
		for v8, v9 in ipairs(p6.AppInfo.openApps) do
			v7[v9] = true;
		end;
		local v10 = {};
		for v11, v12 in ipairs(p7.AppInfo.openApps) do
			v10[v12] = true;
		end;
		for v13, v14 in ipairs(p6.AppInfo.openApps) do
			if v10[v14] == nil then
				task.spawn(function()
					l__GameCoreClientSyncEvents__4.AppOpen:fire(v14);
				end);
			end;
		end;
		for v15, v16 in ipairs(p7.AppInfo.openApps) do
			if v7[v16] == nil then
				task.spawn(function()
					l__GameCoreClientSyncEvents__4.AppClose:fire(v16);
				end);
			end;
		end;
	end);
end;
function v5.registerApp(p8, p9)
	p8.registeredApps[p9.appId] = p9;
end;
function v5.openApp(p10, p11, p12, p13, p14)
	if type(p11) ~= "string" then
		p11.layer = p13 or p11.layer;
		return p10:openAppComponent(p11, p12);
	end;
	local v17 = v5.registeredApps[p11];
	if not v17 then
		print("[Game Core (AppController)] Could not find app config for provided app ID. Was is registered?");
		return false;
	end;
	v17.layer = p13 or v17.layer;
	return p10:openAppComponent(v17, p12, p14);
end;
local l__Players__5 = v4.Players;
local u6 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local l__StoreProvider__7 = v1.import(script, v1.getModule(script, "@rbxts", "roact-rodux").src).StoreProvider;
function v5.openAppComponent(p15, p16, p17, p18)
	if p15:isAppOpen(p16.appId) then
		p15:closeAppById(p16.appId);
		return false;
	end;
	if p16.layer then
		p15:closeLayer(p16.layer);
		v5.layerMap[p16.layer] = p16.appId;
	end;
	v5.appMap[p16.appId] = p16;
	local l__AppId__18 = p17.AppId;
	if l__AppId__18 == "" or not l__AppId__18 then
		p17.AppId = p16.appId;
	end;
	local v19 = {};
	local v20 = {};
	for v21, v22 in pairs(p17) do
		v20[v21] = v22;
	end;
	v19[#v19 + 1] = u6.createElement(p16.app, v20);
	v5.treeMap[p16.appId] = u6.mount(u6.createElement(l__StoreProvider__7, {
		store = l__GameCoreClientConfig__3.Store
	}, v19), p18 or l__Players__5.LocalPlayer:WaitForChild("PlayerGui"), p16.appId);
	p15:updateAppInfoStore();
	return true;
end;
function v5.closeAppById(p19, p20)
	local v23 = v5.appMap[p20];
	if v23 then
		p19:closeApp(v23);
	end;
end;
function v5.closeApp(p21, p22)
	if type(p22) == "string" then
		return p21:closeAppById(p22);
	end;
	local v24 = v5.treeMap[p22.appId];
	if v24 then
		u6.unmount(v24);
	end;
	v5.treeMap[p22.appId] = nil;
	v5.appMap[p22.appId] = nil;
	if p22.layer then
		v5.layerMap[p22.layer] = nil;
	end;
	p21:updateAppInfoStore();
end;
function v5.closeLayer(p23, p24)
	local v25 = v5.layerMap[p24];
	if v25 == "" or not v25 then
		return nil;
	end;
	local v26 = v5.appMap[v25];
	if v26 then
		p23:closeApp(v26);
	end;
end;
function v5.isAppOpen(p25, p26)
	if type(p26) == "string" then
		return v5.appMap[p26] ~= nil;
	end;
	return v5.appMap[p26.appId] ~= nil;
end;
function v5.isLayerOpen(p27, p28)
	local v27 = v5.layerMap[p28];
	local v28 = false;
	if v27 ~= "" then
		v28 = v27;
	end;
	return not (not v28);
end;
local u8 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v5.getOpenApps(p29)
	return u8.keys(v5.appMap);
end;
function v5.updateAppInfoStore(p30)
	l__GameCoreClientConfig__3.Store:dispatch({
		type = "UpdateOpenApps", 
		openApps = p30:getOpenApps()
	});
end;
v5.registeredApps = {};
v5.treeMap = {};
v5.appMap = {};
v5.layerMap = {};
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/game-core:client/controllers/app-controller@AppController");
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart", "$:flamework@OnInit" });
l__Reflect__2.decorate(v5, "$:flamework@Controller", v3.Controller, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	AppController = v5
};
