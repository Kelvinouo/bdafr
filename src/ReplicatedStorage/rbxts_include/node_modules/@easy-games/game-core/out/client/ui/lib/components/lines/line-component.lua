-- Script Hash: 0d6dc51d10ca73ea91ca85a9dd70f934b6229bb0f95143cd4dab7dee64254a8387816caa3c50c99f1da6b96652e67d19
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
return {
	LineComponent = v1.import(script, v1.getModule(script, "@rbxts", "roact-hooks").src).new(u1)(function(p1, p2)
		local v2, v3 = p2.useState({
			position = Vector2.new(0, 0), 
			size = Vector2.new(0, 0)
		});
		local u3 = u1.createRef();
		p2.useEffect(function()
			local v4 = u2.new();
			v4:GiveTask(u3:getValue():GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
				if u3:getValue() then
					v3({
						position = u3:getValue().AbsolutePosition, 
						size = u3:getValue().AbsoluteSize
					});
				end;
			end));
			return function()
				v4:DoCleaning();
			end;
		end);
		local v5 = UDim2.new(math.min(p1.Corner1.X.Scale, p1.Corner2.X.Scale), math.min(p1.Corner1.X.Offset, p1.Corner2.X.Offset), math.min(p1.Corner1.Y.Scale, p1.Corner2.Y.Scale), math.min(p1.Corner1.Y.Offset, p1.Corner2.Y.Offset));
		local v6 = p1.Corner1 - p1.Corner2;
		local v7 = UDim2.new(math.abs(v6.X.Scale), math.abs(v6.X.Offset), math.abs(v6.Y.Scale), math.abs(v6.Y.Offset));
		local l__position__8 = v2.position;
		local l__size__9 = v2.size;
		local v10 = Vector2.new(l__position__8.X, l__position__8.Y);
		local v11 = Vector2.new(l__position__8.X + l__size__9.X, l__position__8.Y + l__size__9.Y) - l__position__8;
		local v12 = v10 - l__position__8;
		local v13 = (v11 + v12) / 2;
		local v14 = v11 - v12;
		local v15 = Vector2.new(math.ceil(v14.X), math.ceil(v14.Y));
		if v15.Y == 0 then
			local v16 = 0;
		else
			v16 = math.deg(math.atan2(v15.Y, v15.X));
		end;
		return u1.createElement("Frame", {
			Size = v7, 
			BackgroundTransparency = 1, 
			Position = v5, 
			[u1.Ref] = u3
		}, { u1.createElement("Frame", {
				BorderSizePixel = 0, 
				BackgroundColor3 = p1.Color3, 
				Transparency = p1.Transparency, 
				Position = UDim2.fromOffset(v13.X - v15.Magnitude / 2, v13.Y), 
				Rotation = v16, 
				Size = UDim2.fromOffset(v15.Magnitude, p1.WidthPixels)
			}) });
	end)
};
