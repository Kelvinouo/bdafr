
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "AbilityController";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__GameCoreSharedConfig__2 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "config", "game-core-shared-config").GameCoreSharedConfig;
local l__getAbilityMeta__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ability", "ability-meta-types").getAbilityMeta;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
function v5.constructor(p1)
	p1.enabledAbilities = {};
	p1.abilityProgressValues = {};
	local v7, v8, v9 = ipairs(u1.keys(l__GameCoreSharedConfig__2.AbilityMetatable));
	while true do
		local v10, v11 = v7(v8, v9);
		if not v10 then
			break;
		end;
		local v12 = l__getAbilityMeta__3(v11).usableProgress;
		if v12 ~= nil then
			v12 = v12.initialProgress;
		end;
		local v13 = v12;
		if v13 == nil then
			v13 = 0;
		end;
		p1.abilityProgressValues[v11] = u4("NumberValue", {
			Value = v13
		});	
	end;
end;
local l__RunService__5 = v4.RunService;
local l__Flamework__6 = v2.Flamework;
local l__GameCoreNetEvents__7 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "game-core-networking").GameCoreNetEvents;
local l__MapUtil__8 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local u9 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__Players__10 = v4.Players;
local l__GameCoreClientSyncEvents__11 = v1.import(script, script.Parent.Parent.Parent, "game-core-client-events").GameCoreClientSyncEvents;
function v5.onStart(p2)
	l__RunService__5.Heartbeat:Connect(function()
		for v14, v15 in pairs(p2.enabledAbilities) do
			if v15.abilityMeta.cooldown then
				if not l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):isOnCooldown(v15.abilityMeta.cooldown.id) then
					if v15.useAbilityMaid == nil then
						p2:addUseAbilityButton(v15);
					end;
				else
					if v15.cooldownBarMaid ~= nil then
						return nil;
					end;
					p2:addCooldownBar(v15);
				end;
			end;
		end;
	end);
	local u12 = {};
	l__GameCoreNetEvents__7.client.registerAbilityProgressSource:connect(function(p3, p4, p5)
		local v16 = u9.new();
		l__MapUtil__8.getOrCreate(u12, p3, {})[p5] = v16;
		v16:GiveTask(l__RunService__5.Heartbeat:Connect(function(p6)
			p2:addProgress(p3, p6 * p4);
		end));
	end);
	l__GameCoreNetEvents__7.client.unregisterAbilityProgressSource:connect(function(p7, p8)
		local v17 = u12[p7];
		if v17 ~= nil then
			local v18 = v17[p8];
			if v18 ~= nil then
				v18:DoCleaning();
			end;
		end;
	end);
	l__GameCoreNetEvents__7.client.abilityProgressUpdate:connect(function(p9, p10)
		p2:setProgress(p9, p10);
	end);
	l__GameCoreNetEvents__7.client.abilityUsed:connect(function(p11, p12, p13)
		local v19 = l__getAbilityMeta__3(p12).clientPredictUseAbility and p11 == l__Players__10.LocalPlayer.Character;
		if v19 then
			return nil;
		end;
		l__GameCoreClientSyncEvents__11.AbilityUsed:fire(p11, p12, p13);
	end);
end;
function v5.addProgress(p14, p15, p16)
	local v20 = p14:getProgress(p15);
	if v20 ~= nil then
		p14:setProgress(p15, v20 + p16);
	end;
end;
function v5.getProgress(p17, p18)
	local v21 = p17.abilityProgressValues[p18];
	if v21 ~= nil then
		v21 = v21.Value;
	end;
	return v21;
end;
function v5.setProgress(p19, p20, p21)
	local v22 = p19.abilityProgressValues[p20];
	if v22 then
		local v23 = l__getAbilityMeta__3(p20);
		if v23.usableProgress then
			local v24 = v23.usableProgress.stacks;
			if v24 == nil then
				v24 = 1;
			end;
			v22.Value = math.clamp(p21, 0, v23.usableProgress.progressNeededPerUse * v24);
			local v25 = p19.enabledAbilities[p20];
			if v25 then
				if v23.usableProgress.progressNeededPerUse <= v22.Value then
					if v25.useAbilityMaid == nil then
						p19:addUseAbilityButton(v25);
						return;
					end;
				elseif v25.cooldownBarMaid == nil then
					p19:addUsableProgressBar(v25);
				end;
			end;
		end;
	end;
end;
function v5.useAbility(p22, p23, p24)
	local v26 = l__getAbilityMeta__3(p23);
	l__GameCoreNetEvents__7.client.useAbility(p23, p24);
	local l__Character__27 = l__Players__10.LocalPlayer.Character;
	if v26.clientPredictUseAbility and l__Character__27 then
		l__GameCoreClientSyncEvents__11.AbilityUsed:fire(l__Character__27, p23, p24);
	end;
	if v26.cooldown then
		l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):setOnCooldown(v26.cooldown.id, v26.cooldown.duration, v26.cooldown.config);
	end;
end;
function v5.canUseAbility(p25, p26)
	local v28 = l__getAbilityMeta__3(p26);
	if v28.usableProgress then
		local v29 = p25.abilityProgressValues[p26];
		if not v29 then
			return false;
		end;
		if not p25.enabledAbilities[p26] then
			return false;
		end;
		if v29.Value < v28.usableProgress.progressNeededPerUse then
			return false;
		end;
	end;
	if v28.cooldown and l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):isOnCooldown(v28.cooldown.id) then
		return false;
	end;
	return true;
end;
local l__HttpService__13 = v4.HttpService;
local l__GameTheme__14 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
local u15 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local l__ActionButton__16 = v1.import(script, script.Parent.Parent.Parent, "ui", "lib", "components", "action-button").ActionButton;
local l__ContextActionService__17 = v4.ContextActionService;
function v5.addUseAbilityButton(p27, p28, p29)
	if not p28.triggerConfig then
		return nil;
	end;
	p28.useAbilityMaid = u9.new();
	local v30 = l__HttpService__13:GenerateGUID();
	local v31 = {
		LayoutOrder = l__GameTheme__14.abilityActionBarPriority, 
		actionName = v30
	};
	function v31.onActivated()
		task.spawn(function()
			if p29 then
				local v32 = p29();
			elseif p28.getExtraData then
				v32 = p28.getExtraData();
			else
				v32 = nil;
			end;
			p27:useAbility(p28.abilityId, v32);
		end);
	end;
	for v33, v34 in pairs(p28.triggerConfig) do
		v31[v33] = v34;
	end;
	local u18 = l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u15.createElement(l__ActionButton__16, v31));
	p28.useAbilityMaid:GiveTask(function()
		if u18 then
			u18:DoCleaning();
		end;
	end);
	p28.useAbilityMaid:GiveTask(function()
		l__ContextActionService__17:UnbindAction(v30);
	end);
	if p28.cooldownBarMaid then
		p28.cooldownBarMaid:DoCleaning();
		p28.cooldownBarMaid = nil;
	end;
end;
function v5.addCooldownBar(p30, p31)
	if not p31.abilityMeta.cooldown then
		return nil;
	end;
	p31.cooldownBarMaid = u9.new();
	local l__cooldown__35 = p31.abilityMeta.cooldown;
	p31.cooldownBarMaid:GiveTask(l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):createCooldownBar(l__cooldown__35.id));
	l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):setOnCooldown(p31.abilityMeta.cooldown.id, l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):getRemainingCooldown(l__cooldown__35.id), p31.abilityMeta.cooldown.config);
	p31.cooldownBarMaid:GiveTask(function()
		l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):removeCooldown(l__cooldown__35.id);
	end);
	if p31.useAbilityMaid then
		p31.useAbilityMaid:DoCleaning();
		p31.useAbilityMaid = nil;
	end;
end;
local l__ProgressNeededBar__19 = v1.import(script, script.Parent.Parent, "cooldown", "ui", "progress-needed-bar").ProgressNeededBar;
function v5.addUsableProgressBar(p32, p33)
	p33.cooldownBarMaid = u9.new();
	if not p33.abilityMeta.usableProgress then
		return nil;
	end;
	local v36 = p32.abilityProgressValues[p33.abilityId];
	if v36 then
		p32.abilityProgressValues[p33.abilityId] = v36;
		local v37 = {
			LayoutOrder = l__GameTheme__14.abilityActionBarPriority - 1, 
			progress = v36
		};
		local v38 = p33.abilityMeta.usableProgress.stacks;
		if v38 == nil then
			v38 = 1;
		end;
		v37.progressNeeded = p33.abilityMeta.usableProgress.progressNeededPerUse * v38;
		v37.Pills = p33.abilityMeta.usableProgress.stacks;
		v37.BarGradient = p33.abilityMeta.usableProgress.gradient;
		local u20 = l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u15.createElement(l__ProgressNeededBar__19, v37));
		p33.cooldownBarMaid:GiveTask(function()
			if u20 then
				u20:DoCleaning();
			end;
		end);
	end;
	if p33.useAbilityMaid then
		p33.useAbilityMaid:DoCleaning();
		p33.useAbilityMaid = nil;
	end;
end;
local l__default__21 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
function v5.enableAbility(p34, p35, p36)
	local v39 = l__getAbilityMeta__3(p35);
	local v40 = {
		abilityId = p35, 
		useAbilityMaid = nil, 
		cooldownBarMaid = nil, 
		actionBarName = v39.actionBarName, 
		triggerConfig = p36, 
		abilityMeta = v39
	};
	local v41 = p36;
	if v41 ~= nil then
		v41 = v41.getExtraData;
	end;
	v40.getExtraData = v41;
	p34.enabledAbilities[p35] = v40;
	if v39.cooldown then
		p34:addCooldownBar(v40);
	elseif v39.usableProgress then
		p34:addUsableProgressBar(v40);
	end;
	local v42 = {};
	function v42.Destroy()
		local v43 = p34.enabledAbilities[p35];
		if v43 == nil then
			l__default__21.Error("Ability {ability} has already been destroyed", p35);
			return nil;
		end;
		local l__cooldownBarMaid__44 = v43.cooldownBarMaid;
		if l__cooldownBarMaid__44 ~= nil then
			l__cooldownBarMaid__44:DoCleaning();
		end;
		local l__useAbilityMaid__45 = v43.useAbilityMaid;
		if l__useAbilityMaid__45 ~= nil then
			l__useAbilityMaid__45:DoCleaning();
		end;
		p34.enabledAbilities[p35] = nil;
	end;
	return v42;
end;
l__Reflect__3.defineMetadata(v5, "identifier", "@easy-games/game-core:client/controllers/ability/ability-controller@AbilityController");
l__Reflect__3.defineMetadata(v5, "flamework:isExternal", true);
l__Reflect__3.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.defineMetadata(v5, "flamework:decorators", { "$:flamework@Controller" });
l__Reflect__3.defineMetadata(v5, "flamework:decorators.$:flamework@Controller", {
	type = "Controller"
});
return {
	AbilityController = v5
};

