-- Script Hash: 6bf02642465c5a18509925911b541ae3e3ee2b6e6cdd0145ef9673f85b68b68733dec3d590c7590d5f1a90626f525057
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v6 = setmetatable({}, {
	__tostring = function()
		return "AbilityController";
	end
});
v6.__index = v6;
function v6.new(...)
	local v7 = setmetatable({}, v6);
	return v7:constructor(...) and v7;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__GameCoreSharedConfig__2 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "config", "game-core-shared-config").GameCoreSharedConfig;
local l__getAbilityMeta__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ability", "ability-meta-types").getAbilityMeta;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
function v6.constructor(p1)
	p1.enabledAbilities = {};
	p1.blockedAbilities = {};
	p1.abilityProgressValues = {};
	local v8, v9, v10 = ipairs(u1.keys(l__GameCoreSharedConfig__2.AbilityMetatable));
	while true do
		local v11, v12 = v8(v9, v10);
		if not v11 then
			break;
		end;
		local v13 = l__getAbilityMeta__3(v12).usableProgress;
		if v13 ~= nil then
			v13 = v13.initialProgress;
		end;
		local v14 = v13;
		if v14 == nil then
			v14 = 0;
		end;
		p1.abilityProgressValues[v12] = u4("NumberValue", {
			Value = v14
		});	
	end;
end;
local l__RunService__5 = v5.RunService;
local l__Flamework__6 = v2.Flamework;
local l__GameCoreNetEvents__7 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "game-core-networking").GameCoreNetEvents;
local l__MapUtil__8 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local u9 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__Players__10 = v5.Players;
local l__GameCoreClientSyncEvents__11 = v1.import(script, script.Parent.Parent.Parent, "game-core-client-events").GameCoreClientSyncEvents;
function v6.onStart(p2)
	l__RunService__5.Heartbeat:Connect(function()
		local v15, v16, v17 = pairs(p2.enabledAbilities);
		while true do
			local v18 = nil;
			local v19 = nil;
			local v20 = nil;
			local v21 = nil;
			local v22 = nil;
			local v23 = nil;
			local v24 = nil;
			local v25 = nil;
			local v26 = nil;
			local v27 = nil;
			local v28 = nil;
			local v29 = nil;
			local v30, v31 = v15(v16, v17);
			if not v30 then
				break;
			end;
			v17 = v30;
			if v31.abilityMeta.cooldown then
				if not l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):isOnCooldown(v31.abilityMeta.cooldown.id) then
					if v31.useAbilityMaid == nil then
						p2:addUseAbilityButton(v31);
						v19 = p2;
						v18 = v30;
						v25 = v18;
						v21 = "isAbilityBlocked";
						v20 = v19;
						v24 = v20;
						v22 = v19;
						v23 = v21;
						local v32 = v22[v23];
						v26 = v32;
						v27 = v24;
						v28 = v25;
						local v33 = v26(v27, v28);
						v29 = v33;
						if v29 then
							p2:addBlockedNotifier(v30);
						else
							p2:removeBlockedNotifier(v30);
						end;
					end;
				else
					if v31.cooldownBarMaid ~= nil then
						return nil;
					end;
					p2:addCooldownBar(v31);
					v19 = p2;
					v18 = v30;
					v25 = v18;
					v21 = "isAbilityBlocked";
					v20 = v19;
					v24 = v20;
					v22 = v19;
					v23 = v21;
					v32 = v22[v23];
					v26 = v32;
					v27 = v24;
					v28 = v25;
					v33 = v26(v27, v28);
					v29 = v33;
					if v29 then
						p2:addBlockedNotifier(v30);
					else
						p2:removeBlockedNotifier(v30);
					end;
				end;
			else
				v19 = p2;
				v18 = v30;
				v25 = v18;
				v21 = "isAbilityBlocked";
				v20 = v19;
				v24 = v20;
				v22 = v19;
				v23 = v21;
				v32 = v22[v23];
				v26 = v32;
				v27 = v24;
				v28 = v25;
				v33 = v26(v27, v28);
				v29 = v33;
				if v29 then
					p2:addBlockedNotifier(v30);
				else
					p2:removeBlockedNotifier(v30);
				end;
			end;		
		end;
	end);
	local u12 = {};
	l__GameCoreNetEvents__7.client.registerAbilityProgressSource:connect(function(p3, p4, p5)
		local v34 = u9.new();
		l__MapUtil__8.getOrCreate(u12, p3, {})[p5] = v34;
		v34:GiveTask(l__RunService__5.Heartbeat:Connect(function(p6)
			p2:addProgress(p3, p6 * p4);
		end));
	end);
	l__GameCoreNetEvents__7.client.unregisterAbilityProgressSource:connect(function(p7, p8)
		local v35 = u12[p7];
		if v35 ~= nil then
			local v36 = v35[p8];
			if v36 ~= nil then
				v36:DoCleaning();
			end;
		end;
	end);
	l__GameCoreNetEvents__7.client.abilityProgressUpdate:connect(function(p9, p10)
		p2:setProgress(p9, p10);
	end);
	l__GameCoreNetEvents__7.client.abilityUsed:connect(function(p11, p12, p13)
		if l__getAbilityMeta__3(p12).clientPredictUseAbility and p11 == l__Players__10.LocalPlayer.Character then
			return nil;
		end;
		l__GameCoreClientSyncEvents__11.AbilityUsed:fire(p11, p12, p13);
	end);
end;
function v6.addProgress(p14, p15, p16)
	local v37 = p14:getProgress(p15);
	if v37 ~= nil then
		p14:setProgress(p15, v37 + p16);
	end;
end;
function v6.getProgress(p17, p18)
	local v38 = p17.abilityProgressValues[p18];
	if v38 ~= nil then
		v38 = v38.Value;
	end;
	return v38;
end;
function v6.setProgress(p19, p20, p21)
	local v39 = p19.abilityProgressValues[p20];
	if v39 then
		local v40 = l__getAbilityMeta__3(p20);
		if v40.usableProgress then
			local v41 = v40.usableProgress.stacks;
			if v41 == nil then
				v41 = 1;
			end;
			v39.Value = math.clamp(p21, 0, v40.usableProgress.progressNeededPerUse * v41);
			local v42 = p19.enabledAbilities[p20];
			if v42 then
				if v40.usableProgress.progressNeededPerUse <= v39.Value then
					if v42.useAbilityMaid == nil then
						p19:addUseAbilityButton(v42);
						return;
					end;
				elseif v42.cooldownBarMaid == nil then
					p19:addUsableProgressBar(v42);
				end;
			end;
		end;
	end;
end;
function v6.useAbility(p22, p23, p24)
	if not p22:canUseAbility(p23) then
		return nil;
	end;
	local v43 = l__getAbilityMeta__3(p23);
	l__GameCoreNetEvents__7.client.useAbility(p23, p24);
	local l__Character__44 = l__Players__10.LocalPlayer.Character;
	if v43.clientPredictUseAbility and l__Character__44 then
		l__GameCoreClientSyncEvents__11.AbilityUsed:fire(l__Character__44, p23, p24);
	end;
	if v43.cooldown then
		l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):setOnCooldown(v43.cooldown.id, v43.cooldown.duration, v43.cooldown.config);
	end;
end;
local l__SoundManager__13 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "sound", "sound-manager").SoundManager;
local l__GameTheme__14 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
function v6.canUseAbility(p25, p26, p27)
	if p25:isAbilityBlocked(p26) then
		local v45 = p27;
		if v45 ~= nil then
			v45 = v45.disableBlockedAbilityAlert;
		end;
		if v45 ~= true then
			l__SoundManager__13:playSound(l__GameTheme__14.sound.uiDisabled);
		end;
		return false;
	end;
	local v46 = l__getAbilityMeta__3(p26);
	if v46.usableProgress then
		local v47 = p25.abilityProgressValues[p26];
		if not v47 then
			return false;
		end;
		if not p25.enabledAbilities[p26] then
			return false;
		end;
		if v47.Value < v46.usableProgress.progressNeededPerUse then
			return false;
		end;
	end;
	if v46.cooldown and l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):isOnCooldown(v46.cooldown.id) then
		return false;
	end;
	local l__Character__48 = l__Players__10.LocalPlayer.Character;
	if not l__Character__48 then
		return false;
	end;
	if l__GameCoreClientSyncEvents__11.CanUseLocalAbility:fire(l__Character__48, p26):isCancelled() then
		return false;
	end;
	return true;
end;
local l__HttpService__15 = v5.HttpService;
local u16 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local l__ActionButton__17 = v1.import(script, script.Parent.Parent.Parent, "ui", "lib", "components", "action-button").ActionButton;
local l__ContextActionService__18 = v5.ContextActionService;
function v6.addUseAbilityButton(p28, p29, p30)
	if not p29.triggerConfig then
		return nil;
	end;
	p29.useAbilityMaid = u9.new();
	local v49 = l__HttpService__15:GenerateGUID();
	local v50 = {
		LayoutOrder = l__GameTheme__14.abilityActionBarPriority, 
		actionName = v49
	};
	function v50.onActivated()
		task.spawn(function()
			if p30 then
				local v51 = p30();
			elseif p29.getExtraData then
				v51 = p29.getExtraData();
			else
				v51 = nil;
			end;
			p28:useAbility(p29.abilityId, v51);
		end);
	end;
	for v52, v53 in pairs(p29.triggerConfig) do
		v50[v52] = v53;
	end;
	local u19 = l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u16.createElement(l__ActionButton__17, v50));
	p29.useAbilityMaid:GiveTask(function()
		if u19 then
			u19:DoCleaning();
		end;
	end);
	p29.useAbilityMaid:GiveTask(function()
		l__ContextActionService__18:UnbindAction(v49);
	end);
	if p29.cooldownBarMaid then
		p29.cooldownBarMaid:DoCleaning();
		p29.cooldownBarMaid = nil;
	end;
end;
local l__AbilityDisabled__20 = v1.import(script, script.Parent, "ui", "ability-disabled").AbilityDisabled;
function v6.addBlockedNotifier(p31, p32)
	local v54 = p31.blockedAbilities[p32];
	if not v54 then
		return nil;
	end;
	if v54.actionBarMaid then
		return nil;
	end;
	v54.actionBarMaid = u9.new();
	v54.actionBarMaid:GiveTask(l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u16.createElement(l__AbilityDisabled__20)));
	v54.actionBarMaid:GiveTask(function()
		v54.actionBarMaid = nil;
	end);
end;
function v6.removeBlockedNotifier(p33, p34)
	local v55 = p33.blockedAbilities[p34];
	if v55 ~= nil then
		local l__actionBarMaid__56 = v55.actionBarMaid;
		if l__actionBarMaid__56 ~= nil then
			l__actionBarMaid__56:DoCleaning();
		end;
	end;
end;
function v6.addCooldownBar(p35, p36)
	if not p36.abilityMeta.cooldown then
		return nil;
	end;
	p36.cooldownBarMaid = u9.new();
	local l__cooldown__57 = p36.abilityMeta.cooldown;
	p36.cooldownBarMaid:GiveTask(l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):createCooldownBar(l__cooldown__57.id));
	l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):setOnCooldown(p36.abilityMeta.cooldown.id, l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):getRemainingCooldown(l__cooldown__57.id), p36.abilityMeta.cooldown.config);
	if p36.useAbilityMaid then
		p36.useAbilityMaid:DoCleaning();
		p36.useAbilityMaid = nil;
	end;
end;
local l__ProgressNeededBar__21 = v1.import(script, script.Parent.Parent, "cooldown", "ui", "progress-needed-bar").ProgressNeededBar;
function v6.addUsableProgressBar(p37, p38)
	p38.cooldownBarMaid = u9.new();
	if not p38.abilityMeta.usableProgress then
		return nil;
	end;
	local v58 = p37.abilityProgressValues[p38.abilityId];
	if v58 then
		p37.abilityProgressValues[p38.abilityId] = v58;
		local v59 = {
			LayoutOrder = l__GameTheme__14.abilityActionBarPriority - 1, 
			progress = v58
		};
		local v60 = p38.abilityMeta.usableProgress.stacks;
		if v60 == nil then
			v60 = 1;
		end;
		v59.progressNeeded = p38.abilityMeta.usableProgress.progressNeededPerUse * v60;
		v59.Pills = p38.abilityMeta.usableProgress.stacks;
		v59.BarGradient = p38.abilityMeta.usableProgress.gradient;
		local u22 = l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u16.createElement(l__ProgressNeededBar__21, v59));
		p38.cooldownBarMaid:GiveTask(function()
			if u22 then
				u22:DoCleaning();
			end;
		end);
	end;
	if p38.useAbilityMaid then
		p38.useAbilityMaid:DoCleaning();
		p38.useAbilityMaid = nil;
	end;
end;
function v6.blockAbility(p39, p40, p41)
	local v61 = p41;
	if v61 == nil then
		v61 = l__HttpService__15:GenerateGUID();
	end;
	table.insert(l__MapUtil__8.getOrCreate(p39.blockedAbilities, p40, {
		blockerIds = {}
	}).blockerIds, v61);
	local v62 = u9.new();
	v62:GiveTask(function()
		p39:unblockAbility(p40, v61);
	end);
	return v62;
end;
function v6.unblockAbility(p42, p43, p44)
	local v63 = l__MapUtil__8.getOrCreate(p42.blockedAbilities, p43, {
		blockerIds = {}
	});
	local v64 = (table.find(v63.blockerIds, p44) and 0) - 1;
	if v64 >= 0 then
		table.remove(v63.blockerIds, v64 + 1);
	end;
	if #v63.blockerIds == 0 then
		local l__actionBarMaid__65 = v63.actionBarMaid;
		if l__actionBarMaid__65 ~= nil then
			l__actionBarMaid__65:DoCleaning();
		end;
	end;
end;
function v6.isAbilityBlocked(p45, p46)
	local v66 = p45.blockedAbilities[p46];
	if v66 ~= nil then
		v66 = v66.blockerIds;
	end;
	local v67 = v66;
	if v67 == nil then
		v67 = {};
	end;
	return #v67 > 0;
end;
local l__default__23 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
function v6.enableAbility(p47, p48, p49)
	local v68 = l__getAbilityMeta__3(p48);
	local v69 = {
		abilityId = p48, 
		useAbilityMaid = nil, 
		cooldownBarMaid = nil, 
		actionBarName = v68.actionBarName, 
		triggerConfig = p49, 
		abilityMeta = v68
	};
	local v70 = p49;
	if v70 ~= nil then
		v70 = v70.getExtraData;
	end;
	v69.getExtraData = v70;
	p47.enabledAbilities[p48] = v69;
	if v68.cooldown then
		p47:addCooldownBar(v69);
	elseif v68.usableProgress then
		p47:addUsableProgressBar(v69);
	end;
	local v71 = {};
	function v71.Destroy()
		local v72 = p47.enabledAbilities[p48];
		if v72 == nil then
			l__default__23.Error("Ability {ability} has already been destroyed", p48);
			return nil;
		end;
		local l__cooldownBarMaid__73 = v72.cooldownBarMaid;
		if l__cooldownBarMaid__73 ~= nil then
			l__cooldownBarMaid__73:DoCleaning();
		end;
		local l__useAbilityMaid__74 = v72.useAbilityMaid;
		if l__useAbilityMaid__74 ~= nil then
			l__useAbilityMaid__74:DoCleaning();
		end;
		local v75 = p47.blockedAbilities[p48];
		if v75 ~= nil then
			local l__actionBarMaid__76 = v75.actionBarMaid;
			if l__actionBarMaid__76 ~= nil then
				l__actionBarMaid__76:DoCleaning();
			end;
		end;
		p47.enabledAbilities[p48] = nil;
	end;
	return v71;
end;
l__Reflect__3.defineMetadata(v6, "identifier", "@easy-games/game-core:client/controllers/ability/ability-controller@AbilityController");
l__Reflect__3.defineMetadata(v6, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.decorate(v6, "$:flamework@Controller", v4.Controller, { {} });
l__Reflect__3.decorate(v6, "$:flamework@External", v4.External, {});
return {
	AbilityController = v6
};
