-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v6 = setmetatable({}, {
	__tostring = function()
		return "AbilityController";
	end
});
v6.__index = v6;
function v6.new(...)
	local v7 = setmetatable({}, v6);
	return v7:constructor(...) and v7;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__GameCoreSharedConfig__2 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "config", "game-core-shared-config").GameCoreSharedConfig;
local l__getAbilityMeta__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ability", "ability-meta-types").getAbilityMeta;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
function v6.constructor(p1)
	p1.enabledAbilities = {};
	p1.blockedAbilities = {};
	p1.abilityProgressValues = {};
	local v8, v9, v10 = ipairs(u1.keys(l__GameCoreSharedConfig__2.AbilityMetatable));
	while true do
		v8(v9, v10);
		if not v8 then
			break;
		end;
		local v11 = l__getAbilityMeta__3(v9).usableProgress;
		if v11 ~= nil then
			v11 = v11.initialProgress;
		end;
		local v12 = v11;
		if v12 == nil then
			v12 = 0;
		end;
		p1.abilityProgressValues[v9] = u4("NumberValue", {
			Value = v12
		});	
	end;
end;
local l__RunService__5 = v5.RunService;
local l__Flamework__6 = v2.Flamework;
local l__GameCoreNetEvents__7 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "game-core-networking").GameCoreNetEvents;
local l__MapUtil__8 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local u9 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__Players__10 = v5.Players;
local l__GameCoreClientSyncEvents__11 = v1.import(script, script.Parent.Parent.Parent, "game-core-client-events").GameCoreClientSyncEvents;
function v6.onStart(p2)
	l__RunService__5.Heartbeat:Connect(function()
		local v13, v14, v15 = pairs(p2.enabledAbilities);
		while true do
			local v16 = nil;
			local v17 = nil;
			local v18 = nil;
			local v19 = nil;
			local v20 = nil;
			local v21 = nil;
			local v22 = nil;
			local v23 = nil;
			local v24 = nil;
			local v25 = nil;
			local v26 = nil;
			local v27 = nil;
			local v28, v29 = v13(v14, v15);
			if not v28 then
				break;
			end;
			v15 = v28;
			if v29.abilityMeta.cooldown then
				if not l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):isOnCooldown(v29.abilityMeta.cooldown.id) then
					if v29.useAbilityMaid == nil then
						p2:addUseAbilityButton(v29);
						v17 = p2;
						v16 = v28;
						v23 = v16;
						v19 = "isAbilityBlocked";
						v18 = v17;
						v22 = v18;
						v20 = v17;
						v21 = v19;
						local v30 = v20[v21];
						v24 = v30;
						v25 = v22;
						v26 = v23;
						local v31 = v24(v25, v26);
						v27 = v31;
						if v27 then
							p2:addBlockedNotifier(v28);
						else
							p2:removeBlockedNotifier(v28);
						end;
					end;
				else
					if v29.cooldownBarMaid ~= nil then
						return nil;
					end;
					p2:addCooldownBar(v29);
					v17 = p2;
					v16 = v28;
					v23 = v16;
					v19 = "isAbilityBlocked";
					v18 = v17;
					v22 = v18;
					v20 = v17;
					v21 = v19;
					v30 = v20[v21];
					v24 = v30;
					v25 = v22;
					v26 = v23;
					v31 = v24(v25, v26);
					v27 = v31;
					if v27 then
						p2:addBlockedNotifier(v28);
					else
						p2:removeBlockedNotifier(v28);
					end;
				end;
			else
				v17 = p2;
				v16 = v28;
				v23 = v16;
				v19 = "isAbilityBlocked";
				v18 = v17;
				v22 = v18;
				v20 = v17;
				v21 = v19;
				v30 = v20[v21];
				v24 = v30;
				v25 = v22;
				v26 = v23;
				v31 = v24(v25, v26);
				v27 = v31;
				if v27 then
					p2:addBlockedNotifier(v28);
				else
					p2:removeBlockedNotifier(v28);
				end;
			end;		
		end;
	end);
	local u12 = {};
	l__GameCoreNetEvents__7.client.registerAbilityProgressSource:connect(function(p3, p4, p5)
		local v32 = u9.new();
		l__MapUtil__8.getOrCreate(u12, p3, {})[p5] = v32;
		v32:GiveTask(l__RunService__5.Heartbeat:Connect(function(p6)
			p2:addProgress(p3, p6 * p4);
		end));
	end);
	l__GameCoreNetEvents__7.client.unregisterAbilityProgressSource:connect(function(p7, p8)
		local v33 = u12[p7];
		if v33 ~= nil then
			local v34 = v33[p8];
			if v34 ~= nil then
				v34:DoCleaning();
			end;
		end;
	end);
	l__GameCoreNetEvents__7.client.abilityProgressUpdate:connect(function(p9, p10)
		p2:setProgress(p9, p10);
	end);
	l__GameCoreNetEvents__7.client.abilityUsed:connect(function(p11, p12, p13)
		if l__getAbilityMeta__3(p12).clientPredictUseAbility and p11 == l__Players__10.LocalPlayer.Character then
			return nil;
		end;
		l__GameCoreClientSyncEvents__11.AbilityUsed:fire(p11, p12, p13);
	end);
end;
function v6.addProgress(p14, p15, p16)
	local v35 = p14:getProgress(p15);
	if v35 ~= nil then
		p14:setProgress(p15, v35 + p16);
	end;
end;
function v6.getProgress(p17, p18)
	local v36 = p17.abilityProgressValues[p18];
	if v36 ~= nil then
		v36 = v36.Value;
	end;
	return v36;
end;
function v6.setProgress(p19, p20, p21)
	local v37 = p19.abilityProgressValues[p20];
	if v37 then
		local v38 = l__getAbilityMeta__3(p20);
		if v38.usableProgress then
			local v39 = v38.usableProgress.stacks;
			if v39 == nil then
				v39 = 1;
			end;
			v37.Value = math.clamp(p21, 0, v38.usableProgress.progressNeededPerUse * v39);
			local v40 = p19.enabledAbilities[p20];
			if v40 then
				if v38.usableProgress.progressNeededPerUse <= v37.Value then
					if v40.useAbilityMaid == nil then
						p19:addUseAbilityButton(v40);
						return;
					end;
				elseif v40.cooldownBarMaid == nil then
					p19:addUsableProgressBar(v40);
				end;
			end;
		end;
	end;
end;
function v6.useAbility(p22, p23, p24)
	if not p22:canUseAbility(p23) then
		return nil;
	end;
	local v41 = l__getAbilityMeta__3(p23);
	l__GameCoreNetEvents__7.client.useAbility(p23, p24);
	local l__Character__42 = l__Players__10.LocalPlayer.Character;
	if v41.clientPredictUseAbility and l__Character__42 then
		l__GameCoreClientSyncEvents__11.AbilityUsed:fire(l__Character__42, p23, p24);
	end;
	if v41.cooldown then
		l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):setOnCooldown(v41.cooldown.id, v41.cooldown.duration, v41.cooldown.config);
	end;
end;
local l__SoundManager__13 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "sound", "sound-manager").SoundManager;
local l__GameTheme__14 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
function v6.canUseAbility(p25, p26, p27)
	if p25:isAbilityBlocked(p26) then
		local v43 = p27;
		if v43 ~= nil then
			v43 = v43.disableBlockedAbilityAlert;
		end;
		if v43 ~= true then
			l__SoundManager__13:playSound(l__GameTheme__14.sound.uiDisabled);
		end;
		return false;
	end;
	local v44 = l__getAbilityMeta__3(p26);
	if v44.usableProgress then
		local v45 = p25.abilityProgressValues[p26];
		if not v45 then
			return false;
		end;
		if not p25.enabledAbilities[p26] then
			return false;
		end;
		if v45.Value < v44.usableProgress.progressNeededPerUse then
			return false;
		end;
	end;
	if v44.cooldown and l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):isOnCooldown(v44.cooldown.id) then
		return false;
	end;
	local l__Character__46 = l__Players__10.LocalPlayer.Character;
	if not l__Character__46 then
		return false;
	end;
	if l__GameCoreClientSyncEvents__11.CanUseLocalAbility:fire(l__Character__46, p26):isCancelled() then
		return false;
	end;
	return true;
end;
local l__HttpService__15 = v5.HttpService;
local u16 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local l__ActionButton__17 = v1.import(script, script.Parent.Parent.Parent, "ui", "lib", "components", "action-button").ActionButton;
local l__ContextActionService__18 = v5.ContextActionService;
function v6.addUseAbilityButton(p28, p29, p30)
	if not p29.triggerConfig then
		return nil;
	end;
	p29.useAbilityMaid = u9.new();
	local v47 = l__HttpService__15:GenerateGUID();
	local v48 = {
		LayoutOrder = l__GameTheme__14.abilityActionBarPriority, 
		actionName = v47
	};
	function v48.onActivated()
		task.spawn(function()
			if p30 then
				local v49 = p30();
			elseif p29.getExtraData then
				v49 = p29.getExtraData();
			else
				v49 = nil;
			end;
			p28:useAbility(p29.abilityId, v49);
		end);
	end;
	for v50, v51 in pairs(p29.triggerConfig) do
		v48[v50] = v51;
	end;
	local u19 = l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u16.createElement(l__ActionButton__17, v48));
	p29.useAbilityMaid:GiveTask(function()
		if u19 then
			u19:DoCleaning();
		end;
	end);
	p29.useAbilityMaid:GiveTask(function()
		l__ContextActionService__18:UnbindAction(v47);
	end);
	if p29.cooldownBarMaid then
		p29.cooldownBarMaid:DoCleaning();
		p29.cooldownBarMaid = nil;
	end;
end;
local l__AbilityDisabled__20 = v1.import(script, script.Parent, "ui", "ability-disabled").AbilityDisabled;
function v6.addBlockedNotifier(p31, p32)
	local v52 = p31.blockedAbilities[p32];
	if not v52 then
		return nil;
	end;
	if v52.actionBarMaid then
		return nil;
	end;
	v52.actionBarMaid = u9.new();
	v52.actionBarMaid:GiveTask(l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u16.createElement(l__AbilityDisabled__20)));
	v52.actionBarMaid:GiveTask(function()
		v52.actionBarMaid = nil;
	end);
end;
function v6.removeBlockedNotifier(p33, p34)
	local v53 = p33.blockedAbilities[p34];
	if v53 ~= nil then
		local l__actionBarMaid__54 = v53.actionBarMaid;
		if l__actionBarMaid__54 ~= nil then
			l__actionBarMaid__54:DoCleaning();
		end;
	end;
end;
function v6.addCooldownBar(p35, p36)
	if not p36.abilityMeta.cooldown then
		return nil;
	end;
	p36.cooldownBarMaid = u9.new();
	local l__cooldown__55 = p36.abilityMeta.cooldown;
	p36.cooldownBarMaid:GiveTask(l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):createCooldownBar(l__cooldown__55.id));
	l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):setOnCooldown(p36.abilityMeta.cooldown.id, l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController"):getRemainingCooldown(l__cooldown__55.id), p36.abilityMeta.cooldown.config);
	if p36.useAbilityMaid then
		p36.useAbilityMaid:DoCleaning();
		p36.useAbilityMaid = nil;
	end;
end;
local l__ProgressNeededBar__21 = v1.import(script, script.Parent.Parent, "cooldown", "ui", "progress-needed-bar").ProgressNeededBar;
function v6.addUsableProgressBar(p37, p38)
	p38.cooldownBarMaid = u9.new();
	if not p38.abilityMeta.usableProgress then
		return nil;
	end;
	local v56 = p37.abilityProgressValues[p38.abilityId];
	if v56 then
		p37.abilityProgressValues[p38.abilityId] = v56;
		local v57 = {
			LayoutOrder = l__GameTheme__14.abilityActionBarPriority - 1, 
			progress = v56
		};
		local v58 = p38.abilityMeta.usableProgress.stacks;
		if v58 == nil then
			v58 = 1;
		end;
		v57.progressNeeded = p38.abilityMeta.usableProgress.progressNeededPerUse * v58;
		v57.Pills = p38.abilityMeta.usableProgress.stacks;
		v57.BarGradient = p38.abilityMeta.usableProgress.gradient;
		local u22 = l__Flamework__6.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u16.createElement(l__ProgressNeededBar__21, v57));
		p38.cooldownBarMaid:GiveTask(function()
			if u22 then
				u22:DoCleaning();
			end;
		end);
	end;
	if p38.useAbilityMaid then
		p38.useAbilityMaid:DoCleaning();
		p38.useAbilityMaid = nil;
	end;
end;
function v6.blockAbility(p39, p40, p41)
	local v59 = p41;
	if v59 == nil then
		v59 = l__HttpService__15:GenerateGUID();
	end;
	table.insert(l__MapUtil__8.getOrCreate(p39.blockedAbilities, p40, {
		blockerIds = {}
	}).blockerIds, v59);
	local v60 = u9.new();
	v60:GiveTask(function()
		p39:unblockAbility(p40, v59);
	end);
	return v60;
end;
function v6.unblockAbility(p42, p43, p44)
	local v61 = l__MapUtil__8.getOrCreate(p42.blockedAbilities, p43, {
		blockerIds = {}
	});
	local v62 = (table.find(v61.blockerIds, p44) and 0) - 1;
	if v62 >= 0 then
		table.remove(v61.blockerIds, v62 + 1);
	end;
	if #v61.blockerIds == 0 then
		local l__actionBarMaid__63 = v61.actionBarMaid;
		if l__actionBarMaid__63 ~= nil then
			l__actionBarMaid__63:DoCleaning();
		end;
	end;
end;
function v6.isAbilityBlocked(p45, p46)
	local v64 = p45.blockedAbilities[p46];
	if v64 ~= nil then
		v64 = v64.blockerIds;
	end;
	local v65 = v64;
	if v65 == nil then
		v65 = {};
	end;
	return #v65 > 0;
end;
local l__default__23 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
function v6.enableAbility(p47, p48, p49)
	local v66 = l__getAbilityMeta__3(p48);
	local v67 = {
		abilityId = p48, 
		useAbilityMaid = nil, 
		cooldownBarMaid = nil, 
		actionBarName = v66.actionBarName, 
		triggerConfig = p49, 
		abilityMeta = v66
	};
	local v68 = p49;
	if v68 ~= nil then
		v68 = v68.getExtraData;
	end;
	v67.getExtraData = v68;
	p47.enabledAbilities[p48] = v67;
	if v66.cooldown then
		p47:addCooldownBar(v67);
	elseif v66.usableProgress then
		p47:addUsableProgressBar(v67);
	end;
	local v69 = {};
	function v69.Destroy()
		local v70 = p47.enabledAbilities[p48];
		if v70 == nil then
			l__default__23.Error("Ability {ability} has already been destroyed", p48);
			return nil;
		end;
		local l__cooldownBarMaid__71 = v70.cooldownBarMaid;
		if l__cooldownBarMaid__71 ~= nil then
			l__cooldownBarMaid__71:DoCleaning();
		end;
		local l__useAbilityMaid__72 = v70.useAbilityMaid;
		if l__useAbilityMaid__72 ~= nil then
			l__useAbilityMaid__72:DoCleaning();
		end;
		local v73 = p47.blockedAbilities[p48];
		if v73 ~= nil then
			local l__actionBarMaid__74 = v73.actionBarMaid;
			if l__actionBarMaid__74 ~= nil then
				l__actionBarMaid__74:DoCleaning();
			end;
		end;
		p47.enabledAbilities[p48] = nil;
	end;
	return v69;
end;
l__Reflect__3.defineMetadata(v6, "identifier", "@easy-games/game-core:client/controllers/ability/ability-controller@AbilityController");
l__Reflect__3.defineMetadata(v6, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.decorate(v6, "$:flamework@Controller", v4.Controller, { {} });
l__Reflect__3.decorate(v6, "$:flamework@External", v4.External, {});
return {
	AbilityController = v6
};
