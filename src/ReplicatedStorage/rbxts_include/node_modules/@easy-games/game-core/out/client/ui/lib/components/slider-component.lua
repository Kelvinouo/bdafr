-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "flipper").src);
local l__GameTheme__3 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v4 = u1.Component:extend("SliderComponent");
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__SingleMotor__3 = v2.SingleMotor;
function v4.init(p1, p2)
	p1._maid = u2.new();
	p1.SliderContainerRef = u1.createRef();
	p1.MouseDown = false;
	if p2.InitialValue ~= nil then
		local v5 = p1:valueToPosition(p2.InitialValue);
	else
		v5 = p2.InitialPosition;
	end;
	p1.LastValue = v5;
	if p2.InitialValue ~= nil then
		local v6 = p1:valueToPosition(p2.InitialValue);
	else
		v6 = p2.InitialPosition;
	end;
	local v7, v8 = u1.createBinding(v6);
	local v9 = l__SingleMotor__3.new(v7:getValue());
	v9:onStep(v8);
	p1._maid:GiveTask(function()
		return v9:destroy();
	end);
	p1.ProgressBinding = v7;
	p1.ProgressMotor = v9;
end;
function v4.valueToPosition(p3, p4)
	return (p4 - p3.props.Min) / (p3.props.Max - p3.props.Min);
end;
local l__UserInputService__4 = v1.import(script, v1.getModule(script, "@rbxts", "services")).UserInputService;
function v4.GetSliderBounds(p5)
	local v10 = p5.SliderContainerRef:getValue();
	if not v10 then
		error("Slider ref undefined, how?");
	end;
	local l__AbsolutePosition__11 = v10.AbsolutePosition;
	local l__AbsoluteSize__12 = v10.AbsoluteSize;
	if l__UserInputService__4.TouchEnabled then
		local v13 = 1.3;
	else
		v13 = 1;
	end;
	local v14 = l__AbsoluteSize__12.Y * v13;
	return { Vector2.new(l__AbsolutePosition__11.X, l__AbsolutePosition__11.Y - v14), Vector2.new(l__AbsolutePosition__11.X + l__AbsoluteSize__12.X + 0.00014, l__AbsolutePosition__11.Y + v14) };
end;
function v4.IsInputInBounds(p6, p7, p8)
	if p8 == nil then
		p8 = false;
	end;
	local v15 = p6:GetSliderBounds();
	if v15[2].Y < p7.Y or p7.Y < v15[1].Y then
		return nil;
	end;
	if not p8 or not (v15[2].X < p7.X) and not (p7.X < v15[1].X) then
		return v15;
	end;
	return nil;
end;
local l__Spring__5 = v2.Spring;
local l__SoundManager__6 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "sound", "sound-manager").SoundManager;
function v4.UpdateSliderPosition(p9, p10)
	local v16 = p9.SliderContainerRef:getValue();
	if not v16 then
		error("Slider ref undefined, how?");
	end;
	local v17 = p9:GetSliderBounds();
	local v18 = (math.clamp(p10.X, v17[1].X, v17[2].X) - v16.AbsolutePosition.X) / v16.AbsoluteSize.X * (p9.props.Max - p9.props.Min) + p9.props.Min;
	local v19 = v18 - v18 % p9.props.StepSize;
	if p9.LastValue ~= v19 then
		p9.ProgressMotor:setGoal(l__Spring__5.new(p9:valueToPosition(v19), {
			frequency = 5, 
			dampingRatio = 1
		}));
		if p9.props.OnChange then
			p9.props.OnChange(v19);
		end;
		l__SoundManager__6:playSound("rbxassetid://4820442534", {
			volumeMultiplier = 0.05
		});
	end;
	p9.LastValue = v19;
end;
function v4.didMount(p11)
	p11._maid:GiveTask(l__UserInputService__4.InputBegan:Connect(function(p12)
		if p12.UserInputType ~= Enum.UserInputType.MouseButton1 then
			return nil;
		end;
		if not p11:IsInputInBounds(p12.Position, true) then
			return nil;
		end;
		p11.MouseDown = true;
		p11:UpdateSliderPosition(p12.Position);
	end));
	p11._maid:GiveTask(l__UserInputService__4.InputEnded:Connect(function(p13)
		if p13.UserInputType ~= Enum.UserInputType.MouseButton1 then
			return nil;
		end;
		if p11.MouseDown then
			local l__OnInputEnd__20 = p11.props.OnInputEnd;
			if l__OnInputEnd__20 ~= nil then
				l__OnInputEnd__20(p11.LastValue);
			end;
		end;
		p11.MouseDown = false;
	end));
	p11._maid:GiveTask(l__UserInputService__4.InputChanged:Connect(function(p14)
		if not p11.MouseDown then
			return nil;
		end;
		if p14.UserInputType ~= Enum.UserInputType.MouseMovement then
			return nil;
		end;
		p11:UpdateSliderPosition(p14.Position);
	end));
	p11._maid:GiveTask(l__UserInputService__4.TouchStarted:Connect(function(p15)
		if not p11:IsInputInBounds(p15.Position) then
			return nil;
		end;
		p11.MouseDown = true;
		p11:UpdateSliderPosition(p15.Position);
	end));
	p11._maid:GiveTask(l__UserInputService__4.TouchEnded:Connect(function(p16)
		if p11.MouseDown then
			local l__OnInputEnd__21 = p11.props.OnInputEnd;
			if l__OnInputEnd__21 ~= nil then
				l__OnInputEnd__21(p11.LastValue);
			end;
		end;
		p11.MouseDown = false;
	end));
	p11._maid:GiveTask(l__UserInputService__4.TouchMoved:Connect(function(p17)
		if not p11.MouseDown then
			return nil;
		end;
		p11:UpdateSliderPosition(p17.Position);
	end));
end;
local function u7(p18)
	return u1.createElement("ImageLabel", {
		AnchorPoint = Vector2.new(0.5, 0.5), 
		Position = p18.Position, 
		Size = UDim2.fromScale(p18.Size, p18.Size), 
		BackgroundTransparency = 1, 
		Image = "rbxassetid://10051535366", 
		ImageColor3 = p18.Color3, 
		ScaleType = "Fit", 
		ZIndex = 3
	});
end;
function v4.render(p19)
	return u1.createElement("Frame", {
		AnchorPoint = p19.props.AnchorPoint, 
		Position = p19.props.Position, 
		Size = p19.props.Size, 
		BackgroundTransparency = 1, 
		[u1.Ref] = p19.SliderContainerRef
	}, {
		ProgressCircle = u1.createElement("ImageLabel", {
			AnchorPoint = Vector2.new(0.5, 0.5), 
			Position = p19.ProgressBinding:map(function(p20)
				return UDim2.fromScale(p20, 0.5);
			end), 
			Size = UDim2.fromScale(1, 1), 
			ScaleType = "Fit", 
			BackgroundTransparency = 1, 
			Image = "rbxassetid://10051535366", 
			ImageColor3 = p19.props.ThemeColor, 
			ZIndex = 4
		}), 
		SliderBar = u1.createElement("Frame", {
			AnchorPoint = Vector2.new(0.5, 0.5), 
			Position = UDim2.fromScale(0.5, 0.5), 
			Size = UDim2.new(1, 0, 0.6, 0), 
			BorderSizePixel = 0, 
			BackgroundColor3 = p19.props.BarColor, 
			ZIndex = 1
		}, {
			ProgressBar = u1.createElement("Frame", {
				Size = p19.ProgressBinding:map(function(p21)
					return UDim2.fromScale(p21, 1);
				end), 
				BorderSizePixel = 0, 
				BackgroundColor3 = p19.props.ThemeColor, 
				ZIndex = 2
			})
		}),
		u1.createElement(u7, {
			Position = UDim2.fromScale(0, 0.5), 
			Color3 = p19.props.ThemeColor, 
			Size = 1
		}), (u1.createElement(u7, {
			Position = UDim2.fromScale(1, 0.5), 
			Color3 = p19.props.BarColor, 
			Size = 1
		}))
	});
end;
function v4.willUnmount(p22)
	p22._maid:DoCleaning();
end;
v4.defaultProps = {
	Size = UDim2.new(0, 72, 0, 7), 
	InitialPosition = 0.5, 
	StepSize = 0.1, 
	Max = 1, 
	Min = 0, 
	ThemeColor = l__GameTheme__3.interactionPrimary, 
	BarColor = l__GameTheme__3.backgroundTertiary
};
return {
	SliderComponent = v4
};
