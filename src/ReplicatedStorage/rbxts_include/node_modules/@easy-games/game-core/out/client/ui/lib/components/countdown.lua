-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v3 = v2.Component:extend("Countdown");
function v3.init(p1)

end;
local l__StringUtil__1 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "util", "string-util").StringUtil;
function v3.didMount(p2)
	if p2.props.UseTick then
		local v4 = tick();
	else
		v4 = os.time();
	end;
	if not (p2.props.EndTime - v4 <= 0) then
		local u2 = true;
		local function u3()
			if p2.props.UseTick then
				local v5 = tick();
			else
				v5 = os.time();
			end;
			local v6 = math.max(0, p2.props.EndTime - v5);
			if v6 == 0 then
				u2 = false;
				task.spawn(function()
					if p2.props.OnComplete then
						p2.props.OnComplete();
					end;
				end);
				local l__OnCompleteText__7 = p2.props.OnCompleteText;
				if l__OnCompleteText__7 ~= "" and l__OnCompleteText__7 then
					return p2.props.OnCompleteText;
				end;
			end;
			return l__StringUtil__1.formatCountdownTime(v6, p2.props.CountdownConfig or {
				days = true, 
				hours = true, 
				minutes = true, 
				seperator = " : "
			});
		end;
		v1.Promise.defer(function()
			while { wait(0.1) } and u2 do
				p2:setState({
					resetTime = u3()
				});			
			end;
		end);
		return function()
			u2 = false;
		end;
	end;
	local v8 = p2.props.OnCompleteText;
	if v8 ~= "" and v8 then
		v8 = true;
	end;
	if v8 ~= "" and v8 then
		p2:setState({
			resetTime = p2.props.OnCompleteText
		});
	end;
	return nil;
end;
function v3.shouldUpdate(p3, p4, p5)
	local v9 = true;
	if p3.props.EndTime == p4.EndTime then
		v9 = p3.state.resetTime ~= p5.resetTime;
	end;
	return v9;
end;
local l__ColorUtil__4 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "util", "color-util").ColorUtil;
function v3.render(p6)
	local v10 = {};
	local l__TextLabel__11 = p6.props.TextLabel;
	if type(l__TextLabel__11) == "table" then
		for v12, v13 in pairs(l__TextLabel__11) do
			v10[v12] = v13;
		end;
	end;
	v10.Ref = nil;
	local v14 = {
		Size = UDim2.fromScale(1, 1)
	};
	local v15 = p6.props.PreText;
	if v15 == nil then
		v15 = "";
	end;
	local l__resetTime__16 = p6.state.resetTime;
	if l__resetTime__16 ~= "" and l__resetTime__16 then
		local v17 = "<b>" .. p6.state.resetTime .. "</b>";
	else
		v17 = "";
	end;
	local v18 = p6.props.PostText;
	if v18 == nil then
		v18 = "";
	end;
	v14.Text = v15 .. v17 .. v18;
	v14.TextScaled = true;
	v14.RichText = true;
	v14.Font = "Roboto";
	v14.TextColor3 = l__ColorUtil__4.WHITE;
	v14.BackgroundTransparency = 1;
	v14.LayoutOrder = 2;
	for v19, v20 in pairs(v10) do
		v14[v19] = v20;
	end;
	local v21 = p6.props.TextLabel;
	if v21 ~= nil then
		v21 = v21.Ref;
	end;
	v14[v2.Ref] = v21;
	local v22 = {};
	local v23 = #v22;
	local v24 = p6.props[v2.Children];
	if v24 then
		local v25, v26, v27 = pairs(v24);
		while true do
			local v28 = nil;
			local v29 = nil;
			v29, v28 = v25(v26, v27);
			if not v29 then
				break;
			end;
			v27 = v29;
			if type(v29) == "number" then
				v22[v23 + v29] = v28;
			else
				v22[v29] = v28;
			end;		
		end;
	end;
	return v2.createFragment({
		Countdown = v2.createElement("TextLabel", v14, v22)
	});
end;
return {
	Countdown = v3
};
