-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "IndicatorColorFunctions";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
function v2.constructor(p1)

end;
local l__MathExtras__1 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "util", "math-util").MathExtras;
function v2.twoColorTransition(p2, p3, p4, p5, p6)
	return function(p7)
		local v4 = math.clamp(p7, p5, p6);
		return Color3.fromRGB(l__MathExtras__1:rangeMap(v4, { p5, p6 }, { p3.R * 255, p4.R * 255 }), l__MathExtras__1:rangeMap(v4, { p5, p6 }, { p3.G * 255, p4.G * 255 }), (l__MathExtras__1:rangeMap(v4, { p5, p6 }, { p3.B * 255, p4.B * 255 })));
	end;
end;
local l__Workspace__2 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace;
function v2.transitionOverTime(p8, p9, p10, p11)
	local u3 = nil;
	return function(p12)
		if u3 == 0 or u3 ~= u3 or not u3 then
			u3 = l__Workspace__2:GetServerTimeNow();
		end;
		local v5 = l__Workspace__2:GetServerTimeNow() - u3;
		return Color3.fromRGB(l__MathExtras__1:rangeMap(v5, { 0, p11 }, { p9.R * 255, p10.R * 255 }), l__MathExtras__1:rangeMap(v5, { 0, p11 }, { p9.G * 255, p10.G * 255 }), (l__MathExtras__1:rangeMap(v5, { 0, p11 }, { p9.B * 255, p10.B * 255 })));
	end;
end;
return {
	IndicatorColorFunctions = v2
};
