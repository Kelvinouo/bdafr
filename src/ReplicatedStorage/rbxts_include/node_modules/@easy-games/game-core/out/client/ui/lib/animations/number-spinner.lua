-- Decompiled with the Synapse X Luau decompiler.

local l__TweenService__1 = game:GetService("TweenService");
local v2 = {};
local v3 = Instance.new("TextLabel");
v3.TextSize = 25;
v3.TextColor3 = Color3.fromRGB(250, 250, 255);
v3.Font = Enum.Font.SourceSans;
local u1 = Instance.new("Frame");
local u2 = {
	Frame = true, 
	Digits = true, 
	CommaLabels = true, 
	Text = true
};
local u3 = {
	[Enum.TextXAlignment.Center] = Enum.HorizontalAlignment.Center, 
	[Enum.TextXAlignment.Left] = Enum.HorizontalAlignment.Left, 
	[Enum.TextXAlignment.Right] = Enum.HorizontalAlignment.Right
};
local u4 = {
	Value = "number", 
	Duration = "number", 
	Decimals = "number", 
	Prefix = "string", 
	Suffix = "string", 
	Commas = "boolean"
};
local u5 = require(script.Digit);
local function u6()
	local v4 = {};
	local u7 = {
		Value = 0, 
		Duration = 0.3, 
		Decimals = 2, 
		Prefix = "$", 
		Suffix = "", 
		Commas = false, 
		Digits = {
			Whole = table.create(3), 
			Decimal = table.create(2)
		}, 
		CommaLabels = table.create(2)
	};
	function v4.__index(p1, p2)
		local v5 = u7[p2];
		if v5 then
			return v5;
		end;
		if pcall(function()
			local v6 = u1[p2];
		end) then
			return u7.Frame[p2];
		end;
		local v7, v8 = pcall(function()
			return v3[p2];
		end);
		if not v7 then
			return nil;
		end;
		local v9 = u7.Digits.Whole[1];
		if not v9 then
			return v8;
		end;
		return v9[p2];
	end;
	function v4.__newindex(p3, p4, p5)
		if u2[p4] then
			warn("Attempted to set read-only value Spinner." .. p4);
			return;
		end;
		if pcall(function()
			local v10 = u1[p4];
		end) then
			local v11 = typeof(u1[p4]);
			if v11 ~= "nil" and v11 ~= typeof(p5) then
				warn("Attempted to set Spinner." .. p4 .. " to invalid value (" .. tostring(p5) .. ")");
				return;
			else
				u7.Frame[p4] = p5;
				return;
			end;
		end;
		if p4 == "TextXAlignment" then
			u7.Layout.HorizontalAlignment = u3[p5];
			return;
		end;
		if not pcall(function()
			local v12 = v3[p4];
		end) then
			if u4[p4] then
				if typeof(p5) ~= u4[p4] then
					warn("Attempted to set Spinner." .. p4 .. " to invalid value (" .. tostring(p5) .. ")");
					return;
				else
					u7[p4] = p5;
					u7:Update(p4, p5);
					return;
				end;
			else
				return;
			end;
		end;
		local v13 = typeof(v3[p4]);
		if v13 ~= "nil" and v13 ~= typeof(p5) then
			warn("Attempted to set Spinner." .. p4 .. " to invalid value (" .. tostring(p5) .. ")");
			return;
		end;
		for v14, v15 in pairs(u7.Digits.Whole) do
			v15[p4] = p5;
		end;
		for v16, v17 in pairs(u7.Digits.Decimal) do
			v17[p4] = p5;
		end;
		for v18, v19 in pairs(u7.CommaLabels) do
			v19[p4] = p5;
		end;
		u7.PrefixLabel[p4] = p5;
		u7.SuffixLabel[p4] = p5;
		u7.DecimalLabel[p4] = p5;
		u7.NegativeLabel[p4] = p5;
	end;
	function u7.Destroy(p6)
		p6.Frame:Destroy();
		table.clear(p6);
	end;
	local u8 = setmetatable({}, v4);
	function u7.Update(p7, p8, p9)
		if p8 == "Prefix" then
			u7.PrefixLabel.Text = u7.Prefix;
			return;
		end;
		if p8 == "Suffix" then
			u7.SuffixLabel.Text = u7.Suffix;
			return;
		end;
		local v20 = math.abs(u7.Value);
		if u7.NegativeLabel then
			u7.NegativeLabel.Visible = u7.Value < 0;
		end;
		local v21 = string.split(u7.Decimals > 0 and string.format("%." .. u7.Decimals .. "f", v20) or string.format("%d", v20), ".");
		local v22 = v21[1];
		local v23 = v21[2];
		if not v22 then
			return;
		end;
		local v24 = #v22;
		for v25 = 1, v24 do
			local v26 = u7.Digits.Whole[v25];
			if v26 then
				v26.Duration = u7.Duration;
				v26.Value = tonumber(string.sub(v22, v25, v25));
			else
				u7.Digits.Whole[v25] = u5.new(u8, v25 * 2 - 900, tonumber(string.sub(v22, v25, v25)));
			end;
		end;
		for v27 = v24 + 1, #u7.Digits.Whole do
			local v28 = u7.Digits.Whole[v27];
			if v28 then
				v28:Destroy();
				u7.Digits.Whole[v27] = nil;
			end;
		end;
		if u7.Commas then
			local v29 = v24 * 2 - 900;
			local v30 = 0;
			for v31 = 0, #string.format("%d", math.floor(math.abs(u7.Value))) - 1, 3 do
				if v31 ~= 0 then
					v30 = v30 + 1;
					local v32 = u7.CommaLabels[v30];
					if not v32 then
						v32 = Instance.new("TextLabel");
						v32.Name = "Comma";
						v32.BackgroundTransparency = 1;
						v32.Size = UDim2.new(0, 0, 1, 0);
						v32.Font = u8.Font;
						v32.TextSize = u8.TextSize;
						v32.TextColor3 = u8.TextColor3;
						v32.Text = "<b>,</b>";
						v32.TextScaled = true;
						v32.RichText = true;
						v32.AutomaticSize = Enum.AutomaticSize.X;
						v32.Parent = u7.Frame;
						u7.CommaLabels[v30] = v32;
					end;
					v32.LayoutOrder = v29 - (v31 - 1) * 2 - 1;
				end;
			end;
			for v33 = v30 + 1, #u7.CommaLabels do
				u7.CommaLabels[v33]:Destroy();
				u7.CommaLabels[v33] = nil;
			end;
		end;
		if not v23 then
			if u7.DecimalLabel then
				u7.DecimalLabel.Visible = false;
			end;
			local v34, v35, v36 = ipairs(u7.Digits.Decimal);
			while true do
				v34(v35, v36);
				if not v34 then
					break;
				end;
				v36 = v34;
				v35:Destroy();			
			end;
			table.clear(u7.Digits.Decimal);
			return;
		end;
		if u7.DecimalLabel then
			u7.DecimalLabel.Visible = true;
		end;
		for v37 = 1, #v23 do
			local v38 = u7.Digits.Decimal[v37];
			if v38 then
				v38.Duration = u7.Duration;
				v38.Value = tonumber(string.sub(v23, v37, v37));
			else
				u7.Digits.Decimal[v37] = v38;
			end;
		end;
		for v39 = #v23 + 1, #u7.Digits.Decimal do
			local v40 = u7.Digits.Decimal[v39];
			if v40 then
				v40:Destroy();
				u7.Digits.Decimal[v39] = nil;
			end;
		end;
	end;
	return u8, u7;
end;
function v2.new()
	local v41, v42 = u6();
	local v43 = Instance.new("Frame");
	v43.BackgroundTransparency = 1;
	v43.ClipsDescendants = true;
	v43.Size = UDim2.new(0, 200, 0, 50);
	v43.Position = UDim2.new(0, 0, 0, 0);
	v43.AutomaticSize = Enum.AutomaticSize.X;
	local v44 = Instance.new("UIListLayout");
	v44.SortOrder = Enum.SortOrder.LayoutOrder;
	v44.FillDirection = Enum.FillDirection.Horizontal;
	v44.HorizontalAlignment = Enum.HorizontalAlignment.Center;
	v44.VerticalAlignment = Enum.VerticalAlignment.Center;
	v44.Padding = UDim.new(0, 1);
	v44.Parent = v43;
	local v45 = Instance.new("TextLabel");
	v45.Name = "Prefix";
	v45.LayoutOrder = -1000;
	v45.BackgroundTransparency = 1;
	v45.Size = UDim2.new(0, 0, 1, 0);
	v45.Font = v41.Font;
	v45.TextSize = v41.TextSize;
	v45.TextColor3 = v41.TextColor3;
	v45.Text = v41.Prefix;
	v45.AutomaticSize = Enum.AutomaticSize.X;
	v45.Parent = v43;
	local v46 = Instance.new("TextLabel");
	v46.Name = "Suffix";
	v46.LayoutOrder = 1000;
	v46.BackgroundTransparency = 1;
	v46.Size = UDim2.new(0, 0, 1, 0);
	v46.Font = v41.Font;
	v46.TextSize = v41.TextSize;
	v46.TextColor3 = v41.TextColor3;
	v46.Text = v41.Suffix;
	v46.AutomaticSize = Enum.AutomaticSize.X;
	v46.Parent = v43;
	local v47 = Instance.new("TextLabel");
	v47.Name = "Decimal";
	v47.LayoutOrder = 0;
	v47.BackgroundTransparency = 1;
	v47.Size = UDim2.new(0, 0, 1, 0);
	v47.Font = v41.Font;
	v47.TextSize = v41.TextSize;
	v47.TextColor3 = v41.TextColor3;
	v47.Text = ".";
	v47.AutomaticSize = Enum.AutomaticSize.X;
	v47.Parent = v43;
	local v48 = Instance.new("TextLabel");
	v48.Name = "Negative";
	v48.LayoutOrder = -999;
	v48.BackgroundTransparency = 1;
	v48.Size = UDim2.new(0, 0, 1, 0);
	v48.Font = v41.Font;
	v48.TextSize = v41.TextSize;
	v48.TextColor3 = v41.TextColor3;
	v48.Text = "-";
	v48.AutomaticSize = Enum.AutomaticSize.X;
	v48.Parent = v43;
	v42.Frame = v43;
	v42.Layout = v44;
	v42.PrefixLabel = v45;
	v42.SuffixLabel = v46;
	v42.DecimalLabel = v47;
	v42.NegativeLabel = v48;
	v41:Update();
	return v41;
end;
function v2.fromGuiObject(p10)
	if not typeof(p10) == "Instance" then
		return;
	end;
	if not p10:IsA("GuiObject") then
		return;
	end;
	local v49 = v2.new();
	v49.Name = "Spinner_" .. p10.Name;
	v49.SizeConstraint = p10.SizeConstraint;
	v49.Size = p10.Size;
	v49.Position = p10.Position;
	v49.AnchorPoint = p10.AnchorPoint;
	v49.Rotation = p10.Rotation;
	v49.LayoutOrder = p10.LayoutOrder;
	v49.ZIndex = p10.ZIndex;
	v49.Visible = p10.Visible;
	v49.BackgroundColor3 = p10.BackgroundColor3;
	v49.BorderColor3 = p10.BorderColor3;
	v49.BorderSizePixel = p10.BorderSizePixel;
	v49.BackgroundTransparency = p10.BackgroundTransparency;
	if not (not p10:IsA("TextLabel")) or not (not p10:IsA("TextButton")) or p10:IsA("TextBox") then
		v49.Font = p10.Font;
		v49.TextSize = p10.TextSize;
		v49.TextColor3 = p10.TextColor3;
		v49.TextTransparency = p10.TextTransparency;
		v49.TextStrokeColor3 = p10.TextStrokeColor3;
		v49.TextStrokeTransparency = p10.TextStrokeTransparency;
		v49.Layout.HorizontalAlignment = u3[p10.TextXAlignment];
	end;
	v49.Parent = p10.Parent;
	p10.Visible = false;
	return v49;
end;
return {
	NumberSpinner = v2
};
