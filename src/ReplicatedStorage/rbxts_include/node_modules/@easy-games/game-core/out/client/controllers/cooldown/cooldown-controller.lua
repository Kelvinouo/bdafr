-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = setmetatable({}, {
	__tostring = function()
		return "CooldownController";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
function v4.constructor(p1)
	p1.cooldownMap = {};
	p1.barRegistry = {};
end;
function v4.onStart(p2)

end;
function v4.isOnCooldown(p3, p4)
	local v6 = p3.cooldownMap[p4];
	if v6 and os.clock() < v6.expire then
		return true;
	end;
	return false;
end;
local l__MapUtil__1 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local l__GameCoreClientSyncEvents__2 = v1.import(script, script.Parent.Parent.Parent, "game-core-client-events").GameCoreClientSyncEvents;
function v4.setOnCooldown(p5, p6, p7, p8)
	local v7 = l__MapUtil__1.getOrCreate(p5.cooldownMap, p6, {
		expire = os.clock() + p7, 
		bufferedCallbacks = {}, 
		cooldownConfig = p8 or {}, 
		startTime = os.clock(), 
		barMounted = false
	});
	v7.expire = math.max(os.clock() + p7, v7.expire);
	v7.cooldownConfig = p8 or v7.cooldownConfig;
	v7.startTime = os.clock();
	if p5.barRegistry[p6] ~= nil then
		p5.barRegistry[p6] = nil;
		v7.barMounted = true;
		p5.barRegistry[p6]().maid:GiveTask(function()
			v7.barMounted = false;
		end);
	end;
	if v7.terminatePromise then
		v7.terminatePromise:cancel();
	end;
	v7.terminatePromise = p5:getTerminatePromise(p6);
	l__GameCoreClientSyncEvents__2.CooldownStarted:fire(p6, os.clock(), p7);
end;
local u3 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__Flamework__4 = v2.Flamework;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local l__CooldownBar__6 = v1.import(script, script.Parent, "ui", "cooldown-bar").CooldownBar;
local l__GameTheme__7 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
function v4.createCooldownBar(p9, p10, p11)
	local v8 = nil;
	local u8 = u3.new();
	v8 = function()
		local v9 = u3.new();
		u8:GiveTask(v9);
		local u9 = l__Flamework__4.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):addComponent(u5.createFragment({
			[p10] = u5.createElement(l__CooldownBar__6, {
				cooldownId = p10, 
				Size = l__GameTheme__7.cooldownBarSize, 
				LayoutOrder = l__GameTheme__7.cooldownActionBarPriority
			})
		}));
		v9:GiveTask(function()
			if u9 then
				u9:DoCleaning();
			end;
		end);
		return {
			maid = v9
		};
	end;
	local v10 = p9.cooldownMap[p10];
	if not v10 then
		p9.barRegistry[p10] = v8;
		return u8;
	end;
	if v10.barMounted then
		return u8;
	end;
	local v11 = v8();
	v10.barMounted = true;
	u8:GiveTask(function()
		v10.barMounted = false;
	end);
	return u8;
end;
function v4.removeCooldown(p12, p13)
	local v12 = p12.cooldownMap[p13];
	if v12 then
		p12:runAllBufferedCallbacks(v12);
		if v12.terminatePromise then
			v12.terminatePromise:cancel();
		end;
		p12.cooldownMap[p13] = nil;
	end;
end;
function v4.getRemainingCooldown(p14, p15)
	local v13 = p14.cooldownMap[p15];
	if v13 ~= nil then
		v13 = v13.expire;
	end;
	local v14 = v13;
	if v14 == nil then
		v14 = 0;
	end;
	return math.max(0, v14 - os.clock());
end;
function v4.registerBufferedCallback(p16, p17, p18, p19)
	local v15 = p16.cooldownMap[p17];
	if not v15 or not p16:isOnCooldown(p17) then
		return false;
	end;
	v15.bufferedCallbacks[p18] = p19;
	if not v15.terminatePromise then
		v15.terminatePromise = p16:getTerminatePromise(p17);
	end;
	return true;
end;
function v4.getTerminatePromise(p20, p21)
	return v1.Promise.delay(p20:getRemainingCooldown(p21)):andThen(function()
		l__GameCoreClientSyncEvents__2.CooldownExpired:fire(p21);
		local v16 = p20.cooldownMap[p21];
		if not v16 then
			return nil;
		end;
		p20:runAllBufferedCallbacks(v16);
	end);
end;
function v4.runAllBufferedCallbacks(p22, p23)
	local l__bufferedCallbacks__17 = p23.bufferedCallbacks;
	local function v18(p24)
		v1.try(function()
			p24();
		end, function(p25)
			warn("Cooldown buffered callback errored:");
			warn(p25);
		end);
	end;
	for v19, v20 in pairs(l__bufferedCallbacks__17) do
		v18(v20, v19, l__bufferedCallbacks__17);
	end;
	p23.bufferedCallbacks = {};
end;
function v4.getCooldownData(p26, p27)
	return p26.cooldownMap[p27];
end;
l__Reflect__3.defineMetadata(v4, "identifier", "@easy-games/game-core:client/controllers/cooldown/cooldown-controller@CooldownController");
l__Reflect__3.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__3.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.defineMetadata(v4, "flamework:decorators", { "$:flamework@Controller" });
l__Reflect__3.defineMetadata(v4, "flamework:decorators.$:flamework@Controller", {
	type = "Controller"
});
return {
	CooldownController = v4
};
