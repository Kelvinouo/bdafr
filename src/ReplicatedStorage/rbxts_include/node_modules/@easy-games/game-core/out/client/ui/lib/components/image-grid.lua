-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v3 = v2.Component:extend("ImageGrid");
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v3.init(p1, p2)
	p1.maid = u1.new();
	p1.scale = 1;
	p1.containerRef = v2.createRef();
	local v4 = {};
	local v5 = p2.CurrentIndex;
	if v5 == nil then
		v5 = 0;
	end;
	v4.currentIndex = v5;
	p1:setState(v4);
end;
function v3.updateContentSize(p3, p4)
	local v6 = p3.containerRef:getValue();
	if not v6 then
		return nil;
	end;
	v6.CanvasSize = UDim2.new(1, 0, 0, p4.Y / p3.scale * 1.05);
end;
function v3.updateContainerSize(p5, p6, p7, p8)
	if not p5.props.UpdateContainerSize then
		return nil;
	end;
	local v7 = p5.props.Size;
	if v7 ~= nil then
		v7 = v7.Y.Offset;
	end;
	if v7 == 0 or v7 ~= v7 or not v7 then
		if p5.props.ImageSize.Y.Offset < p7.Y then
			local v8 = p7.Y * p8;
		else
			v8 = p5.props.ImageSize.Y.Offset + 20 * p8;
		end;
		p6.Size = UDim2.new(p6.Size.X.Scale, p6.Size.X.Offset, 0, v8);
		return;
	end;
	if p5.props.ImageSize.Y.Offset < p6.Size.Y.Offset then
		local v9 = p6.Size.Y.Offset * p8;
	else
		v9 = p5.props.ImageSize.Y.Offset + 20 * p8;
	end;
	p6.Size = UDim2.new(p6.Size.X.Scale, p6.Size.X.Offset, 0, v9);
end;
local l__GetUIScaleAncestors__2 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "util", "ui-utils").GetUIScaleAncestors;
function v3.didUpdate(p9, p10, p11)
	local v10 = nil;
	local v11 = p9.containerRef:getValue();
	local v12 = v11:FindFirstChildWhichIsA("UIGridStyleLayout");
	local v13 = l__GetUIScaleAncestors__2(v12);
	local v14 = table.create(#v13);
	local v15, v16, v17 = ipairs(v13);
	while true do
		v15(v16, v17);
		if not v15 then
			break;
		end;
		v17 = v15;
		v14[v15] = v16.Scale;	
	end;
	v10 = 1;
	for v18 = 1, #v14 do
		v10 = v10 * v14[v18];
	end;
	p9:updateContainerSize(v11, v12.AbsoluteContentSize, local v19);
end;
function v3.didMount(p12)
	local v20 = nil;
	local v21 = p12.containerRef:getValue();
	local v22 = v21:FindFirstChildWhichIsA("UIGridStyleLayout");
	local v23 = l__GetUIScaleAncestors__2(v22);
	local v24 = table.create(#v23);
	local v25, v26, v27 = ipairs(v23);
	while true do
		v25(v26, v27);
		if not v25 then
			break;
		end;
		v27 = v25;
		v24[v25] = v26.Scale;	
	end;
	v20 = 1;
	for v28 = 1, #v24 do
		v20 = v20 * v24[v28];
	end;
	v1.Promise.delay(0.1):andThen(function()
		local u3 = l__GetUIScaleAncestors__2(v22);
		local function v29()
			local v30 = nil;
			local v31 = table.create(#u3);
			local v32, v33, v34 = ipairs(u3);
			while true do
				v32(v33, v34);
				if not v32 then
					break;
				end;
				v34 = v32;
				v31[v32] = v33.Scale;			
			end;
			v30 = 1;
			for v35 = 1, #v31 do
				v30 = v30 * v31[v35];
			end;
			p12.scale = local v36;
		end;
		v29();
		p12:updateContentSize(v22.AbsoluteContentSize);
		local v37, v38, v39 = ipairs(u3);
		while true do
			v37(v38, v39);
			if not v37 then
				break;
			end;
			v39 = v37;
			p12.maid:GiveTask(v38:GetPropertyChangedSignal("Scale"):Connect(v29));		
		end;
	end);
	p12:updateContainerSize(v21, v22.AbsoluteContentSize, local v40);
	p12:updateContentSize(v22.AbsoluteContentSize);
	p12.maid:GiveTask(v22:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		p12:updateContentSize(v22.AbsoluteContentSize);
	end));
end;
local l__GameTheme__4 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
local l__GridImage__5 = v1.import(script, script, "image").GridImage;
function v3.render(p13)
	local l__Images__41 = p13.props.Images;
	local function v42(p14, p15)
		local v43 = {
			TarmacData = p14.asset and nil
		};
		local v44 = p14.imageId;
		if v44 == nil then
			v44 = nil;
		end;
		v43.ImageId = v44;
		v43.ImageBackgroundColor = l__GameTheme__4.backgroundTertiary;
		v43.AltText = p14.alt;
		v43.AltFont = p14.altFont;
		v43.AltColor = p14.altColor;
		v43.Index = p15;
		v43.CurrentIndex = p13.state.currentIndex;
		function v43.OnClick()
			p13:setState({
				currentIndex = p15
			});
			if p13.props.OnSelectionChange ~= nil then
				p13.props.OnSelectionChange(p14.id);
			end;
		end;
		v43.ToFriendlyCase = p13.props.ToFriendlyCase;
		return v2.createElement(l__GridImage__5, v43);
	end;
	local v45 = table.create(#l__Images__41);
	local v46, v47, v48 = ipairs(l__Images__41);
	while true do
		v46(v47, v48);
		if not v46 then
			break;
		end;
		v48 = v46;
		v45[v46] = v42(v47, v46 - 1, l__Images__41);	
	end;
	local v49 = {
		AnchorPoint = p13.props.AnchorPoint, 
		Position = p13.props.Position, 
		Size = p13.props.Size, 
		CanvasSize = UDim2.new(), 
		BackgroundTransparency = 1, 
		BorderSizePixel = 0, 
		ScrollBarThickness = 8, 
		ScrollBarImageColor3 = Color3.fromRGB(172, 176, 255), 
		ScrollingDirection = p13.props.ScrollingDirection, 
		[v2.Ref] = p13.containerRef
	};
	local v50 = { v2.createElement("UISizeConstraint", {
			MaxSize = Vector2.new(math.huge, p13.props.MaxSize)
		}), v2.createElement("UIPadding", {
			PaddingRight = UDim.new(0, 10)
		}), v2.createElement("UIGridLayout", {
			CellSize = p13.props.ImageSize, 
			CellPadding = UDim2.fromOffset(8, 8), 
			FillDirection = Enum.FillDirection.Horizontal, 
			HorizontalAlignment = Enum.HorizontalAlignment.Left, 
			VerticalAlignment = Enum.VerticalAlignment.Top, 
			SortOrder = Enum.SortOrder.LayoutOrder
		}) };
	local v51 = #v50;
	local v52, v53, v54 = ipairs(v45);
	while true do
		v52(v53, v54);
		if not v52 then
			break;
		end;
		v54 = v52;
		v50[v51 + v52] = v53;	
	end;
	return v2.createFragment({
		ImageGrid = v2.createElement("ScrollingFrame", v49, v50)
	});
end;
function v3.willUnmount(p16)
	p16.maid:DoCleaning();
end;
v3.defaultProps = {
	ImageAspectRatio = 1.5, 
	ImageSize = UDim2.new(0.317, 0, 0, 90), 
	MaxSize = math.huge, 
	ToFriendlyCase = true, 
	UpdateContainerSize = true
};
return {
	ImageGrid = v3
};
