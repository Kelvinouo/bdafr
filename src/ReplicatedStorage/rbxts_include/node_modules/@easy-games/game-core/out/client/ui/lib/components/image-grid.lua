-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v3 = v2.Component:extend("ImageGrid");
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v3.init(p1, p2)
	p1.maid = u1.new();
	p1.scale = 1;
	p1.containerRef = v2.createRef();
	local v4 = {};
	local v5 = p2.CurrentIndex;
	if v5 == nil then
		v5 = 0;
	end;
	v4.currentIndex = v5;
	p1:setState(v4);
end;
function v3.updateContentSize(p3, p4)
	local v6 = p3.containerRef:getValue();
	if not v6 then
		return nil;
	end;
	v6.CanvasSize = UDim2.new(1, 0, 0, p4.Y / p3.scale * 1.05);
end;
function v3.updateContainerSize(p5, p6, p7, p8)
	if not p5.props.UpdateContainerSize then
		return nil;
	end;
	local v7 = p5.props.Size;
	if v7 ~= nil then
		v7 = v7.Y.Offset;
	end;
	if v7 == 0 or v7 ~= v7 or not v7 then
		if p5.props.ImageSize.Y.Offset < p7.Y then
			local v8 = p7.Y * p8;
		else
			v8 = p5.props.ImageSize.Y.Offset + 20 * p8;
		end;
		p6.Size = UDim2.new(p6.Size.X.Scale, p6.Size.X.Offset, 0, v8);
		return;
	end;
	if p5.props.ImageSize.Y.Offset < p6.Size.Y.Offset then
		local v9 = p6.Size.Y.Offset * p8;
	else
		v9 = p5.props.ImageSize.Y.Offset + 20 * p8;
	end;
	p6.Size = UDim2.new(p6.Size.X.Scale, p6.Size.X.Offset, 0, v9);
end;
local l__GetUIScaleAncestors__2 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "util", "ui-utils").GetUIScaleAncestors;
function v3.didUpdate(p9, p10, p11)
	local v10 = nil;
	local v11 = p9.containerRef:getValue();
	local v12 = v11:FindFirstChildWhichIsA("UIGridStyleLayout");
	local v13 = l__GetUIScaleAncestors__2(v12);
	local v14 = table.create(#v13);
	for v15, v16 in ipairs(v13) do
		v14[v15] = v16.Scale;
	end;
	v10 = 1;
	for v17 = 1, #v14 do
		v10 = v10 * v14[v17];
	end;
	p9:updateContainerSize(v11, v12.AbsoluteContentSize, local v18);
end;
function v3.didMount(p12)
	local v19 = nil;
	local v20 = p12.containerRef:getValue();
	local v21 = v20:FindFirstChildWhichIsA("UIGridStyleLayout");
	local v22 = l__GetUIScaleAncestors__2(v21);
	local v23 = table.create(#v22);
	for v24, v25 in ipairs(v22) do
		v23[v24] = v25.Scale;
	end;
	v19 = 1;
	for v26 = 1, #v23 do
		v19 = v19 * v23[v26];
	end;
	v1.Promise.delay(0.1):andThen(function()
		local u3 = l__GetUIScaleAncestors__2(v21);
		local function v27()
			local v28 = nil;
			local v29 = table.create(#u3);
			for v30, v31 in ipairs(u3) do
				v29[v30] = v31.Scale;
			end;
			v28 = 1;
			for v32 = 1, #v29 do
				v28 = v28 * v29[v32];
			end;
			p12.scale = local v33;
		end;
		v27();
		p12:updateContentSize(v21.AbsoluteContentSize);
		for v34, v35 in ipairs(u3) do
			p12.maid:GiveTask(v35:GetPropertyChangedSignal("Scale"):Connect(v27));
		end;
	end);
	p12:updateContainerSize(v20, v21.AbsoluteContentSize, local v36);
	p12:updateContentSize(v21.AbsoluteContentSize);
	p12.maid:GiveTask(v21:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		p12:updateContentSize(v21.AbsoluteContentSize);
	end));
end;
local l__GameTheme__4 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
local l__GridImage__5 = v1.import(script, script, "image").GridImage;
function v3.render(p13)
	local l__Images__37 = p13.props.Images;
	local function v38(p14, p15)
		local v39 = {
			TarmacData = p14.asset and nil
		};
		local v40 = p14.imageId;
		if v40 == nil then
			v40 = nil;
		end;
		v39.ImageId = v40;
		v39.ImageBackgroundColor = l__GameTheme__4.backgroundTertiary;
		v39.AltText = p14.alt;
		v39.AltFont = p14.altFont;
		v39.AltColor = p14.altColor;
		v39.Index = p15;
		v39.CurrentIndex = p13.state.currentIndex;
		function v39.OnClick()
			p13:setState({
				currentIndex = p15
			});
			if p13.props.OnSelectionChange ~= nil then
				p13.props.OnSelectionChange(p14.id);
			end;
		end;
		v39.ToFriendlyCase = p13.props.ToFriendlyCase;
		return v2.createElement(l__GridImage__5, v39);
	end;
	local v41 = table.create(#l__Images__37);
	for v42, v43 in ipairs(l__Images__37) do
		v41[v42] = v38(v43, v42 - 1, l__Images__37);
	end;
	local v44 = {
		AnchorPoint = p13.props.AnchorPoint, 
		Position = p13.props.Position, 
		Size = p13.props.Size, 
		CanvasSize = UDim2.new(), 
		BackgroundTransparency = 1, 
		BorderSizePixel = 0, 
		ScrollBarThickness = 8, 
		ScrollBarImageColor3 = Color3.fromRGB(172, 176, 255), 
		ScrollingDirection = p13.props.ScrollingDirection, 
		[v2.Ref] = p13.containerRef
	};
	local v45 = { v2.createElement("UISizeConstraint", {
			MaxSize = Vector2.new(math.huge, p13.props.MaxSize)
		}), v2.createElement("UIPadding", {
			PaddingRight = UDim.new(0, 10)
		}), v2.createElement("UIGridLayout", {
			CellSize = p13.props.ImageSize, 
			CellPadding = UDim2.fromOffset(8, 8), 
			FillDirection = Enum.FillDirection.Horizontal, 
			HorizontalAlignment = Enum.HorizontalAlignment.Left, 
			VerticalAlignment = Enum.VerticalAlignment.Top, 
			SortOrder = Enum.SortOrder.LayoutOrder
		}) };
	local v46 = #v45;
	for v47, v48 in ipairs(v41) do
		v45[v46 + v47] = v48;
	end;
	return v2.createFragment({
		ImageGrid = v2.createElement("ScrollingFrame", v44, v45)
	});
end;
function v3.willUnmount(p16)
	p16.maid:DoCleaning();
end;
v3.defaultProps = {
	ImageAspectRatio = 1.5, 
	ImageSize = UDim2.new(0.317, 0, 0, 90), 
	MaxSize = math.huge, 
	ToFriendlyCase = true, 
	UpdateContainerSize = true
};
return {
	ImageGrid = v3
};
