-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "ActionBarController";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
function v5.constructor(p1)
	p1.childElementOrder = "ascending";
	p1.actionBarRef = u1.createRef();
	p1.actionBarMounted = u2.new();
	p1.childElementQueue = {};
end;
local l__Flamework__3 = v2.Flamework;
function v5.onStart(p2)
	p2.actionBarMounted:Connect(function(p3, p4)
		local l__childElementQueue__7 = p2.childElementQueue;
		local function v8(p5)
			if p5.component then
				local u4 = u1.mount(p5.component, p4);
				p5.removeMaid:GiveTask(function()
					u1.unmount(u4);
				end);
			elseif p5.uiApp then
				l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):openApp(p5.uiApp.app, p5.uiApp.props, nil, p4);
				p5.removeMaid:GiveTask(function()
					if p5.uiApp then
						l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):closeApp(p5.uiApp.app);
					end;
				end);
			end;
			p2:updateLayoutOrder();
		end;
		local v9, v10, v11 = ipairs(l__childElementQueue__7);
		while true do
			v9(v10, v11);
			if not v9 then
				break;
			end;
			v11 = v9;
			v8(v10, v9 - 1, l__childElementQueue__7);		
		end;
	end);
	l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):mountActionBar({});
end;
local l__ActionBar__5 = v1.import(script, script.Parent, "action-bar").ActionBar;
local l__Players__6 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Players;
function v5.mountActionBar(p6, p7)
	if p6.actionBarTree then
		u1.unmount(p6.actionBarTree);
		p6.actionBarRef = u1.createRef();
	end;
	local v12 = {};
	local v13 = {};
	for v14, v15 in pairs(p7) do
		v13[v14] = v15;
	end;
	v12[#v12 + 1] = u1.createElement(l__ActionBar__5, v13);
	p6.actionBarTree = u1.mount(u1.createFragment({
		ActionBarScreenGui = u1.createElement("ScreenGui", {
			ResetOnSpawn = false
		}, v12)
	}), l__Players__6.LocalPlayer:WaitForChild("PlayerGui"));
	return p6.actionBarTree;
end;
function v5.unmountActionBar(p8)
	if p8.actionBarTree then
		u1.unmount(p8.actionBarTree);
		p8.actionBarRef = u1.createRef();
	end;
end;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v5.addApp(p9, p10, p11)
	local v16 = u7.new();
	local v17 = p9.actionBarRef;
	if v17 ~= nil then
		v17 = v17:getValue();
	end;
	if v17 then
		local v18 = l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):openApp(p10, p11, nil, v17);
		p9:updateLayoutOrder();
		return v18;
	end;
	warn("The ActionBar has not been mounted. Make sure you've mounted the ActionBar component from game-core in your game.");
	table.insert(p9.childElementQueue, {
		uiApp = {
			app = p10, 
			props = p11
		}, 
		removeMaid = v16
	});
	v16:GiveTask(function()
		local v19 = {};
		local v20 = 0;
		local v21, v22, v23 = ipairs(p9.childElementQueue);
		while true do
			v21(v22, v23);
			if not v21 then
				break;
			end;
			local v24 = v22.uiApp;
			if v24 ~= nil then
				v24 = v24.app;
			end;
			if v24 ~= p10 == true then
				v20 = v20 + 1;
				v19[v20] = v22;
			end;		
		end;
		p9.childElementQueue = v19;
	end);
	return false;
end;
function v5.addComponent(p12, p13)
	local v25 = u7.new();
	local v26 = p12.actionBarRef;
	if v26 ~= nil then
		v26 = v26:getValue();
	end;
	if not v26 then
		warn("The ActionBar has not been mounted. Make sure you've mounted the ActionBar component from game-core in your game.");
		table.insert(p12.childElementQueue, {
			component = p13, 
			removeMaid = v25
		});
		v25:GiveTask(function()
			local v27 = {};
			local v28 = 0;
			local v29, v30, v31 = ipairs(p12.childElementQueue);
			while true do
				v29(v30, v31);
				if not v29 then
					break;
				end;
				if v30.component ~= p13 == true then
					v28 = v28 + 1;
					v27[v28] = v30;
				end;			
			end;
			p12.childElementQueue = v27;
		end);
		return v25;
	end;
	print("Mounted a component normal way...");
	local v32 = u1.mount(p13, v26);
	p12:updateLayoutOrder();
	v25:GiveTask(function()
		u1.unmount(v32);
	end);
	return v25;
end;
function v5.waitForActionBarAddComponent(p14, p15)
	local v33 = p14.actionBarRef;
	if v33 ~= nil then
		v33 = v33:getValue();
	end;
	if not v33 then
		p14.actionBarMounted:Wait();
	end;
	return u1.mount(p15, v33);
end;
function v5.updateLayoutOrder(p16)
	local v34 = p16.actionBarRef;
	if v34 ~= nil then
		v34 = v34:getValue();
	end;
	if v34 then
		local v35, v36, v37 = ipairs((v34:GetChildren()));
		while true do
			v35(v36, v37);
			if not v35 then
				break;
			end;
			v37 = v35;
			if v36:IsA("GuiObject") then
				if p16.childElementOrder == "ascending" then
					local v38 = -1;
				else
					v38 = 1;
				end;
				v36.LayoutOrder = v38 * (v35 - 1);
			end;		
		end;
	end;
end;
l__Reflect__3.defineMetadata(v5, "identifier", "@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController");
l__Reflect__3.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.decorate(v5, "$:flamework@Controller", v4.Controller, { {} });
l__Reflect__3.decorate(v5, "$:flamework@External", v4.External, {});
return {
	ActionBarController = v5
};
