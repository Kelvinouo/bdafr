-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = setmetatable({}, {
	__tostring = function()
		return "ActionBarController";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
function v4.constructor(p1)
	p1.childElementOrder = "ascending";
	p1.actionBarRef = u1.createRef();
	p1.actionBarMounted = u2.new();
	p1.childElementQueue = {};
end;
local l__Flamework__3 = v2.Flamework;
function v4.onStart(p2)
	p2.actionBarMounted:Connect(function(p3, p4)
		local l__childElementQueue__6 = p2.childElementQueue;
		local function v7(p5)
			if p5.component then
				local u4 = u1.mount(p5.component, p4);
				p5.removeMaid:GiveTask(function()
					u1.unmount(u4);
				end);
			elseif p5.uiApp then
				l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):openApp(p5.uiApp.app, p5.uiApp.props, nil, p4);
				p5.removeMaid:GiveTask(function()
					if p5.uiApp then
						l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):closeApp(p5.uiApp.app);
					end;
				end);
			end;
			p2:updateLayoutOrder();
		end;
		for v8, v9 in ipairs(l__childElementQueue__6) do
			v7(v9, v8 - 1, l__childElementQueue__6);
		end;
	end);
	l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):mountActionBar({});
end;
local l__ActionBar__5 = v1.import(script, script.Parent, "action-bar").ActionBar;
local l__Players__6 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Players;
function v4.mountActionBar(p6, p7)
	if p6.actionBarTree then
		u1.unmount(p6.actionBarTree);
		p6.actionBarRef = u1.createRef();
	end;
	local v10 = {};
	local v11 = {};
	for v12, v13 in pairs(p7) do
		v11[v12] = v13;
	end;
	v10[#v10 + 1] = u1.createElement(l__ActionBar__5, v11);
	p6.actionBarTree = u1.mount(u1.createFragment({
		ActionBarScreenGui = u1.createElement("ScreenGui", {
			ResetOnSpawn = false
		}, v10)
	}), l__Players__6.LocalPlayer:WaitForChild("PlayerGui"));
	return p6.actionBarTree;
end;
function v4.unmountActionBar(p8)
	if p8.actionBarTree then
		u1.unmount(p8.actionBarTree);
		p8.actionBarRef = u1.createRef();
	end;
end;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v4.addApp(p9, p10, p11)
	local v14 = u7.new();
	local v15 = p9.actionBarRef;
	if v15 ~= nil then
		v15 = v15:getValue();
	end;
	if v15 then
		local v16 = l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):openApp(p10, p11, nil, v15);
		p9:updateLayoutOrder();
		return v16;
	end;
	warn("The ActionBar has not been mounted. Make sure you've mounted the ActionBar component from game-core in your game.");
	table.insert(p9.childElementQueue, {
		uiApp = {
			app = p10, 
			props = p11
		}, 
		removeMaid = v14
	});
	v14:GiveTask(function()
		local l__childElementQueue__17 = p9.childElementQueue;
		local function v18(p12)
			local v19 = p12.uiApp;
			if v19 ~= nil then
				v19 = v19.app;
			end;
			return v19 ~= p10;
		end;
		local v20 = {};
		local v21 = 0;
		for v22, v23 in ipairs(l__childElementQueue__17) do
			if v18(v23, v22 - 1, l__childElementQueue__17) == true then
				v21 = v21 + 1;
				v20[v21] = v23;
			end;
		end;
		p9.childElementQueue = v20;
	end);
	return false;
end;
function v4.addComponent(p13, p14)
	local v24 = u7.new();
	local v25 = p13.actionBarRef;
	if v25 ~= nil then
		v25 = v25:getValue();
	end;
	if v25 then
		local v26 = u1.mount(p14, v25);
		p13:updateLayoutOrder();
		v24:GiveTask(function()
			u1.unmount(v26);
		end);
		return v24;
	end;
	warn("The ActionBar has not been mounted. Make sure you've mounted the ActionBar component from game-core in your game.");
	table.insert(p13.childElementQueue, {
		component = p14, 
		removeMaid = v24
	});
	v24:GiveTask(function()
		local l__childElementQueue__27 = p13.childElementQueue;
		local function v28(p15)
			return p15.component ~= p14;
		end;
		local v29 = {};
		local v30 = 0;
		for v31, v32 in ipairs(l__childElementQueue__27) do
			if v28(v32, v31 - 1, l__childElementQueue__27) == true then
				v30 = v30 + 1;
				v29[v30] = v32;
			end;
		end;
		p13.childElementQueue = v29;
	end);
	return v24;
end;
function v4.waitForActionBarAddComponent(p16, p17)
	local v33 = p16.actionBarRef;
	if v33 ~= nil then
		v33 = v33:getValue();
	end;
	if not v33 then
		p16.actionBarMounted:Wait();
	end;
	return u1.mount(p17, v33);
end;
function v4.updateLayoutOrder(p18)
	local v34 = p18.actionBarRef;
	if v34 ~= nil then
		v34 = v34:getValue();
	end;
	if v34 then
		local v35 = v34:GetChildren();
		local function v36(p19, p20)
			if p19:IsA("GuiObject") then
				if p18.childElementOrder == "ascending" then
					local v37 = -1;
				else
					v37 = 1;
				end;
				p19.LayoutOrder = v37 * p20;
			end;
		end;
		for v38, v39 in ipairs(v35) do
			v36(v39, v38 - 1, v35);
		end;
	end;
end;
l__Reflect__3.defineMetadata(v4, "identifier", "@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController");
l__Reflect__3.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__3.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.defineMetadata(v4, "flamework:decorators", { "$:flamework@Controller" });
l__Reflect__3.defineMetadata(v4, "flamework:decorators.$:flamework@Controller", {
	type = "Controller"
});
return {
	ActionBarController = v4
};
