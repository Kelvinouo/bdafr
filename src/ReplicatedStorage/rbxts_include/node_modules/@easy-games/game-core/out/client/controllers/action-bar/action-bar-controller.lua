-- Script Hash: 3559801ce20517ed621224eacf7812182492ebe4aec942fd7d2037fb97e29559c48d36c957b12124dd688cbc5d072d96
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "ActionBarController";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
function v5.constructor(p1)
	p1.childElementOrder = "ascending";
	p1.actionBarRef = u1.createRef();
	p1.actionBarMounted = u2.new();
	p1.childElementQueue = {};
end;
local l__Flamework__3 = v2.Flamework;
function v5.onStart(p2)
	p2.actionBarMounted:Connect(function(p3, p4)
		print("Action bar mounted fired!");
		local l__childElementQueue__7 = p2.childElementQueue;
		local function v8(p5)
			if p5.component then
				print("Mounted a component through queue way...");
				local u4 = u1.mount(p5.component, p4);
				p5.removeMaid:GiveTask(function()
					u1.unmount(u4);
				end);
			elseif p5.uiApp then
				l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):openApp(p5.uiApp.app, p5.uiApp.props, nil, p4);
				p5.removeMaid:GiveTask(function()
					if p5.uiApp then
						l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):closeApp(p5.uiApp.app);
					end;
				end);
			end;
			p2:updateLayoutOrder();
		end;
		for v9, v10 in ipairs(l__childElementQueue__7) do
			v8(v10, v9 - 1, l__childElementQueue__7);
		end;
	end);
	l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController"):mountActionBar({});
end;
local l__ActionBar__5 = v1.import(script, script.Parent, "action-bar").ActionBar;
local l__Players__6 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Players;
function v5.mountActionBar(p6, p7)
	if p6.actionBarTree then
		u1.unmount(p6.actionBarTree);
		p6.actionBarRef = u1.createRef();
	end;
	local v11 = {};
	local v12 = {};
	for v13, v14 in pairs(p7) do
		v12[v13] = v14;
	end;
	v11[#v11 + 1] = u1.createElement(l__ActionBar__5, v12);
	p6.actionBarTree = u1.mount(u1.createFragment({
		ActionBarScreenGui = u1.createElement("ScreenGui", {
			ResetOnSpawn = false
		}, v11)
	}), l__Players__6.LocalPlayer:WaitForChild("PlayerGui"));
	return p6.actionBarTree;
end;
function v5.unmountActionBar(p8)
	if p8.actionBarTree then
		u1.unmount(p8.actionBarTree);
		p8.actionBarRef = u1.createRef();
	end;
end;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v5.addApp(p9, p10, p11)
	local v15 = u7.new();
	local v16 = p9.actionBarRef;
	if v16 ~= nil then
		v16 = v16:getValue();
	end;
	if v16 then
		local v17 = l__Flamework__3.resolveDependency("@easy-games/game-core:client/controllers/app-controller@AppController"):openApp(p10, p11, nil, v16);
		p9:updateLayoutOrder();
		return v17;
	end;
	warn("The ActionBar has not been mounted. Make sure you've mounted the ActionBar component from game-core in your game.");
	table.insert(p9.childElementQueue, {
		uiApp = {
			app = p10, 
			props = p11
		}, 
		removeMaid = v15
	});
	v15:GiveTask(function()
		local l__childElementQueue__18 = p9.childElementQueue;
		local function v19(p12)
			local v20 = p12.uiApp;
			if v20 ~= nil then
				v20 = v20.app;
			end;
			return v20 ~= p10;
		end;
		local v21 = {};
		local v22 = 0;
		for v23, v24 in ipairs(l__childElementQueue__18) do
			if v19(v24, v23 - 1, l__childElementQueue__18) == true then
				v22 = v22 + 1;
				v21[v22] = v24;
			end;
		end;
		p9.childElementQueue = v21;
	end);
	return false;
end;
function v5.addComponent(p13, p14)
	local v25 = u7.new();
	local v26 = p13.actionBarRef;
	if v26 ~= nil then
		v26 = v26:getValue();
	end;
	if not v26 then
		warn("The ActionBar has not been mounted. Make sure you've mounted the ActionBar component from game-core in your game.");
		table.insert(p13.childElementQueue, {
			component = p14, 
			removeMaid = v25
		});
		v25:GiveTask(function()
			local l__childElementQueue__27 = p13.childElementQueue;
			local function v28(p15)
				return p15.component ~= p14;
			end;
			local v29 = {};
			local v30 = 0;
			for v31, v32 in ipairs(l__childElementQueue__27) do
				if v28(v32, v31 - 1, l__childElementQueue__27) == true then
					v30 = v30 + 1;
					v29[v30] = v32;
				end;
			end;
			p13.childElementQueue = v29;
		end);
		return v25;
	end;
	print("Mounted a component normal way...");
	local v33 = u1.mount(p14, v26);
	p13:updateLayoutOrder();
	v25:GiveTask(function()
		u1.unmount(v33);
	end);
	return v25;
end;
function v5.waitForActionBarAddComponent(p16, p17)
	local v34 = p16.actionBarRef;
	if v34 ~= nil then
		v34 = v34:getValue();
	end;
	if not v34 then
		p16.actionBarMounted:Wait();
	end;
	return u1.mount(p17, v34);
end;
function v5.updateLayoutOrder(p18)
	local v35 = p18.actionBarRef;
	if v35 ~= nil then
		v35 = v35:getValue();
	end;
	if v35 then
		local v36 = v35:GetChildren();
		local function v37(p19, p20)
			if p19:IsA("GuiObject") then
				if p18.childElementOrder == "ascending" then
					local v38 = -1;
				else
					v38 = 1;
				end;
				p19.LayoutOrder = v38 * p20;
			end;
		end;
		for v39, v40 in ipairs(v36) do
			v37(v40, v39 - 1, v36);
		end;
	end;
end;
l__Reflect__3.defineMetadata(v5, "identifier", "@easy-games/game-core:client/controllers/action-bar/action-bar-controller@ActionBarController");
l__Reflect__3.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.decorate(v5, "$:flamework@Controller", v4.Controller, { {} });
l__Reflect__3.decorate(v5, "$:flamework@External", v4.External, {});
return {
	ActionBarController = v5
};
