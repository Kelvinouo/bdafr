
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
if v3.RunService:IsStudio() then
	local v4 = 1;
else
	v4 = 0.1;
end;
local v5 = setmetatable({}, {
	__tostring = function()
		return "PerformanceMetricsService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
function v5.constructor(p1, p2)
	p1.metricsService = p2;
	p1.rng = Random.new();
	p1.playerJoinTimes = {};
	p1.modifiers = {};
end;
local l__GameCoreNetEvents__1 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "game-core-networking").GameCoreNetEvents;
local l__WatchPlayer__2 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "util", "player-util").WatchPlayer;
local l__Players__3 = v3.Players;
function v5.onStart(p3)
	l__GameCoreNetEvents__1.server.reportPerformanceMetrics:connect(function(p4, p5)
		return p3:onReceivedMetrics(p4, p5);
	end);
	l__WatchPlayer__2(function(p6)
		local l__playerJoinTimes__7 = p3.playerJoinTimes;
		l__playerJoinTimes__7[p6] = os.clock();
		return l__playerJoinTimes__7;
	end);
	l__Players__3.PlayerRemoving:Connect(function(p7)
		p3.playerJoinTimes[p7] = nil;
		return p3.playerJoinTimes[p7] ~= nil;
	end);
end;
function v5.registerMetricModifier(p8, p9)
	table.insert(p8.modifiers, p9);
end;
local l__default__4 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
local l__Metric__5 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "metrics", "metric").Metric;
function v5.onReceivedMetrics(p10, p11, p12)
	l__default__4.Info("Player {@Player} sent performance metrics");
	if v4 < p10.rng:NextNumber() then
		return nil;
	end;
	local v8 = p10.playerJoinTimes[p11];
	if v8 == 0 or v8 ~= v8 or not v8 then
		return nil;
	end;
	local v9 = l__Metric__5.new("client-performance"):tag("device-type", p12.deviceType):fieldFloat("time-in-server", os.clock() - v8):fieldFloat("fps", p12.fps):fieldFloat("lua-gc", p12.luaGc):fieldFloat("heartbeat-time", p12.heartbeatTime):fieldFloat("physics-step-time", p12.physicsStepTime):fieldFloat("total-memory", p12.totalMemory):fieldFloat("internal-memory", p12.internalMemory):fieldFloat("heap-memory", p12.heapMemory):fieldFloat("signal-memory", p12.signalMemory):fieldFloat("instance-memory", p12.instanceMemory):fieldFloat("physics-collision-memory", p12.physicsCollisionMemory):fieldFloat("physics-parts-memory", p12.physicsPartsMemory):fieldFloat("graphics-mesh-parts-memory", p12.graphicsMeshPartsMemory):fieldFloat("graphics-parts-memory", p12.graphicsPartsMemory):fieldFloat("graphics-particles-memory", p12.graphicsParticlesMemory):fieldFloat("graphics-texture-memory", p12.graphicsTextureMemory):fieldFloat("graphics-texture-character-memory", p12.graphicsTextureCharacterMemory):fieldFloat("sound-memory", p12.soundMemory):fieldFloat("gui-memory", p12.guiMemory):fieldFloat("animation-memory", p12.animationMemory):fieldFloat("data-receive", p12.dataReceive):fieldFloat("data-send", p12.dataSend):fieldFloat("physics-receive", p12.physicsReceive):fieldFloat("physics-send", p12.physicsSend);
	for v10, v11 in ipairs(p10.modifiers) do
		local v12 = v11(v9, p11);
		if not v12 then
			return l__default__4.Warn("Metric for player {@Player} dropped", p11);
		end;
		v9 = v12;
	end;
	p10.metricsService:publishMetric(v9);
end;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/game-core:server/services/metrics/performance-metrics-service@PerformanceMetricsService");
l__Reflect__2.defineMetadata(v5, "flamework:isExternal", true);
l__Reflect__2.defineMetadata(v5, "flamework:dependencies", { "@easy-games/game-core:server/services/metrics-service@MetricsService" });
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.defineMetadata(v5, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__2.defineMetadata(v5, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	PerformanceMetricsService = v5
};

