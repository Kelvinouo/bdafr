-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "AbilityService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
function v5.constructor(p1)
	p1.playerAbilityProgress = {};
	p1.playerAbilityUseTime = {};
end;
local l__WatchPlayer__1 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "util", "player-util").WatchPlayer;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__GameCoreSharedConfig__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "config", "game-core-shared-config").GameCoreSharedConfig;
local l__getAbilityMeta__4 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ability", "ability-meta-types").getAbilityMeta;
local l__GameCoreNetEvents__5 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "game-core-networking").GameCoreNetEvents;
local l__Workspace__6 = v4.Workspace;
local l__default__7 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
local l__GameCoreServerSyncEvents__8 = v1.import(script, script.Parent.Parent.Parent, "game-core-server-events").GameCoreServerSyncEvents;
function v5.onStart(p2)
	l__WatchPlayer__1(function(p3)
		local v7 = {};
		local v8, v9, v10 = ipairs(u2.keys(l__GameCoreSharedConfig__3.AbilityMetatable));
		while true do
			v8(v9, v10);
			if not v8 then
				break;
			end;
			local v11 = l__getAbilityMeta__4(v9).usableProgress;
			if v11 ~= nil then
				v11 = v11.initialProgress;
			end;
			local v12 = v11;
			if v12 == nil then
				v12 = 0;
			end;
			v7[v9] = v12;		
		end;
		p2.playerAbilityProgress[p3.UserId] = v7;
		p2.playerAbilityUseTime[p3.UserId] = {};
	end);
	l__GameCoreNetEvents__5.server.useAbility:connect(function(p4, p5, p6)
		local l__Character__13 = p4.Character;
		if not l__Character__13 then
			return nil;
		end;
		local v14 = l__getAbilityMeta__4(p5);
		if v14.cooldown then
			local v15 = p2.playerAbilityUseTime[p4.UserId][p5];
			if v15 ~= nil and l__Workspace__6:GetServerTimeNow() < v15 + v14.cooldown.duration then
				l__default__7.Debug("Ability is on cooldown!");
				return nil;
			end;
		elseif v14.usableProgress and p2:getProgress(p4, p5) < v14.usableProgress.progressNeededPerUse then
			l__default__7.Debug("Ability does not have enough progress!");
			return nil;
		end;
		local v16 = l__GameCoreServerSyncEvents__8.UseAbility:fire(l__Character__13, p5, p6);
		if v16:isCancelled() then
			return nil;
		end;
		l__GameCoreNetEvents__5.server.abilityUsed:broadcast(l__Character__13, p5, v16.extra);
		if v14.cooldown then
			p2.playerAbilityUseTime[p4.UserId][p5] = l__Workspace__6:GetServerTimeNow();
			return;
		end;
		if v14.usableProgress then
			p2:addProgress(p4, p5, -v14.usableProgress.progressNeededPerUse);
		end;
	end);
end;
function v5.setProgress(p7, p8, p9, p10, p11)
	local v17 = l__getAbilityMeta__4(p9);
	local v18 = v17.usableProgress.stacks;
	if v18 == nil then
		v18 = 1;
	end;
	p10 = math.clamp(p10, 0, v17.usableProgress.progressNeededPerUse * v18);
	p7.playerAbilityProgress[p8.UserId][p9] = p10;
	if p11 ~= true then
		l__GameCoreNetEvents__5.server.abilityProgressUpdate:fire(p8, p9, p10);
	end;
end;
function v5.addProgress(p12, p13, p14, p15, p16)
	p12:setProgress(p13, p14, p12:getProgress(p13, p14) + p15, p16);
end;
function v5.getProgress(p17, p18, p19)
	return p17.playerAbilityProgress[p18.UserId][p19];
end;
local u9 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__RunService__10 = v4.RunService;
function v5.registerProgressSource(p20, p21, p22, p23)
	local v19 = math.random();
	l__GameCoreNetEvents__5.server.registerAbilityProgressSource:fire(p21, p22, p23, v19);
	local v20 = u9.new();
	v20:GiveTask(l__RunService__10.Heartbeat:Connect(function(p24)
		p20:addProgress(p21, p22, p24 * p23, true);
	end));
	v20:GiveTask(function()
		l__GameCoreNetEvents__5.server.unregisterAbilityProgressSource:fire(p21, p22, v19);
	end);
	return v20;
end;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/game-core:server/services/ability/ability-service@AbilityService");
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v3.Service, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	AbilityService = v5
};
