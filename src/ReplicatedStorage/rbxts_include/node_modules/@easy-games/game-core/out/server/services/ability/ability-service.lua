-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v4 = setmetatable({}, {
	__tostring = function()
		return "AbilityService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
function v4.constructor(p1)
	p1.playerAbilityProgress = {};
	p1.playerAbilityUseTime = {};
end;
local l__WatchPlayer__1 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "util", "player-util").WatchPlayer;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__GameCoreSharedConfig__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "config", "game-core-shared-config").GameCoreSharedConfig;
local l__getAbilityMeta__4 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "ability", "ability-meta-types").getAbilityMeta;
local l__GameCoreNetEvents__5 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "game-core-networking").GameCoreNetEvents;
local l__Workspace__6 = v3.Workspace;
local l__default__7 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
local l__GameCoreServerSyncEvents__8 = v1.import(script, script.Parent.Parent.Parent, "game-core-server-events").GameCoreServerSyncEvents;
function v4.onStart(p2)
	l__WatchPlayer__1(function(p3)
		local v6 = {};
		local v7, v8, v9 = ipairs(u2.keys(l__GameCoreSharedConfig__3.AbilityMetatable));
		while true do
			local v10, v11 = v7(v8, v9);
			if not v10 then
				break;
			end;
			local v12 = l__getAbilityMeta__4(v11).usableProgress;
			if v12 ~= nil then
				v12 = v12.initialProgress;
			end;
			local v13 = v12;
			if v13 == nil then
				v13 = 0;
			end;
			v6[v11] = v13;		
		end;
		p2.playerAbilityProgress[p3.UserId] = v6;
		p2.playerAbilityUseTime[p3.UserId] = {};
	end);
	l__GameCoreNetEvents__5.server.useAbility:connect(function(p4, p5, p6)
		local l__Character__14 = p4.Character;
		if not l__Character__14 then
			return nil;
		end;
		local v15 = l__getAbilityMeta__4(p5);
		if v15.cooldown then
			local v16 = p2.playerAbilityUseTime[p4.UserId][p5];
			if v16 ~= nil and l__Workspace__6:GetServerTimeNow() < v16 + v15.cooldown.duration then
				l__default__7.Debug("Ability is on cooldown!");
				return nil;
			end;
		elseif v15.usableProgress and p2:getProgress(p4, p5) < v15.usableProgress.progressNeededPerUse then
			l__default__7.Debug("Ability does not have enough progress!");
			return nil;
		end;
		local v17 = l__GameCoreServerSyncEvents__8.UseAbility:fire(l__Character__14, p5, p6);
		if v17:isCancelled() then
			return nil;
		end;
		l__GameCoreNetEvents__5.server.abilityUsed:broadcast(l__Character__14, p5, v17.extra);
		if v15.cooldown then
			p2.playerAbilityUseTime[p4.UserId][p5] = l__Workspace__6:GetServerTimeNow();
			return;
		end;
		if v15.usableProgress then
			p2:addProgress(p4, p5, -v15.usableProgress.progressNeededPerUse);
		end;
	end);
end;
function v4.setProgress(p7, p8, p9, p10, p11)
	local v18 = l__getAbilityMeta__4(p9);
	local v19 = v18.usableProgress.stacks;
	if v19 == nil then
		v19 = 1;
	end;
	p10 = math.clamp(p10, 0, v18.usableProgress.progressNeededPerUse * v19);
	p7.playerAbilityProgress[p8.UserId][p9] = p10;
	if p11 ~= true then
		l__GameCoreNetEvents__5.server.abilityProgressUpdate:fire(p8, p9, p10);
	end;
end;
function v4.addProgress(p12, p13, p14, p15, p16)
	p12:setProgress(p13, p14, p12:getProgress(p13, p14) + p15, p16);
end;
function v4.getProgress(p17, p18, p19)
	return p17.playerAbilityProgress[p18.UserId][p19];
end;
local u9 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__RunService__10 = v3.RunService;
function v4.registerProgressSource(p20, p21, p22, p23)
	local v20 = math.random();
	l__GameCoreNetEvents__5.server.registerAbilityProgressSource:fire(p21, p22, p23, v20);
	local v21 = u9.new();
	v21:GiveTask(l__RunService__10.Heartbeat:Connect(function(p24)
		p20:addProgress(p21, p22, p24 * p23, true);
	end));
	v21:GiveTask(function()
		l__GameCoreNetEvents__5.server.unregisterAbilityProgressSource:fire(p21, p22, v20);
	end);
	return v21;
end;
l__Reflect__2.defineMetadata(v4, "identifier", "@easy-games/game-core:server/services/ability/ability-service@AbilityService");
l__Reflect__2.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__2.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	AbilityService = v4
};
