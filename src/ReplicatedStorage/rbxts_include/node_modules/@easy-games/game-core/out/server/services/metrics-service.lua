-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "MetricsService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
function v5.constructor(p1)
	p1.LINES = {};
	p1.closing = false;
end;
local l__GameCoreServerConfig__1 = v1.import(script, script.Parent.Parent, "config", "game-core-server-config").GameCoreServerConfig;
local l__RunService__2 = v4.RunService;
function v5.onStart(p2)
	local l__METRIC_WRITE_URL__7 = l__GameCoreServerConfig__1.MetricsConfiguration.METRIC_WRITE_URL;
	if l__METRIC_WRITE_URL__7 == "" or not l__METRIC_WRITE_URL__7 then
		warn("No METRIC_WRITE_URL provided. Metrics will not be pushed to Influx.");
		return nil;
	end;
	if not l__GameCoreServerConfig__1.Production then
		return nil;
	end;
	game:BindToClose(function()
		if l__RunService__2:IsStudio() then
			return nil;
		end;
		p2.closing = true;
		while true do
			local v8, v9 = v1.try(function()
				p2:publishMetrics();
				return v1.TRY_BREAK;
			end, function()
				wait(v5.METRIC_SHUTDOWN_ERROR_DELAY);
			end);
			if v8 then
				break;
			end;		
		end;
	end);
	task.spawn(function()
		while not p2.closing do
			v1.try(function()
				p2:publishMetrics();
			end, function(p3)
				print("Error whilst publishing metrics: ", p3);
			end);
			wait(v5.METRIC_FLUSH_PERIOD);		
		end;
	end);
end;
local l__HttpService__3 = v4.HttpService;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v5.publishMetrics(p4)
	local v10 = #p4.LINES;
	if v10 == 0 then
		return nil;
	end;
	local v11 = l__HttpService__3:RequestAsync({
		Url = l__GameCoreServerConfig__1.MetricsConfiguration.METRIC_WRITE_URL, 
		Method = "POST", 
		Body = table.concat(p4.LINES, "\n"), 
		Headers = {
			Authorization = "Token " .. l__GameCoreServerConfig__1.MetricsConfiguration.METRIC_AUTH_TOKEN
		}
	});
	if v11.StatusCode ~= v5.METRIC_SUCCESS_CODE then
		warn("Body: " .. u4(v11));
		error(v11.StatusMessage);
	end;
	if not (v10 < #p4.LINES) then
		table.clear(p4.LINES);
		return;
	end;
	local v12 = {};
	table.move(p4.LINES, v10 + 1, #p4.LINES - 1 + 1, 1, v12);
	p4.LINES = v12;
end;
function v5.publishMetric(p5, p6)
	if v5.METRIC_QUEUE_LIMIT <= #p5.LINES then
		print("Metric queue limit hit!");
		return nil;
	end;
	table.insert(p5.LINES, (p6:toLineProtocol()));
end;
v5.METRIC_SUCCESS_CODE = 204;
v5.METRIC_FLUSH_PERIOD = 60;
v5.METRIC_QUEUE_LIMIT = 1024;
v5.METRIC_SHUTDOWN_ERROR_DELAY = 0.1;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/game-core:server/services/metrics-service@MetricsService");
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v3.Service, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	MetricsService = v5
};
