-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v4 = setmetatable({}, {
	__tostring = function()
		return "MetricsService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
function v4.constructor(p1)
	p1.LINES = {};
	p1.closing = false;
end;
local l__GameCoreServerConfig__1 = v1.import(script, script.Parent.Parent, "config", "game-core-server-config").GameCoreServerConfig;
local l__RunService__2 = v3.RunService;
function v4.onStart(p2)
	local l__METRIC_WRITE_URL__6 = l__GameCoreServerConfig__1.MetricsConfiguration.METRIC_WRITE_URL;
	if l__METRIC_WRITE_URL__6 == "" or not l__METRIC_WRITE_URL__6 then
		warn("No METRIC_WRITE_URL provided. Metrics will not be pushed to Influx.");
		return nil;
	end;
	if not l__GameCoreServerConfig__1.Production then
		return nil;
	end;
	game:BindToClose(function()
		if l__RunService__2:IsStudio() then
			return nil;
		end;
		p2.closing = true;
		while true do
			local v7, v8 = v1.try(function()
				p2:publishMetrics();
				return v1.TRY_BREAK;
			end, function()
				wait(v4.METRIC_SHUTDOWN_ERROR_DELAY);
			end);
			if v7 then
				break;
			end;		
		end;
	end);
	task.spawn(function()
		while not p2.closing do
			v1.try(function()
				p2:publishMetrics();
			end, function(p3)
				print("Error whilst publishing metrics: ", p3);
			end);
			wait(v4.METRIC_FLUSH_PERIOD);		
		end;
	end);
end;
local l__HttpService__3 = v3.HttpService;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v4.publishMetrics(p4)
	local v9 = #p4.LINES;
	if v9 == 0 then
		return nil;
	end;
	local v10 = l__HttpService__3:RequestAsync({
		Url = l__GameCoreServerConfig__1.MetricsConfiguration.METRIC_WRITE_URL, 
		Method = "POST", 
		Body = table.concat(p4.LINES, "\n"), 
		Headers = {
			Authorization = "Token " .. l__GameCoreServerConfig__1.MetricsConfiguration.METRIC_AUTH_TOKEN
		}
	});
	if v10.StatusCode ~= v4.METRIC_SUCCESS_CODE then
		warn("Body: " .. u4(v10));
		error(v10.StatusMessage);
	end;
	if not (v9 < #p4.LINES) then
		table.clear(p4.LINES);
		return;
	end;
	local v11 = {};
	table.move(p4.LINES, v9 + 1, #p4.LINES - 1 + 1, 1, v11);
	p4.LINES = v11;
end;
function v4.publishMetric(p5, p6)
	if v4.METRIC_QUEUE_LIMIT <= #p5.LINES then
		print("Metric queue limit hit!");
		return nil;
	end;
	table.insert(p5.LINES, (p6:toLineProtocol()));
end;
v4.METRIC_SUCCESS_CODE = 204;
v4.METRIC_FLUSH_PERIOD = 60;
v4.METRIC_QUEUE_LIMIT = 1024;
v4.METRIC_SHUTDOWN_ERROR_DELAY = 0.1;
l__Reflect__2.defineMetadata(v4, "identifier", "@easy-games/game-core:server/services/metrics-service@MetricsService");
l__Reflect__2.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__2.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	MetricsService = v4
};
