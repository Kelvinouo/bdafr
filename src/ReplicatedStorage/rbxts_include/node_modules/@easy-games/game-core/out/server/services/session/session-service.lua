-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local l__Service__3 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Service;
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "SessionService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
function v5.constructor(p1)
	p1.playerSessionStoreDataLoaded = u1.new();
	p1.sessionStoreData = {};
	p1.sessionData = {};
end;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "profileservice").src);
local l__WatchPlayer__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "util", "player-util").WatchPlayer;
local l__Players__4 = v4.Players;
local l__Workspace__5 = v4.Workspace;
local l__GameCoreServerSyncEvents__6 = v1.import(script, script.Parent.Parent.Parent, "game-core-server-events").GameCoreServerSyncEvents;
local l__GameCoreServerConfig__7 = v1.import(script, script.Parent.Parent.Parent, "config", "game-core-server-config").GameCoreServerConfig;
function v5.onStart(p2)
	p2.sessionStore = u2.GetProfileStore("session_data", p2:createInitialSessionData());
	l__WatchPlayer__3(function(p3, p4)
		local v7 = p2.sessionStore:LoadProfileAsync(tostring(p3.UserId), "ForceLoad");
		if not v7 then
			p3:Kick("Failed to load session profile.");
			return nil;
		end;
		v7:ListenToRelease(function()
			p3:Kick();
		end);
		if p3.Parent ~= l__Players__4 then
			v7:Release();
		end;
		p2.sessionStoreData[p3] = v7;
		v7:Reconcile();
		local v8 = not v7.Data.previousSession or l__Workspace__5:GetServerTimeNow() - v7.Data.previousSession.lastTransferred > 300;
		if v8 then
			local l__Data__9 = v7.Data;
			l__Data__9.sessions = l__Data__9.sessions + 1;
			v7.Data.previousSession = false;
		end;
		p2.playerSessionStoreDataLoaded:Fire(p3, v7);
		p2.sessionData[p3] = p2:getSessionData(p3, v7.Data.previousSession);
		v7.Data.previousSession = false;
		if v8 then
			l__GameCoreServerSyncEvents__6.SessionStarted:fire(p3, p2:getSessionData(p3));
		end;
	end);
	l__Players__4.PlayerRemoving:Connect(function(p5)
		local v10 = p2.sessionStoreData[p5];
		if not v10 then
			return nil;
		end;
		if not v10.Data.previousSession then
			l__GameCoreServerSyncEvents__6.SessionEnding:fire(p5, p2:getSessionData(p5));
		end;
		v10:Release();
	end);
	l__WatchPlayer__3(function(p6, p7)
		local u8 = false;
		p7:GiveTask(p6.OnTeleport:Connect(function(p8, p9)
			local v11 = nil;
			v11 = p2:waitForSessionStoreData(p6);
			if p8 == Enum.TeleportState.Failed then
				v11.Data.previousSession = false;
				p2:getSessionData(p6).lastTransferred = 0;
				u8 = false;
				return nil;
			end;
			if table.find(l__GameCoreServerConfig__7.SessionPlaceIds, p9) == nil then
				return nil;
			end;
			if not u8 then
				local v12 = l__GameCoreServerSyncEvents__6.SessionTransferring:fire(p6, p2:getSessionData(p6));
				v12.sessionData.lastTransferred = l__Workspace__5:GetServerTimeNow();
				v11.Data.previousSession = v12.sessionData;
				u8 = true;
			end;
		end));
	end);
end;
local u9 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__MapUtil__10 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
function v5.getSessionData(p10, p11, p12)
	local v13 = {};
	local v14 = p10:waitForSessionStoreData(p11).Data.sessions;
	if v14 == nil then
		v14 = 1;
	end;
	v13.sessionNumber = v14;
	v13.sessionStartTime = l__Workspace__5:GetServerTimeNow();
	v13.lastTransferred = 0;
	return u9.assign(u9.deepCopy(p12 or {}), (l__MapUtil__10.getOrCreate(p10.sessionData, p11, (u9.assign(v13, p12)))));
end;
function v5.setSessionData(p13, p14, p15)
	p13.sessionData[p14] = p15;
end;
function v5.createInitialSessionData(p16)
	return {
		sessions = 0
	};
end;
function v5.waitForSessionStoreData(p17, p18)
	if p17.sessionStoreData[p18] ~= nil then
		return p17.sessionStoreData[p18];
	end;
	local v15 = nil;
	while true do
		local v16 = { p17.playerSessionStoreDataLoaded:Wait() };
		if v16[1] == p18 then
			v15 = v16[2];
		end;
		if v15 ~= nil then
			break;
		end;	
	end;
	return v15;
end;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/game-core:server/services/session/session-service@SessionService");
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", l__Service__3, { {} });
return {
	SessionService = v5
};
