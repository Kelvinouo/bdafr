-- Script Hash: 5d2b8821772b9b6726c26b328a439c909bc396e0a7fb0f43f34ca005b4c3c6b399ef09dca345bf0fecda31ddf230070f
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local l__Service__3 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Service;
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "SessionService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
function v5.constructor(p1)
	p1.playerSessionStoreDataLoaded = u1.new();
	p1.sessionStoreData = {};
	p1.sessionData = {};
end;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "profileservice").src);
local l__WatchPlayer__3 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "util", "player-util").WatchPlayer;
local l__Players__4 = v4.Players;
local l__GameCoreServerSyncEvents__5 = v1.import(script, script.Parent.Parent.Parent, "game-core-server-events").GameCoreServerSyncEvents;
local l__GameCoreServerConfig__6 = v1.import(script, script.Parent.Parent.Parent, "config", "game-core-server-config").GameCoreServerConfig;
function v5.onStart(p2)
	p2.sessionStore = u2.GetProfileStore("session_data", p2:createInitialSessionData());
	l__WatchPlayer__3(function(p3, p4)
		local v7 = p2.sessionStore:LoadProfileAsync(tostring(p3.UserId), "ForceLoad");
		if not v7 then
			p3:Kick("Failed to load session profile.");
			return nil;
		end;
		v7:ListenToRelease(function()
			p3:Kick();
		end);
		if p3.Parent ~= l__Players__4 then
			v7:Release();
		end;
		p2.sessionStoreData[p3] = v7;
		v7:Reconcile();
		local v8 = not v7.Data.previousSession;
		if v8 then
			local l__Data__9 = v7.Data;
			l__Data__9.sessions = l__Data__9.sessions + 1;
		end;
		p2.playerSessionStoreDataLoaded:Fire(p3, v7);
		p2.sessionData[p3] = p2:getSessionData(p3, v7.Data.previousSession);
		v7.Data.previousSession = nil;
		if v8 then
			l__GameCoreServerSyncEvents__5.SessionStarted:fire(p3, p2:getSessionData(p3));
		end;
	end);
	l__WatchPlayer__3(function(p5, p6)
		p6:GiveTask(l__Players__4.PlayerRemoving:Connect(function(p7)
			if p7 ~= p5 then
				return nil;
			end;
			local v10 = p2.sessionStoreData[p5];
			if not v10 then
				return nil;
			end;
			if not v10.Data.previousSession then
				l__GameCoreServerSyncEvents__5.SessionEnding:fire(p5, p2:getSessionData(p5));
			end;
		end));
		local u7 = false;
		p6:GiveTask(p5.OnTeleport:Connect(function(p8, p9)
			local v11 = nil;
			v11 = p2:waitForSessionStoreData(p5);
			if p8 == Enum.TeleportState.Failed then
				v11.Data.previousSession = nil;
				u7 = false;
				return nil;
			end;
			if table.find(l__GameCoreServerConfig__6.SessionPlaceIds, p9) == nil then
				return nil;
			end;
			if not u7 then
				v11.Data.previousSession = l__GameCoreServerSyncEvents__5.SessionTransferring:fire(p5, p2:getSessionData(p5)).sessionData;
				u7 = true;
			end;
		end));
	end);
	l__Players__4.PlayerRemoving:Connect(function(p10)
		local v12 = p2.sessionStoreData[p10];
		if not v12 then
			return nil;
		end;
		v12:Release();
	end);
end;
local u8 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
local l__Workspace__9 = v4.Workspace;
local l__MapUtil__10 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
function v5.getSessionData(p11, p12, p13)
	local v13 = {};
	local v14 = p11:waitForSessionStoreData(p12).Data.sessions;
	if v14 == nil then
		v14 = 1;
	end;
	v13.sessionNumber = v14;
	v13.sessionStartTime = l__Workspace__9:GetServerTimeNow();
	return u8.assign(u8.deepCopy(p13 or {}), (l__MapUtil__10.getOrCreate(p11.sessionData, p12, (u8.assign(v13, p13)))));
end;
function v5.setSessionData(p14, p15, p16)
	p14.sessionData[p15] = p16;
end;
function v5.createInitialSessionData(p17)
	return {
		sessions = 0
	};
end;
function v5.waitForSessionStoreData(p18, p19)
	if p18.sessionStoreData[p19] ~= nil then
		return p18.sessionStoreData[p19];
	end;
	local v15 = nil;
	while true do
		local v16 = { p18.playerSessionStoreDataLoaded:Wait() };
		if v16[1] == p19 then
			v15 = v16[2];
		end;
		if v15 ~= nil then
			break;
		end;	
	end;
	return v15;
end;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/game-core:server/services/session/session-service@SessionService");
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", l__Service__3, { {} });
return {
	SessionService = v5
};
