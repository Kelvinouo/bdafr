-- Script Hash: 51ae79993c516768d784680d827bd6a712ff51f49351e685bbf549ac8e0b13fd45278cef222ec78a164bb453b239d8b5
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v3 = v2.Component:extend("ImageGrid");
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v3.init(p1, p2)
	p1.maid = u1.new();
	p1.scale = 1;
	p1.containerRef = v2.createRef();
	local v4 = {};
	local v5 = p2.CurrentIndex;
	if v5 == nil then
		v5 = 0;
	end;
	v4.currentIndex = v5;
	p1:setState(v4);
end;
function v3.updateContentSize(p3, p4)
	local v6 = p3.containerRef:getValue();
	if not v6 then
		return nil;
	end;
	v6.CanvasSize = UDim2.new(1, 0, 0, p4.Y / p3.scale * 1.05);
end;
function v3.updateContainerSize(p5, p6, p7, p8)
	if not p5.props.UpdateContainerSize then
		return nil;
	end;
	local v7 = p5.props.Size;
	if v7 ~= nil then
		v7 = v7.Y.Offset;
	end;
	if v7 == 0 or v7 ~= v7 or not v7 then
		if p5.props.ImageSize.Y.Offset < p7.Y then
			local v8 = p7.Y * p8;
		else
			v8 = p5.props.ImageSize.Y.Offset + 20 * p8;
		end;
		p6.Size = UDim2.new(p6.Size.X.Scale, p6.Size.X.Offset, 0, v8);
		return;
	end;
	if p5.props.ImageSize.Y.Offset < p6.Size.Y.Offset then
		local v9 = p6.Size.Y.Offset * p8;
	else
		v9 = p5.props.ImageSize.Y.Offset + 20 * p8;
	end;
	p6.Size = UDim2.new(p6.Size.X.Scale, p6.Size.X.Offset, 0, v9);
end;
local l__GetUIScaleAncestors__2 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "util", "ui-utils").GetUIScaleAncestors;
function v3.didUpdate(p9, p10, p11)
	local v10 = nil;
	local v11 = p9.containerRef:getValue();
	local v12 = v11:FindFirstChildWhichIsA("UIGridStyleLayout");
	local v13 = l__GetUIScaleAncestors__2(v12);
	local function v14(p12)
		return p12.Scale;
	end;
	local v15 = table.create(#v13);
	for v16, v17 in ipairs(v13) do
		v15[v16] = v14(v17, v16 - 1, v13);
	end;
	v10 = 1;
	local function v18(p13, p14)
		return p13 * p14;
	end;
	for v19 = 1, #v15 do
		v10 = v18(v10, v15[v19], v19 - 1, v15);
	end;
	p9:updateContainerSize(v11, v12.AbsoluteContentSize, local v20);
end;
function v3.didMount(p15)
	local v21 = nil;
	local v22 = p15.containerRef:getValue();
	local v23 = v22:FindFirstChildWhichIsA("UIGridStyleLayout");
	local v24 = l__GetUIScaleAncestors__2(v23);
	local function v25(p16)
		return p16.Scale;
	end;
	local v26 = table.create(#v24);
	for v27, v28 in ipairs(v24) do
		v26[v27] = v25(v28, v27 - 1, v24);
	end;
	v21 = 1;
	local function v29(p17, p18)
		return p17 * p18;
	end;
	for v30 = 1, #v26 do
		v21 = v29(v21, v26[v30], v30 - 1, v26);
	end;
	v1.Promise.delay(0.1):andThen(function()
		local u3 = l__GetUIScaleAncestors__2(v23);
		local function v31()
			local v32 = nil;
			local function v33(p19)
				return p19.Scale;
			end;
			local v34 = table.create(#u3);
			for v35, v36 in ipairs(u3) do
				v34[v35] = v33(v36, v35 - 1, u3);
			end;
			v32 = 1;
			local function v37(p20, p21)
				return p20 * p21;
			end;
			for v38 = 1, #v34 do
				v32 = v37(v32, v34[v38], v38 - 1, v34);
			end;
			p15.scale = local v39;
		end;
		v31();
		p15:updateContentSize(v23.AbsoluteContentSize);
		for v40, v41 in ipairs(u3) do
			p15.maid:GiveTask(v41:GetPropertyChangedSignal("Scale"):Connect(v31));
		end;
	end);
	p15:updateContainerSize(v22, v23.AbsoluteContentSize, local v42);
	p15:updateContentSize(v23.AbsoluteContentSize);
	p15.maid:GiveTask(v23:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		p15:updateContentSize(v23.AbsoluteContentSize);
	end));
end;
local l__GameTheme__4 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "ui", "game-theme").GameTheme;
local l__GridImage__5 = v1.import(script, script, "image").GridImage;
function v3.render(p22)
	local l__Images__43 = p22.props.Images;
	local function v44(p23, p24)
		local v45 = {
			TarmacData = p23.asset and nil
		};
		local v46 = p23.imageId;
		if v46 == nil then
			v46 = nil;
		end;
		v45.ImageId = v46;
		v45.ImageBackgroundColor = l__GameTheme__4.backgroundTertiary;
		v45.AltText = p23.alt;
		v45.AltFont = p23.altFont;
		v45.AltColor = p23.altColor;
		v45.Index = p24;
		v45.CurrentIndex = p22.state.currentIndex;
		function v45.OnClick()
			p22:setState({
				currentIndex = p24
			});
			if p22.props.OnSelectionChange ~= nil then
				p22.props.OnSelectionChange(p23.id);
			end;
		end;
		v45.ToFriendlyCase = p22.props.ToFriendlyCase;
		return v2.createElement(l__GridImage__5, v45);
	end;
	local v47 = table.create(#l__Images__43);
	for v48, v49 in ipairs(l__Images__43) do
		v47[v48] = v44(v49, v48 - 1, l__Images__43);
	end;
	local v50 = {
		AnchorPoint = p22.props.AnchorPoint, 
		Position = p22.props.Position, 
		Size = p22.props.Size, 
		CanvasSize = UDim2.new(), 
		BackgroundTransparency = 1, 
		BorderSizePixel = 0, 
		ScrollBarThickness = 8, 
		ScrollBarImageColor3 = Color3.fromRGB(172, 176, 255), 
		ScrollingDirection = p22.props.ScrollingDirection, 
		[v2.Ref] = p22.containerRef
	};
	local v51 = { v2.createElement("UISizeConstraint", {
			MaxSize = Vector2.new(math.huge, p22.props.MaxSize)
		}), v2.createElement("UIPadding", {
			PaddingRight = UDim.new(0, 10)
		}), v2.createElement("UIGridLayout", {
			CellSize = p22.props.ImageSize, 
			CellPadding = UDim2.fromOffset(8, 8), 
			FillDirection = Enum.FillDirection.Horizontal, 
			HorizontalAlignment = Enum.HorizontalAlignment.Left, 
			VerticalAlignment = Enum.VerticalAlignment.Top, 
			SortOrder = Enum.SortOrder.LayoutOrder
		}) };
	local v52 = #v51;
	for v53, v54 in ipairs(v47) do
		v51[v52 + v53] = v54;
	end;
	return v2.createFragment({
		ImageGrid = v2.createElement("ScrollingFrame", v50, v51)
	});
end;
function v3.willUnmount(p25)
	p25.maid:DoCleaning();
end;
v3.defaultProps = {
	ImageAspectRatio = 1.5, 
	ImageSize = UDim2.new(0.317, 0, 0, 90), 
	MaxSize = math.huge, 
	ToFriendlyCase = true, 
	UpdateContainerSize = true
};
return {
	ImageGrid = v3
};
