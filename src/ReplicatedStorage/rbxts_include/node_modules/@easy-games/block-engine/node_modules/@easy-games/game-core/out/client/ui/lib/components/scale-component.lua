-- Script Hash: 75c37af5fb3402b76a8c61f3dbf287c209dc5a92e27f53995144674e260ffdc3ec30e219cf3aa99979de5accc9586522
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v3 = v2.Component:extend("ScaleComponentBase");
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v3.init(p1)
	p1._maid = u1.new();
	p1.ScaleRef = v2.createRef();
end;
local l__CurrentCamera__2 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace.CurrentCamera;
function v3.UpdateScale(p2)
	local v4 = p2.ScaleRef:getValue();
	local l__Parent__5 = v4.Parent;
	local l__props__6 = p2.props;
	local v7 = l__props__6.ScreenPadding;
	if v7 == nil then
		v7 = Vector2.new(0, 0);
	end;
	local v8 = l__props__6.MaximumSize;
	if v8 == nil then
		v8 = Vector2.new(l__Parent__5.AbsoluteSize.X, l__Parent__5.AbsoluteSize.Y);
	end;
	local v9 = l__props__6.PowerRelationshipPastMaximum;
	local v10 = l__props__6.ScaleUp;
	if v10 == nil then
		v10 = true;
	end;
	local v11 = l__Parent__5.AbsoluteSize / v4.Scale;
	local v12 = l__CurrentCamera__2.ViewportSize - v7;
	if v11.X / v11.Y < v12.X / v12.Y then
		local v13 = math.min(v8.Y, v12.Y);
		if v9 ~= nil then
			v13 = math.min(v12.Y, v13 + (v12.Y - v13) ^ v9);
		end;
		if not v10 and v11.Y < v12.Y then
			local v14 = 1;
		else
			v14 = v13 / v12.Y / (v11.Y / v12.Y);
		end;
	else
		local v15 = math.min(v8.X, v12.X);
		if v9 ~= nil then
			v15 = math.min(v12.X, v15 + (v12.X - v15) ^ v9);
		end;
		if not v10 and v11.X < v12.X then
			v14 = 1;
		else
			v14 = v15 / v12.X / (v11.X / v12.X);
		end;
	end;
	if v14 ~= v4.Scale then
		v4.Scale = v14;
	end;
end;
local u3 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent, "shared", "object", "expire-list").ExpireList.new(0.25);
function v3.didMount(p3)
	local v16 = nil;
	local v17 = p3.ScaleRef:getValue();
	local v18 = v17;
	if v18 ~= nil then
		v18 = v18.Parent;
	end;
	v16 = v18;
	if not v17 or not v16 then
		return warn("ScaleRef nil in didMount, how?");
	end;
	if not v16:IsA("GuiObject") then
		return warn("Container invalid type, how?");
	end;
	p3:UpdateScale();
	p3._maid:GiveTask(l__CurrentCamera__2:GetPropertyChangedSignal("ViewportSize"):Connect(function()
		if u3:has("UpdateScale") then
			return nil;
		end;
		u3:add("UpdateScale");
		p3:UpdateScale();
	end));
end;
function v3.render(p4)
	return v2.createFragment({
		ScaleComponent = v2.createElement("UIScale", {
			[v2.Ref] = p4.ScaleRef
		})
	});
end;
function v3.willUnmount(p5)
	p5._maid:DoCleaning();
end;
return {
	ScaleComponent = v1.import(script, v1.getModule(script, "@rbxts", "roact-rodux").src).connect(function(p6, p7)
		return p7;
	end, function(p8, p9)
		return {};
	end)(v3)
};
