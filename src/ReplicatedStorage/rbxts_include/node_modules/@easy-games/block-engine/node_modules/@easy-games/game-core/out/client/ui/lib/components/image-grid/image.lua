-- Script Hash: 47bf9a6c260cd72d466af08f2f131d9bf452b2f6462cef93e2669853d04b575081b9a3a7f9a0d5cddb465be917615c34
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "flipper").src);
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local v4 = v3.Component:extend("GridImage");
local l__SingleMotor__1 = v2.SingleMotor;
local l__BindingFromMotor__2 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent.Parent, "shared", "util", "binding-util").BindingFromMotor;
function v4.init(p1, p2)
	p1.selectedMotor = l__SingleMotor__1.new(0);
	p1.interactionMotor = l__SingleMotor__1.new(0);
	p1.selectedBinding = l__BindingFromMotor__2(p1.selectedMotor);
	p1.interactionBinding = l__BindingFromMotor__2(p1.interactionMotor);
	if p2.CurrentIndex == p2.Index then
		local v5 = 1;
	else
		v5 = 0;
	end;
	p1:setSelected(v5);
end;
local l__Spring__3 = v2.Spring;
function v4.setSelected(p3, p4)
	p3.selectedMotor:setGoal(l__Spring__3.new(p4, {
		frequency = 8, 
		dampingRatio = 1
	}));
end;
function v4.setInteraction(p5, p6)
	p5.interactionMotor:setGoal(l__Spring__3.new(p6, {
		frequency = 9, 
		dampingRatio = 0.9
	}));
end;
function v4.didUpdate(p7, p8)
	if p8.CurrentIndex == p7.props.CurrentIndex then
		return nil;
	end;
	if p7.props.CurrentIndex == p7.props.Index then
		local v6 = 1;
	else
		v6 = 0;
	end;
	p7:setSelected(v6);
end;
local function u4(p9, p10, p11)
	return p10 + (p11 - p10) * ((p9 - 0) / 1);
end;
local u5 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent.Parent, "shared", "tarmac", "tarmac-helpers").GetTarmacAsset("CheckIcon");
local function u6(p12)
	local v7 = "";
	local v8 = 1;
	local v9 = false;
	while true do
		if v9 then
			v8 = v8 + 1;
		else
			v9 = true;
		end;
		if not (v8 <= #p12) then
			break;
		end;
		local v10 = string.sub(p12, v8, v8);
		local v11 = false;
		if v8 > 1 then
			v11 = false;
			if v10 == string.upper(v10) then
				v11 = " " .. v10;
			end;
		end;
		if v11 == "" or not v11 then
			v11 = v10;
		end;
		v7 = v7 .. v11;	
	end;
	return v7;
end;
local l__ColorUtil__7 = v1.import(script, script.Parent.Parent.Parent.Parent.Parent.Parent, "shared", "util", "color-util").ColorUtil;
function v4.render(p13)
	if p13.props.CurrentIndex ~= p13.props.Index then

	end;
	local v12 = {
		Size = UDim2.fromScale(0, 1), 
		BackgroundTransparency = 0, 
		BackgroundColor3 = p13.props.ImageBackgroundColor, 
		LayoutOrder = p13.props.Index, 
		BorderSizePixel = 0
	};
	local v13 = p13.props.TarmacData;
	if v13 ~= nil then
		v13 = v13.Image;
	end;
	local v14 = v13;
	if v14 == nil then
		v14 = p13.props.ImageId;
	end;
	v12.Image = v14;
	local v15 = p13.props.TarmacData;
	if v15 ~= nil then
		v15 = v15.ImageRectOffset;
	end;
	v12.ImageRectOffset = v15;
	local v16 = p13.props.TarmacData;
	if v16 ~= nil then
		v16 = v16.ImageRectSize;
	end;
	v12.ImageRectSize = v16;
	v12.AutoButtonColor = false;
	v12.ScaleType = Enum.ScaleType.Crop;
	v12[v3.Event.Activated] = function()
		return p13.props.OnClick();
	end;
	v12[v3.Event.MouseEnter] = function()
		return p13:setInteraction(0.3);
	end;
	v12[v3.Event.MouseButton1Down] = function()
		return p13:setInteraction(0.8);
	end;
	v12[v3.Event.MouseButton1Up] = function()
		return p13:setInteraction(0.3);
	end;
	v12[v3.Event.MouseLeave] = function()
		return p13:setInteraction(0);
	end;
	local l__AltText__17 = p13.props.AltText;
	local v18 = { v3.createElement("UIScale", {
			Scale = p13.interactionBinding:map(function(p14)
				return u4(p14, 1, 0.9);
			end)
		}), v3.createElement("UICorner", {
			CornerRadius = UDim.new(0, 6)
		}) };
	if l__AltText__17 ~= "" and l__AltText__17 then
		local v19 = {};
		local v20 = {
			AnchorPoint = Vector2.new(0.5, 1), 
			Position = UDim2.new(0.5, 0, 1, -10), 
			Size = UDim2.new(1, 0, 0, 16), 
			BackgroundTransparency = 1
		};
		if p13.props.ToFriendlyCase then
			local v21 = u6(p13.props.AltText);
		else
			v21 = p13.props.AltText;
		end;
		v20.Text = "<b>" .. v21 .. "</b>";
		v20.TextWrapped = true;
		v20.RichText = true;
		v20.TextColor3 = p13.props.AltColor or l__ColorUtil__7.WHITE;
		v20.Font = p13.props.AltFont or Enum.Font.Roboto;
		v20.TextSize = 14;
		v19[1] = v3.createElement("UICorner", {
			CornerRadius = UDim.new(0, 5)
		});
		v19[2] = v3.createElement("UIGradient", {
			Color = ColorSequence.new(Color3.fromRGB(86, 99, 118)), 
			Transparency = p13.selectedBinding:map(function(p15)
				return NumberSequence.new({ NumberSequenceKeypoint.new(0, u4(p15, 0.1, 0.5)), NumberSequenceKeypoint.new(0.35, u4(p15, 1, 0.5)), NumberSequenceKeypoint.new(1, u4(p15, 1, 0.5)) });
			end), 
			Rotation = -90
		});
		v19[3] = v3.createElement("ImageLabel", {
			AnchorPoint = Vector2.new(0.5, 0.5), 
			Position = UDim2.fromScale(0.5, 0.4), 
			Size = UDim2.fromOffset(22, 17), 
			BackgroundTransparency = 1, 
			ImageTransparency = p13.selectedBinding:map(function(p16)
				return u4(p16, 1, 0);
			end), 
			Image = u5.Image, 
			ImageRectOffset = u5.ImageRectOffset, 
			ImageRectSize = u5.ImageRectSize
		});
		v19[4] = v3.createElement("TextLabel", v20);
		local v22 = v3.createElement("Frame", {
			AnchorPoint = Vector2.new(0, 1), 
			Position = UDim2.fromScale(0, 1), 
			Size = UDim2.fromScale(1, 1)
		}, v19);
	else
		v22 = nil;
	end;
	if v22 then
		v18[#v18 + 1] = v22;
	end;
	return v3.createFragment({
		[p13.props.Index] = v3.createElement("ImageButton", v12, v18)
	});
end;
return {
	GridImage = v4
};
