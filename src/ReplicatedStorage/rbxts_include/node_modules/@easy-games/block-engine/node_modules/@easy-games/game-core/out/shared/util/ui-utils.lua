-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local function u1(p1, p2)
	local v3 = nil;
	if p2 == nil then
		p2 = 1;
	end;
	local l__Parent__4 = p1.Parent;
	if not l__Parent__4 then
		print("Missing parent container in getUIGridStyleLayoutLength()");
		return -1;
	end;
	if p1:IsA("UIGridLayout") then
		local v5 = p1:FindFirstAncestorWhichIsA("ScrollingFrame");
		if v5 ~= nil then
			v5 = v5.ScrollingDirection.Value;
		end;
		if v5 then
			local v6 = "Y";
		else
			v6 = "X";
		end;
	else
		local l__Value__7 = p1.FillDirection.Value;
		if l__Value__7 ~= 0 and l__Value__7 == l__Value__7 and l__Value__7 then
			v6 = "Y";
		else
			v6 = "X";
		end;
	end;
	v3 = v6;
	local v8 = 0;
	if p1:IsA("UIListLayout") then
		local v9 = l__Parent__4:GetChildren();
		local u2 = v8;
		local u3 = 0;
		local u4 = p1.Padding.Offset + l__Parent__4.AbsoluteSize[v3] * p1.Padding.Scale;
		local function v10(p3, p4)
			if p3:IsA("GuiObject") then
				if p3.AbsoluteSize[v3] >= 0 then
					if p3.AutomaticSize.Name ~= "None" then
						p3.AutomaticSize = Enum.AutomaticSize.None;
						local l__AbsoluteSize__11 = p3.AbsoluteSize;
						p3.AutomaticSize = Enum.AutomaticSize[v3];
						u2 = u2 + p3.AbsoluteSize[v3];
					else
						u2 = u2 + p3.AbsoluteSize[v3];
					end;
				end;
				u3 = u3 + u4;
			end;
		end;
		local v12 = {};
		local v13 = 0;
		for v14, v15 in ipairs(v9) do
			local v16 = v10(v15, v14 - 1, v9);
			if v16 ~= nil then
				v13 = v13 + 1;
				v12[v13] = v16;
			end;
		end;
		u2 = u2 + (u3 - u4);
	elseif p1:IsA("UIGridLayout") then
		v8 = p1.AbsoluteContentSize[v3];
		print("UIGridLayout", v8);
	end;
	return v8 / p2;
end;
local function u5(p5)
	local v17 = {};
	local v18 = p5;
	while not v18:IsA("LayerCollector") or v18.Name ~= "Hoarcekat" do
		local v19 = v18:FindFirstChildOfClass("UIScale");
		if v19 then
			table.insert(v17, v19);
		end;
		if not v18.Parent then
			break;
		end;
		v18 = v18.Parent;	
	end;
	return v17;
end;
local function u6(p6)
	local v20 = nil;
	local v21 = table.create(#p6);
	for v22, v23 in ipairs(p6) do
		v21[v22] = v23.Scale;
	end;
	v20 = 1;
	for v24 = 1, #v21 do
		v20 = v20 * v21[v24];
	end;
	return local v25;
end;
local u7 = {};
local u8 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
local l__ContentProvider__9 = v2.ContentProvider;
local v26 = setmetatable({}, {
	__tostring = function()
		return "UIUtil";
	end
});
v26.__index = v26;
function v26.new(...)
	local v27 = setmetatable({}, v26);
	return v27:constructor(...) and v27;
end;
function v26.constructor(p7)

end;
local l__DeviceUtil__10 = v1.import(script, script.Parent, "device-util").DeviceUtil;
function v26.getActionBarPosition(p8)
	if l__DeviceUtil__10.isSmallScreen() then
		return UDim2.fromScale(0.5, 0.74);
	end;
	return UDim2.fromScale(0.5, 0.85);
end;
function v26.getTopBarPosition(p9)
	return UDim2.fromScale(0.5, 0.02);
end;
function v26.getActionMobileButtonPosition(p10)
	if not l__DeviceUtil__10.isSmallScreen() then
		return UDim2.fromScale(0.75, 0.7);
	end;
	return UDim2.fromScale(0.81, 0.7);
end;
local l__GuiService__11 = v2.GuiService;
local l__Players__12 = v2.Players;
local u13 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v26.selectGui(p11, p12)
	if p12 == nil then
		l__GuiService__11.SelectedObject = nil;
		return nil;
	end;
	local l__PlayerGui__28 = l__Players__12.LocalPlayer:WaitForChild("PlayerGui");
	if p12:IsDescendantOf(l__PlayerGui__28) then
		l__GuiService__11.SelectedObject = p12;
		return;
	end;
	local u14 = u13.new();
	u14:GiveTask(l__PlayerGui__28.DescendantAdded:Connect(function(p13)
		if p13 == p12 then
			l__GuiService__11.SelectedObject = p12;
			u14:DoCleaning();
		end;
	end));
end;
return {
	GetUIScaleAncestors = u5, 
	CalcTotalUIScale = u6, 
	DynamicCalcContainerSize = function(p14, p15, p16)
		if p16 == nil then
			p16 = 0;
		end;
		p15 = p15 or p14:FindFirstChildWhichIsA("UIGridStyleLayout");
		if not p15 then
			print("Missing UIGridStyleLayout Child");
			return nil;
		end;
		local l__Value__29 = p15.FillDirection.Value;
		if l__Value__29 ~= 0 and l__Value__29 == l__Value__29 and l__Value__29 then
			local v30 = "Y";
		else
			v30 = "X";
		end;
		local u15 = p14.Parent:FindFirstChildOfClass("UIScale");
		local function v31()
			local v32 = u1(p15);
			if u15 then
				v32 = v32 / u15.Scale;
			end;
			if v30 == "X" then
				p14.Size = UDim2.new(0, v32 + p16, p14.Size.X.Scale, p14.Size.X.Offset);
				return;
			end;
			if v30 == "Y" then
				p14.Size = UDim2.new(p14.Size.X.Scale, p14.Size.X.Offset, 0, v32 + p16);
			end;
		end;
		v31();
		local u16 = p15:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(v31);
		return function()
			u16:Disconnect();
		end;
	end, 
	DynamicCalcCanvasSize = function(p17, p18)
		local v33 = {};
		if not p17 then
			print("Missing ScrollFrame Ref");
			return nil;
		end;
		local v34 = p17:FindFirstChildWhichIsA("UIGridStyleLayout");
		if not v34 then
			print("Missing UIGridStyleLayout Child");
			return nil;
		end;
		if v34:IsA("UIGridLayout") then
			if p17.ScrollingDirection.Value then
				local v35 = "Y";
			else
				v35 = "X";
			end;
		else
			local l__Value__36 = v34.FillDirection.Value;
			if l__Value__36 ~= 0 and l__Value__36 == l__Value__36 and l__Value__36 then
				v35 = "Y";
			else
				v35 = "X";
			end;
		end;
		local u17 = u5(v34);
		local u18 = 1;
		local u19 = p17:FindFirstChildWhichIsA("UISizeConstraint");
		local u20 = 0;
		local function v37(p19, p20)
			if p20 == nil then
				p20 = 0;
			end;
			if v35 == "X" then
				p17.CanvasSize = UDim2.new(0, p19 + p20, p17.Size.Y.Scale, p17.Size.Y.Offset);
				return;
			end;
			if v35 == "Y" then
				p17.CanvasSize = UDim2.new(p17.Size.X.Scale, p17.Size.X.Offset, 0, p19 + p20);
			end;
		end;
		u18 = u6(u17);
		u20 = u1(v34, u18);
		(function()
			local v38 = p17:FindFirstChildWhichIsA("UIPadding");
			if not v38 then
				return nil;
			end;
			if v35 == "X" then
				local v39 = v38;
				if v39 ~= nil then
					v39 = v39.PaddingLeft.Offset;
				end;
				local v40 = v38;
				if v40 ~= nil then
					v40 = v40.PaddingLeft.Scale;
				end;
				local v41 = v38;
				if v41 ~= nil then
					v41 = v41.PaddingRight.Offset;
				end;
				local v42 = v38;
				if v42 ~= nil then
					v42 = v42.PaddingRight.Scale;
				end;
				u20 = u20 + (v39 + v40 * u20 + (v41 + v42 * u20));
				return;
			end;
			local v43 = v38;
			if v43 ~= nil then
				v43 = v43.PaddingTop.Offset;
			end;
			local v44 = v38;
			if v44 ~= nil then
				v44 = v44.PaddingTop.Scale;
			end;
			local v45 = v38;
			if v45 ~= nil then
				v45 = v45.PaddingBottom.Offset;
			end;
			local v46 = v38;
			if v46 ~= nil then
				v46 = v46.PaddingBottom.Scale;
			end;
			u20 = u20 + (v43 + v44 * u20 + (v45 + v46 * u20));
		end)();
		if u19 and u19.MaxSize[v35] < u20 then
			u20 = u19.MaxSize[v35];
		end;
		local v47 = p18;
		if v47 ~= nil then
			v47 = v47.additionalSpace;
		end;
		v37(u20, v47);
		if v34:IsA("UIGridLayout") then
			local u21 = true;
			table.insert(v33, (v34:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
				if u21 then
					u21 = false;
					return;
				end;
				u20 = u1(v34, u18);
				v37(u20);
			end)));
		end;
		return function()
			for v48, v49 in ipairs(v33) do
				v49:Disconnect();
			end;
		end;
	end, 
	preloadImages = function(p21)
		v1.Promise.defer(function()
			local v50 = {};
			local v51 = 0;
			local v52, v53, v54 = ipairs(p21);
			while true do
				local v55, v56 = v52(v53, v54);
				if not v55 then
					break;
				end;
				if u7[v56] == nil == true then
					v51 = v51 + 1;
					v50[v51] = v56;
				end;			
			end;
			local v57 = table.create(#v50);
			for v58, v59 in ipairs(v50) do
				u7[v59] = true;
				v57[v58] = u8("ImageLabel", {
					Image = v59
				});
			end;
			l__ContentProvider__9:PreloadAsync(v57);
		end);
	end, 
	UIUtil = v26
};
