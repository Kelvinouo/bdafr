-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	internalTypeChecks = false, 
	typeChecks = false, 
	elementTracing = false, 
	propValidation = false
};
local v2 = {};
for v3 in pairs(v1) do
	table.insert(v2, v3);
end;
local u1 = {};
function u1.new()
	local u2 = {
		_currentConfig = setmetatable({}, {
			__index = function(p1, p2)
				error(("Invalid global configuration key %q. Valid configuration keys are: %s"):format(tostring(p2), table.concat(v2, ", ")), 3);
			end
		}), 
		set = function(...)
			return u1.set(u2, ...);
		end, 
		get = function(...)
			return u1.get(u2, ...);
		end, 
		scoped = function(...)
			return u1.scoped(u2, ...);
		end
	};
	u2.set(v1);
	return u2;
end;
function u1.set(p3, p4)
	local v4, v5, v6 = pairs(p4);
	while true do
		local v7, v8 = v4(v5, v6);
		if not v7 then
			break;
		end;
		if v1[v7] == nil then
			error(("Invalid global configuration key %q (type %s). Valid configuration keys are: %s"):format(tostring(v7), typeof(v7), table.concat(v2, ", ")), 3);
		end;
		if typeof(v8) ~= "boolean" then
			error(("Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"):format(tostring(v8), typeof(v8), tostring(v7)), 3);
		end;
		p3._currentConfig[v7] = v8;	
	end;
end;
function u1.get(p5)
	return p5._currentConfig;
end;
function u1.scoped(p6, p7, p8)
	local v9 = {};
	for v10, v11 in pairs(p6._currentConfig) do
		v9[v10] = v11;
	end;
	p6.set(p7);
	local v12, v13 = pcall(p8);
	p6.set(v9);
	assert(v12, v13);
end;
return u1;
