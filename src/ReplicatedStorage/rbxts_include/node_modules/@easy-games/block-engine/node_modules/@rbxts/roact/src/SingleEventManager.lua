
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
v1.__index = v1;
local u1 = {
	Disabled = "Disabled", 
	Suspended = "Suspended", 
	Enabled = "Enabled"
};
function v1.new(p1)
	return setmetatable({
		_suspendedEventQueue = {}, 
		_connections = {}, 
		_listeners = {}, 
		_status = u1.Disabled, 
		_isResuming = false, 
		_instance = p1
	}, v1);
end;
function v1.connectEvent(p2, p3, p4)
	p2:_connect(p3, p2._instance[p3], p4);
end;
function v1.connectPropertyChange(p5, p6, p7)
	local v2, v3 = pcall(function()
		return p5._instance:GetPropertyChangedSignal(p6);
	end);
	if not v2 then
		error(("Cannot get changed signal on property %q: %s"):format(tostring(p6), v3), 0);
	end;
	p5:_connect("Change." .. p6, v3, p7);
end;
function v1._connect(p8, p9, p10, p11)
	if p11 ~= nil then
		if p8._connections[p9] == nil then
			p8._connections[p9] = p10:Connect(function(...)
				if p8._status == u1.Enabled then
					p8._listeners[p9](p8._instance, ...);
					return;
				end;
				if p8._status == u1.Suspended then
					table.insert(p8._suspendedEventQueue, { p9, select("#", ...), ... });
				end;
			end);
		end;
		p8._listeners[p9] = p11;
		return;
	end;
	if p8._connections[p9] ~= nil then
		p8._connections[p9]:Disconnect();
		p8._connections[p9] = nil;
	end;
	p8._listeners[p9] = nil;
end;
function v1.suspend(p12)
	p12._status = u1.Suspended;
end;
local u2 = require(script.Parent.Logging);
function v1.resume(p13)
	if p13._isResuming then
		return;
	end;
	p13._isResuming = true;
	local v4 = 1;
	while v4 <= #p13._suspendedEventQueue do
		local v5 = p13._suspendedEventQueue[v4];
		local v6 = p13._listeners[v5[1]];
		if v6 ~= nil then
			local v7, v8 = coroutine.resume(coroutine.create(v6), p13._instance, unpack(v5, 3, 2 + v5[2]));
			if not v7 then
				u2.warn("%s", v8);
			end;
		end;
		v4 = v4 + 1;	
	end;
	p13._isResuming = false;
	p13._status = u1.Enabled;
	p13._suspendedEventQueue = {};
end;
return v1;

