-- Decompiled with the Synapse X Luau decompiler.

local function u1(p1, p2)
	local v1 = {};
	for v2, v3 in pairs(p1) do
		if v2 ~= p2 then
			v1[v2] = v3;
		end;
	end;
	return v1;
end;
return function()
	local u2 = {};
	return {
		subscribe = function(p3, p4)
			assert(typeof(p4) == "function", "Can only subscribe to signals with a function.");
			local v4 = {
				callback = p4
			};
			local v5 = {};
			for v6, v7 in pairs(u2) do
				v5[v6] = v7;
			end;
			v5[p4] = v4;
			u2 = v5;
			return function()
				assert(not v4.disconnected, "Listeners can only be disconnected once.");
				v4.disconnected = true;
				u2 = u1(u2, p4);
			end;
		end, 
		fire = function(p5, ...)
			for v8, v9 in pairs(u2) do
				if not v9.disconnected then
					v8(...);
				end;
			end;
		end
	};
end;
