
-- Decompiled with the Synapse X Luau decompiler.

local function u1(p1, p2, p3)
	local v1 = {};
	for v2, v3 in pairs(p1) do
		v1[v2] = v3;
	end;
	v1[p2] = p3;
	return v1;
end;
local function u2(p4, p5)
	local v4 = {};
	for v5, v6 in pairs(p4) do
		if v5 ~= p5 then
			v4[v5] = v6;
		end;
	end;
	return v4;
end;
return function()
	local u3 = {};
	return {
		subscribe = function(p6, p7)
			assert(typeof(p7) == "function", "Can only subscribe to signals with a function.");
			local v7 = {
				callback = p7
			};
			u3 = u1(u3, p7, v7);
			return function()
				assert(not v7.disconnected, "Listeners can only be disconnected once.");
				v7.disconnected = true;
				u3 = u2(u3, p7);
			end;
		end, 
		fire = function(p8, ...)
			for v8, v9 in pairs(u3) do
				if not v9.disconnected then
					v8(...);
				end;
			end;
		end
	};
end;

