-- Decompiled with the Synapse X Luau decompiler.

local function u1(p1, p2)
	if typeof(p1) ~= typeof(p2) then
		return false, ("{1} is of type %s, but {2} is of type %s"):format(typeof(p1), typeof(p2));
	end;
	if typeof(p1) ~= "table" then
		if p1 == p2 then
			return true;
		else
			return false, "{1} ~= {2}";
		end;
	end;
	local v1 = {};
	for v2, v3 in pairs(p1) do
		v1[v2] = true;
		local v4, v5 = u1(v3, p2[v2]);
		if not v4 then
			return false, v5:gsub("{1}", ("{1}[%s]"):format(tostring(v2))):gsub("{2}", ("{2}[%s]"):format(tostring(v2)));
		end;
	end;
	for v6, v7 in pairs(p2) do
		if not v1[v6] then
			local v8, v9 = u1(v7, p1[v6]);
			if not v8 then
				return false, v9:gsub("{1}", ("{1}[%s]"):format(tostring(v6))):gsub("{2}", ("{2}[%s]"):format(tostring(v6)));
			end;
		end;
	end;
	return true;
end;
return function(p3, p4)
	local v10, v11 = u1(p3, p4);
	if not v10 then
		error(("Values were not deep-equal.\n%s"):format((v11:gsub("{1}", "first"):gsub("{2}", "second"))), 2);
	end;
end;
