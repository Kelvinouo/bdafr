-- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.GlobalConfig).get();
local u2 = require(script.Parent.internalAssert);
local u3 = require(script.Parent.Type);
local u4 = require(script.Parent.ElementUtils);
local u5 = require(script.Parent.ElementKind);
local u6 = require(script.Parent.PropMarkers.Children);
local u7 = require(script.Parent.Symbol).named("InternalData");
return function(p1)
	local u8 = nil;
	local u9 = nil;
	local u10 = nil;
	local function u11(p2, p3, p4)
		if u1.internalTypeChecks then
			u2(u3.of(p2) == u3.VirtualNode, "Expected arg #1 to be of type VirtualNode");
		end;
		local v1 = {};
		for v2, v3 in pairs(p2.children) do
			local v4 = u10(v3, (u4.getElementByKey(p4, v2)));
			if v4 ~= nil then
				p2.children[v2] = v4;
			else
				v1[v2] = true;
			end;
		end;
		for v5, v6 in pairs(v1) do
			p2.children[v5] = nil;
		end;
		local v7, v8, v9 = u4.iterateElements(p4);
		while true do
			local v10, v11 = v7(v8, v9);
			if not v10 then
				break;
			end;
			local v12 = v10;
			if v10 == u4.UseParentKey then
				v12 = p2.hostKey;
			end;
			if p2.children[v10] == nil then
				local v13 = u9(v11, p3, v12, p2.context, p2.legacyContext);
				if v13 ~= nil then
					v13.depth = p2.depth + 1;
					p2.children[v10] = v13;
				end;
			end;		
		end;
	end;
	local u12 = nil;
	u8 = function(p5)
		if u1.internalTypeChecks then
			u2(u3.of(p5) == u3.VirtualNode, "Expected arg #1 to be of type VirtualNode");
		end;
		local v14 = u5.of(p5.currentElement);
		if v14 == u5.Host then
			p1.unmountHostNode(u12, p5);
			return;
		end;
		if v14 == u5.Function then
			for v15, v16 in pairs(p5.children) do
				u8(v16);
			end;
			return;
		end;
		if v14 == u5.Stateful then
			p5.instance:__unmount();
			return;
		end;
		if v14 == u5.Portal then
			for v17, v18 in pairs(p5.children) do
				u8(v18);
			end;
			return;
		end;
		if v14 ~= u5.Fragment then
			error(("Unknown ElementKind %q"):format(tostring(v14), 2));
			return;
		end;
		for v19, v20 in pairs(p5.children) do
			u8(v20);
		end;
	end;
	local function u13(p6, p7, p8)
		if u3.of(p8) == u3.Element or p8 == nil or typeof(p8) == "boolean" then
			u11(p6, p7, p8);
			return;
		end;
		error(("%s\n%s"):format("Component returned invalid children:", p6.currentElement.source and "<enable element tracebacks>"), 0);
	end;
	local function u14(p9, p10)
		u8(p9);
		local v21 = u9(p10, p9.hostParent, p9.hostKey, p9.originalContext or p9.context, p9.parentLegacyContext);
		if v21 ~= nil then
			v21.depth = p9.depth;
		end;
		return v21;
	end;
	local function u15(p11, p12, p13)
		u11(p11, p12, p13);
	end;
	local function u16(p14, p15)
		u13(p14, p14.hostParent, (p15.component(p15.props)));
		return p14;
	end;
	local function u17(p16, p17)
		local l__target__22 = p17.props.target;
		assert(p1.isHostObject(l__target__22), "Expected target to be host object");
		if l__target__22 ~= p16.currentElement.props.target then
			return u14(p16, p17);
		end;
		u15(p16, l__target__22, p17.props[u6]);
		return p16;
	end;
	local function u18(p18, p19)
		u15(p18, p18.hostParent, p19.elements);
		return p18;
	end;
	u10 = function(p20, p21, p22)
		if u1.internalTypeChecks then
			u2(u3.of(p20) == u3.VirtualNode, "Expected arg #1 to be of type VirtualNode");
		end;
		if u1.typeChecks then
			local v23 = true;
			if u3.of(p21) ~= u3.Element then
				v23 = true;
				if typeof(p21) ~= "boolean" then
					v23 = p21 == nil;
				end;
			end;
			assert(v23, "Expected arg #2 to be of type Element, boolean, or nil");
		end;
		if p20.currentElement == p21 and p22 == nil then
			return p20;
		end;
		if typeof(p21) == "boolean" or p21 == nil then
			u8(p20);
			return nil;
		end;
		if p20.currentElement.component ~= p21.component then
			return u14(p20, p21);
		end;
		local v24 = u5.of(p21);
		local v25 = true;
		if v24 == u5.Host then
			p20 = p1.updateHostNode(u12, p20, p21);
		elseif v24 == u5.Function then
			p20 = u16(p20, p21);
		elseif v24 == u5.Stateful then
			v25 = p20.instance:__update(p21, p22);
		elseif v24 == u5.Portal then
			p20 = u17(p20, p21);
		elseif v24 == u5.Fragment then
			p20 = u18(p20, p21);
		else
			error(("Unknown ElementKind %q"):format(tostring(v24), 2));
		end;
		if not v25 then
			return p20;
		end;
		p20.currentElement = p21;
		return p20;
	end;
	local function u19(p23, p24, p25, p26, p27)
		if u1.internalTypeChecks then
			u2(p1.isHostObject(p24) or p24 == nil, "Expected arg #2 to be a host object");
			local v26 = true;
			if typeof(p26) ~= "table" then
				v26 = p26 == nil;
			end;
			u2(v26, "Expected arg #4 to be of type table or nil");
			local v27 = true;
			if typeof(p27) ~= "table" then
				v27 = p27 == nil;
			end;
			u2(v27, "Expected arg #5 to be of type table or nil");
		end;
		if u1.typeChecks then
			assert(p25 ~= nil, "Expected arg #3 to be non-nil");
			local v28 = true;
			if u3.of(p23) ~= u3.Element then
				v28 = typeof(p23) == "boolean";
			end;
			assert(v28, "Expected arg #1 to be of type Element or boolean");
		end;
		return {
			[u3] = u3.VirtualNode, 
			currentElement = p23, 
			depth = 1, 
			children = {}, 
			hostParent = p24, 
			hostKey = p25, 
			legacyContext = p27, 
			parentLegacyContext = p27, 
			context = p26 or {}, 
			originalContext = nil
		};
	end;
	local function u20(p28)
		local l__currentElement__29 = p28.currentElement;
		u13(p28, p28.hostParent, (l__currentElement__29.component(l__currentElement__29.props)));
	end;
	local function u21(p29)
		local l__currentElement__30 = p29.currentElement;
		local l__target__31 = l__currentElement__30.props.target;
		assert(p1.isHostObject(l__target__31), "Expected target to be host object");
		u15(p29, l__target__31, l__currentElement__30.props[u6]);
	end;
	local function u22(p30)
		u15(p30, p30.hostParent, p30.currentElement.elements);
	end;
	u9 = function(p31, p32, p33, p34, p35)
		local v32 = nil;
		if u1.internalTypeChecks then
			u2(p1.isHostObject(p32) or p32 == nil, "Expected arg #2 to be a host object");
			local v33 = true;
			if typeof(p35) ~= "table" then
				v33 = p35 == nil;
			end;
			u2(v33, "Expected arg #5 to be of type table or nil");
		end;
		if u1.typeChecks then
			assert(p33 ~= nil, "Expected arg #3 to be non-nil");
			local v34 = true;
			if u3.of(p31) ~= u3.Element then
				v34 = typeof(p31) == "boolean";
			end;
			assert(v34, "Expected arg #1 to be of type Element or boolean");
		end;
		if typeof(p31) == "boolean" then
			return nil;
		end;
		local v35 = u5.of(p31);
		v32 = u19(p31, p32, p33, p34, p35);
		if v35 == u5.Host then
			p1.mountHostNode(u12, v32);
			return v32;
		end;
		if v35 == u5.Function then
			u20(v32);
			return v32;
		end;
		if v35 == u5.Stateful then
			p31.component:__mount(u12, v32);
			return v32;
		end;
		if v35 == u5.Portal then
			u21(v32);
			return v32;
		end;
		if v35 == u5.Fragment then
			u22(v32);
			return v32;
		end;
		error(("Unknown ElementKind %q"):format(tostring(v35), 2));
		return v32;
	end;
	u12 = {
		mountVirtualTree = function(p36, p37, p38)
			if u1.typeChecks then
				assert(u3.of(p36) == u3.Element, "Expected arg #1 to be of type Element");
				assert(p1.isHostObject(p37) or p37 == nil, "Expected arg #2 to be a host object");
			end;
			if p38 == nil then
				p38 = "RoactTree";
			end;
			local v36 = {
				[u3] = u3.VirtualTree, 
				[u7] = {
					rootNode = nil, 
					mounted = true
				}
			};
			v36[u7].rootNode = u9(p36, p37, p38);
			return v36;
		end, 
		unmountVirtualTree = function(p39)
			local v37 = p39[u7];
			if u1.typeChecks then
				assert(u3.of(p39) == u3.VirtualTree, "Expected arg #1 to be a Roact handle");
				assert(v37.mounted, "Cannot unmounted a Roact tree that has already been unmounted");
			end;
			v37.mounted = false;
			if v37.rootNode ~= nil then
				u8(v37.rootNode);
			end;
		end, 
		updateVirtualTree = function(p40, p41)
			local v38 = p40[u7];
			if u1.typeChecks then
				assert(u3.of(p40) == u3.VirtualTree, "Expected arg #1 to be a Roact handle");
				assert(u3.of(p41) == u3.Element, "Expected arg #2 to be a Roact Element");
			end;
			v38.rootNode = u10(v38.rootNode, p41);
			return p40;
		end, 
		createVirtualNode = u19, 
		mountVirtualNode = u9, 
		unmountVirtualNode = u8, 
		updateVirtualNode = u10, 
		updateVirtualNodeWithChildren = u15, 
		updateVirtualNodeWithRenderResult = u13
	};
	return nil;
end;
