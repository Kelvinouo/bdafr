-- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.Type);
local u2 = require(script.Parent.Binding);
local u3 = require(script.Parent.getDefaultInstanceProperty);
local function u4(...)
	return ...;
end;
local u5 = require(script.Parent.PropMarkers.Ref);
local u6 = require(script.Parent.PropMarkers.Children);
local u7 = require(script.Parent.SingleEventManager);
local function u8(p1, p2, p3)
	local function v1(p4)
		local v2, v3 = xpcall(function()
			local l__hostObject__4 = p1.hostObject;
			local v5 = p4;
			if v5 == nil then
				local v6, v7 = u3(l__hostObject__4.ClassName, p2);
				v5 = v7;
			end;
			l__hostObject__4[p2] = v5;
		end, u4);
		if not v2 then
			local v8 = p1.currentElement.source;
			if v8 == nil then
				v8 = "<enable element tracebacks>";
			end;
			error(("Error updating props:\n\t%s\nIn element:\n%s\n"):format(v3, v8), 0);
		end;
	end;
	if p1.bindings == nil then
		p1.bindings = {};
	end;
	p1.bindings[p2] = u2.subscribe(p3, v1);
	v1(p3:getValue());
end;
local function u9(p5, p6, p7, p8)
	if p7 == p8 then
		return;
	end;
	if p6 == u5 or p6 == u6 then
		return;
	end;
	local v9 = u1.of(p6);
	if v9 == u1.HostEvent or v9 == u1.HostChangeEvent then
		local v10 = nil;
		if p5.eventManager == nil then
			p5.eventManager = u7.new(p5.hostObject);
		end;
		v10 = p6.name;
		if v9 == u1.HostChangeEvent then
			p5.eventManager:connectPropertyChange(v10, p7);
			return;
		else
			p5.eventManager:connectEvent(v10, p7);
			return;
		end;
	end;
	if u1.of(p8) == u1.Binding then
		p5.bindings[p6]();
		p5.bindings[p6] = nil;
	end;
	if u1.of(p7) == u1.Binding then
		u8(p5, p6, p7);
		return;
	end;
	local l__hostObject__11 = p5.hostObject;
	local v12 = p7;
	if v12 == nil then
		local v13, v14 = u3(l__hostObject__11.ClassName, p6);
		v12 = v14;
	end;
	l__hostObject__11[p6] = v12;
end;
local v15 = {
	isHostObject = function(p9)
		return typeof(p9) == "Instance";
	end
};
local u10 = require(script.Parent.GlobalConfig).get();
local u11 = require(script.Parent.internalAssert);
local u12 = require(script.Parent.ElementKind);
local function u13(p10, p11)
	for v16, v17 in pairs(p11) do
		u9(p10, v16, v17, nil);
	end;
end;
local function u14(p12, p13)
	if p12 == nil then
		return;
	end;
	if typeof(p12) == "function" then
		p12(p13);
		return;
	end;
	if u1.of(p12) == u1.Binding then
		u2.update(p12, p13);
		return;
	end;
	error(("Invalid ref: Expected type Binding but got %s"):format(typeof(p12)));
end;
function v15.mountHostNode(p14, p15)
	local l__currentElement__18 = p15.currentElement;
	if u10.internalTypeChecks then
		u11(u12.of(l__currentElement__18) == u12.Host, "Element at given node is not a host Element");
	end;
	if u10.typeChecks then
		assert(l__currentElement__18.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.");
		assert(l__currentElement__18.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.");
	end;
	local v19 = Instance.new(l__currentElement__18.component);
	p15.hostObject = v19;
	local v20, v21 = xpcall(function()
		u13(p15, l__currentElement__18.props);
	end, u4);
	if not v20 then
		local v22 = l__currentElement__18.source;
		if v22 == nil then
			v22 = "<enable element tracebacks>";
		end;
		error(("Error applying props:\n\t%s\nIn element:\n%s\n"):format(v21, v22), 0);
	end;
	v19.Name = tostring(p15.hostKey);
	local v23 = l__currentElement__18.props[u6];
	if v23 ~= nil then
		p14.updateVirtualNodeWithChildren(p15, p15.hostObject, v23);
	end;
	v19.Parent = p15.hostParent;
	p15.hostObject = v19;
	u14(l__currentElement__18.props[u5], v19);
	if p15.eventManager ~= nil then
		p15.eventManager:resume();
	end;
end;
function v15.unmountHostNode(p16, p17)
	u14(p17.currentElement.props[u5], nil);
	for v24, v25 in pairs(p17.children) do
		p16.unmountVirtualNode(v25);
	end;
	if p17.bindings ~= nil then
		for v26, v27 in pairs(p17.bindings) do
			v27();
		end;
	end;
	p17.hostObject:Destroy();
end;
local function u15(p18, p19, p20)
	for v28, v29 in pairs(p20) do
		u9(p18, v28, v29, p19[v28]);
	end;
	for v30, v31 in pairs(p19) do
		if p20[v30] == nil then
			u9(p18, v30, nil, v31);
		end;
	end;
end;
function v15.updateHostNode(p21, p22, p23)
	local l__props__32 = p22.currentElement.props;
	local l__props__33 = p23.props;
	if p22.eventManager ~= nil then
		p22.eventManager:suspend();
	end;
	if l__props__32[u5] ~= l__props__33[u5] then
		u14(l__props__32[u5], nil);
		u14(l__props__33[u5], p22.hostObject);
	end;
	local v34, v35 = xpcall(function()
		u15(p22, l__props__32, l__props__33);
	end, u4);
	if not v34 then
		local v36 = p23.source;
		if v36 == nil then
			v36 = "<enable element tracebacks>";
		end;
		error(("Error updating props:\n\t%s\nIn element:\n%s\n"):format(v35, v36), 0);
	end;
	local v37 = p23.props[u6];
	if v37 ~= nil or l__props__32[u6] ~= nil then
		p21.updateVirtualNodeWithChildren(p22, p22.hostObject, v37);
	end;
	if p22.eventManager ~= nil then
		p22.eventManager:resume();
	end;
	return p22;
end;
return v15;
