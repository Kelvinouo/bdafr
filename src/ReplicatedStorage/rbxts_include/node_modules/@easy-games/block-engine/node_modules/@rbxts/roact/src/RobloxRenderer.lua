-- Decompiled with the Synapse X Luau decompiler.

local u1 = require(script.Parent.Type);
local u2 = require(script.Parent.Binding);
local u3 = require(script.Parent.getDefaultInstanceProperty);
local function u4(p1, p2, p3)
	if p3 == nil then
		local v1, v2 = u3(p1.ClassName, p2);
		p3 = v2;
	end;
	p1[p2] = p3;
end;
local function u5(...)
	return ...;
end;
local u6 = require(script.Parent.PropMarkers.Ref);
local u7 = require(script.Parent.PropMarkers.Children);
local u8 = require(script.Parent.SingleEventManager);
local function u9(p4, p5)
	p4.bindings[p5]();
	p4.bindings[p5] = nil;
end;
local function u10(p6, p7, p8)
	local function v3(p9)
		local v4, v5 = xpcall(function()
			u4(p6.hostObject, p7, p9);
		end, u5);
		if not v4 then
			local v6 = p6.currentElement.source;
			if v6 == nil then
				v6 = "<enable element tracebacks>";
			end;
			error(("Error updating props:\n\t%s\nIn element:\n%s\n"):format(v5, v6), 0);
		end;
	end;
	if p6.bindings == nil then
		p6.bindings = {};
	end;
	p6.bindings[p7] = u2.subscribe(p8, v3);
	v3(p8:getValue());
end;
local function u11(p10, p11, p12, p13)
	if p12 == p13 then
		return;
	end;
	if p11 == u6 or p11 == u7 then
		return;
	end;
	local v7 = u1.of(p11);
	if v7 == u1.HostEvent or v7 == u1.HostChangeEvent then
		local v8 = nil;
		if p10.eventManager == nil then
			p10.eventManager = u8.new(p10.hostObject);
		end;
		v8 = p11.name;
		if v7 == u1.HostChangeEvent then
			p10.eventManager:connectPropertyChange(v8, p12);
			return;
		else
			p10.eventManager:connectEvent(v8, p12);
			return;
		end;
	end;
	if u1.of(p13) == u1.Binding then
		u9(p10, p11);
	end;
	if u1.of(p12) == u1.Binding then
		u10(p10, p11, p12);
		return;
	end;
	u4(p10.hostObject, p11, p12);
end;
local v9 = {
	isHostObject = function(p14)
		return typeof(p14) == "Instance";
	end
};
local u12 = require(script.Parent.GlobalConfig).get();
local u13 = require(script.Parent.internalAssert);
local u14 = require(script.Parent.ElementKind);
local function u15(p15, p16)
	for v10, v11 in pairs(p16) do
		u11(p15, v10, v11, nil);
	end;
end;
local function u16(p17, p18)
	if p17 == nil then
		return;
	end;
	if typeof(p17) == "function" then
		p17(p18);
		return;
	end;
	if u1.of(p17) == u1.Binding then
		u2.update(p17, p18);
		return;
	end;
	error(("Invalid ref: Expected type Binding but got %s"):format(typeof(p17)));
end;
function v9.mountHostNode(p19, p20)
	local l__currentElement__12 = p20.currentElement;
	if u12.internalTypeChecks then
		u13(u14.of(l__currentElement__12) == u14.Host, "Element at given node is not a host Element");
	end;
	if u12.typeChecks then
		assert(l__currentElement__12.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.");
		assert(l__currentElement__12.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.");
	end;
	local v13 = Instance.new(l__currentElement__12.component);
	p20.hostObject = v13;
	local v14, v15 = xpcall(function()
		u15(p20, l__currentElement__12.props);
	end, u5);
	if not v14 then
		local v16 = l__currentElement__12.source;
		if v16 == nil then
			v16 = "<enable element tracebacks>";
		end;
		error(("Error applying props:\n\t%s\nIn element:\n%s\n"):format(v15, v16), 0);
	end;
	v13.Name = tostring(p20.hostKey);
	local v17 = l__currentElement__12.props[u7];
	if v17 ~= nil then
		p19.updateVirtualNodeWithChildren(p20, p20.hostObject, v17);
	end;
	v13.Parent = p20.hostParent;
	p20.hostObject = v13;
	u16(l__currentElement__12.props[u6], v13);
	if p20.eventManager ~= nil then
		p20.eventManager:resume();
	end;
end;
local function u17(p21)
	if p21.bindings ~= nil then
		for v18, v19 in pairs(p21.bindings) do
			v19();
		end;
	end;
end;
function v9.unmountHostNode(p22, p23)
	u16(p23.currentElement.props[u6], nil);
	for v20, v21 in pairs(p23.children) do
		p22.unmountVirtualNode(v21);
	end;
	u17(p23);
	p23.hostObject:Destroy();
end;
local function u18(p24, p25, p26)
	for v22, v23 in pairs(p26) do
		u11(p24, v22, v23, p25[v22]);
	end;
	for v24, v25 in pairs(p25) do
		if p26[v24] == nil then
			u11(p24, v24, nil, v25);
		end;
	end;
end;
function v9.updateHostNode(p27, p28, p29)
	local l__props__26 = p28.currentElement.props;
	local l__props__27 = p29.props;
	if p28.eventManager ~= nil then
		p28.eventManager:suspend();
	end;
	if l__props__26[u6] ~= l__props__27[u6] then
		u16(l__props__26[u6], nil);
		u16(l__props__27[u6], p28.hostObject);
	end;
	local v28, v29 = xpcall(function()
		u18(p28, l__props__26, l__props__27);
	end, u5);
	if not v28 then
		local v30 = p29.source;
		if v30 == nil then
			v30 = "<enable element tracebacks>";
		end;
		error(("Error updating props:\n\t%s\nIn element:\n%s\n"):format(v29, v30), 0);
	end;
	local v31 = p29.props[u7];
	if v31 ~= nil or l__props__26[u7] ~= nil then
		p27.updateVirtualNodeWithChildren(p28, p28.hostObject, v31);
	end;
	if p28.eventManager ~= nil then
		p28.eventManager:resume();
	end;
	return p28;
end;
return v9;
