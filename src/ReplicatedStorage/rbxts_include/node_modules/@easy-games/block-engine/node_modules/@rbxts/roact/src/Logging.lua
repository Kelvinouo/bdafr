-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local function u1(p1, p2)
	local v2 = {};
	for v3, v4 in ipairs(p1) do
		local v5 = ("\t"):rep(p2);
		table.insert(v2, v5 .. v4:gsub("\n", "\n" .. v5));
	end;
	return table.concat(v2, "\n");
end;
function v1.__tostring(p3)
	local v6 = { "LogInfo {" };
	local v7 = #p3.errors;
	local v8 = #p3.warnings;
	local v9 = #p3.infos;
	if v7 + v8 + v9 == 0 then
		table.insert(v6, "\t(no messages)");
	end;
	if v7 > 0 then
		table.insert(v6, ("\tErrors (%d) {"):format(v7));
		table.insert(v6, u1(p3.errors, 2));
		table.insert(v6, "\t}");
	end;
	if v8 > 0 then
		table.insert(v6, ("\tWarnings (%d) {"):format(v8));
		table.insert(v6, u1(p3.warnings, 2));
		table.insert(v6, "\t}");
	end;
	if v9 > 0 then
		table.insert(v6, ("\tInfos (%d) {"):format(v9));
		table.insert(v6, u1(p3.infos, 2));
		table.insert(v6, "\t}");
	end;
	table.insert(v6, "}");
	return table.concat(v6, "\n");
end;
local v10 = {};
local function u2()
	local v11 = {
		errors = {}, 
		warnings = {}, 
		infos = {}
	};
	setmetatable(v11, v1);
	return v11;
end;
local u3 = true;
local u4 = {};
function v10.capture(p4)
	local v12 = u2();
	u3 = false;
	u4[v12] = true;
	local v13, v14 = pcall(p4);
	u4[v12] = nil;
	u3 = u3;
	assert(v13, v14);
	return v12;
end;
function v10.warn(p5, ...)
	local v15 = p5:format(...);
	for v16 in pairs(u4) do
		table.insert(v16.warnings, v15);
	end;
	local v17 = ("\t"):rep(1);
	local v18 = ("%s\n%s"):format(v15, v17 .. debug.traceback("", 2):sub(2):gsub("\n", "\n" .. v17));
	if u3 then
		warn(v18);
	end;
end;
local u5 = {};
function v10.warnOnce(p6, ...)
	local v19 = debug.traceback();
	if u5[v19] then
		return;
	end;
	u5[v19] = true;
	v10.warn(p6, ...);
end;
return v10;
