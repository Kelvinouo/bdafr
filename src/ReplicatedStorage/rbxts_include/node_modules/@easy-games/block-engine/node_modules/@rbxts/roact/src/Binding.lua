-- Script Hash: ef13afa0a96d9a7185b84da376bb2fe72e8b8d8a330428958b9be49f4ecd0666a582ab382fc91ec73a582b14085c8b90
-- Decompiled with the Synapse X Luau decompiler.

local v1 = {};
local u1 = {};
function v1.getValue(p1)
	return u1.getValue(p1);
end;
function v1.map(p2, p3)
	return u1.map(p2, p3);
end;
local u2 = require(script.Parent.Symbol).named("BindingImpl");
function u1.update(p4, p5)
	return p4[u2].update(p5);
end;
function u1.subscribe(p6, p7)
	return p6[u2].subscribe(p7);
end;
function u1.getValue(p8)
	return p8[u2].getValue();
end;
local u3 = require(script.Parent.createSignal);
local u4 = require(script.Parent.Type);
local u5 = {
	__index = v1, 
	__tostring = function(p9)
		return string.format("RoactBinding(%s)", tostring(p9:getValue()));
	end
};
function u1.create(p10)
	local u6 = {
		value = p10, 
		changeSignal = u3(), 
		subscribe = function(p11)
			return u6.changeSignal:subscribe(p11);
		end, 
		update = function(p12)
			u6.value = p12;
			u6.changeSignal:fire(p12);
		end, 
		getValue = function()
			return u6.value;
		end
	};
	return setmetatable({
		[u4] = u4.Binding, 
		[u2] = u6
	}, u5), u6.update;
end;
local u7 = require(script.Parent.GlobalConfig).get();
function u1.map(p13, p14)
	if u7.typeChecks then
		assert(u4.of(p13) == u4.Binding, "Expected arg #1 to be a binding");
		assert(typeof(p14) == "function", "Expected arg #1 to be a function");
	end;
	local v2 = {};
	function v2.subscribe(p15)
		return u1.subscribe(p13, function(p16)
			p15(p14(p16));
		end);
	end;
	function v2.update(p17)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2);
	end;
	function v2.getValue()
		return p14(p13:getValue());
	end;
	return setmetatable({
		[u4] = u4.Binding, 
		[u2] = v2
	}, u5);
end;
function u1.join(p18)
	if u7.typeChecks then
		assert(typeof(p18) == "table", "Expected arg #1 to be of type table");
		for v3, v4 in pairs(p18) do
			if u4.of(v4) ~= u4.Binding then
				error(("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(tostring(v3)), 2);
			end;
		end;
	end;
	local v5 = {};
	local function u8()
		local v6 = {};
		for v7, v8 in pairs(p18) do
			v6[v7] = v8:getValue();
		end;
		return v6;
	end;
	function v5.subscribe(p19)
		local v9 = {};
		for v10, v11 in pairs(p18) do
			v9[v10] = u1.subscribe(v11, function(p20)
				p19(u8());
			end);
		end;
		local u9 = v9;
		return function()
			if u9 == nil then
				return;
			end;
			for v12, v13 in pairs(u9) do
				v13();
			end;
			u9 = nil;
		end;
	end;
	function v5.update(p21)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2);
	end;
	function v5.getValue()
		return u8();
	end;
	return setmetatable({
		[u4] = u4.Binding, 
		[u2] = v5
	}, u5);
end;
return u1;
