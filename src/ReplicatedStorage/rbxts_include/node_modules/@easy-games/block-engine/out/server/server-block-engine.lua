-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "remotes");
local v3 = setmetatable({}, {
	__tostring = function()
		return "IServerBlockEngine";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__BlockEngineRemotes__1 = v2.BlockEngineRemotes;
local l__Workspace__2 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace;
function v3.constructor(p1)
	p1.placeBlockEvent = l__BlockEngineRemotes__1.Server:Create("PlaceBlockEvent");
	p1.breakBlockEvent = l__BlockEngineRemotes__1.Server:Create("BreakBlockEvent");
	p1.placedBlocksFolder = l__Workspace__2;
	p1:registerListeners();
end;
local l__BlockEngine__3 = v1.import(script, script.Parent.Parent).BlockEngine;
local l__ServerSyncEvents__4 = v1.import(script, script.Parent, "server-sync-events").ServerSyncEvents;
local l__DamageBlockResponse__5 = v2.DamageBlockResponse;
function v3.registerListeners(p2)
	l__BlockEngineRemotes__1.Server:Create("PlaceBlock"):SetCallback(function(p3, p4)
		local v5 = nil;
		local v6 = l__BlockEngine__3:snapPosition(p4.position);
		if l__BlockEngine__3:isAllowedPlacement(p3, p4.blockType, v6, 0) then
			v5 = l__ServerSyncEvents__4.PlaceBlock:fire(p4.blockType, 0, v6, p3);
			if v5:isCancelled() then
				return nil;
			end;
		else
			return nil;
		end;
		local v7 = l__BlockEngine__3:placeBlock(p4.blockType, v6, {
			data = v5:getData(), 
			parent = v5:getParent(), 
			player = p3
		});
		if v7 then
			l__ServerSyncEvents__4.PlaceBlockComplete:fire(p4.blockType, v6, p3, v7);
			local v8 = l__BlockEngine__3:getHandlerRegistry():getHandler(p4.blockType);
			if v8 ~= nil then
				v8 = v8:getBlockMeta();
			end;
			p2.placeBlockEvent:SendToAllPlayers({
				blockRef = {
					blockPosition = v6
				}, 
				blockType = v7.Name, 
				player = p3
			});
		end;
		return v7;
	end);
	l__BlockEngineRemotes__1.Server:Create("DamageBlock"):SetCallback(function(p5, p6)
		if not l__BlockEngine__3:isBlockBreakable(p6.blockRef, p5) then
			return l__DamageBlockResponse__5.FAILED;
		end;
		local v9, v10 = v1.try(function()
			local v11 = nil;
			local v12 = nil;
			if not l__ServerSyncEvents__4.DamageBlock:fire(p6.blockRef, p5):isCancelled() then
				v11 = l__BlockEngine__3:getStore():getBlockAt(p6.blockRef.blockPosition);
				if v11 then
					v12 = l__BlockEngine__3:getHandlerRegistry():getHandler(v11.Name);
					if not v12 then
						return;
					end;
				else
					return;
				end;
			else
				return;
			end;
			local v13 = false;
			for v14, v15 in ipairs((v12:getAllAdjacentBlockPositions(v11, v12:getContainedPositions(v11)))) do
				if l__BlockEngine__3:getStore():getBlockAt(v15) == nil then
					v13 = true;
					break;
				end;
			end;
			if not v13 then
				return v1.TRY_RETURN, { l__DamageBlockResponse__5.FAILED };
			end;
			local v16 = v12:getBlockMeta();
			local v17 = l__BlockEngine__3:getStore():getBlockData(p6.blockRef.blockPosition);
			local v18 = v11:GetAttribute("Health");
			if v18 == nil then
				v18 = v16.health;
				if v18 == nil then
					v18 = 10;
				end;
			end;
			local v19 = p5.Name .. "_Health";
			local v20 = v17;
			if v20 ~= nil then
				v20 = v20:GetAttribute(v19);
			end;
			local v21 = v20;
			if v21 == nil then
				v21 = v18;
			end;
			local v22 = math.max(v21 - l__BlockEngine__3:calculateBlockDamage(p5, p6.blockRef), 0);
			if v17 ~= nil then
				v17:SetAttribute(v19, v22);
			end;
			if not (v22 <= 0) then
				return v1.TRY_RETURN, { l__DamageBlockResponse__5.DAMAGED };
			end;
			l__BlockEngine__3:destroyBlock(p6.blockRef);
			l__ServerSyncEvents__4.BreakBlock:fire(p6.blockRef, v11.Name, p5);
			p2.breakBlockEvent:SendToAllPlayers({
				blockRef = p6.blockRef, 
				blockType = v11.Name, 
				hitPosition = p6.hitPosition, 
				hitNormal = p6.hitNormal, 
				player = p5
			});
			return v1.TRY_RETURN, { l__DamageBlockResponse__5.DESTROYED };
		end, function(p7)
			warn(p7);
		end);
		if v9 then
			return unpack(v10);
		end;
		return l__DamageBlockResponse__5.FAILED;
	end);
end;
function v3.setPlacedBlocksFolder(p8, p9)
	p8.placedBlocksFolder = p9;
end;
function v3.getPlacedBlocksFolder(p10)
	return p10.placedBlocksFolder;
end;
return {
	IServerBlockEngine = v3
};
