-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v3 = setmetatable({}, {
	__tostring = function()
		return "BasicBlockStore";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__RunService__1 = v2.RunService;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
local l__Workspace__3 = v2.Workspace;
function v3.constructor(p1, p2)
	p1.handlerRegistry = p2;
	p1.blocks = {};
	if l__RunService__1:IsServer() then
		p1.blockDataFolder = u2("Folder", {
			Name = "BlockData", 
			Parent = l__Workspace__3
		});
		return;
	end;
	p1.blockDataFolder = l__Workspace__3:WaitForChild("BlockData");
end;
function v3.getBlockAt(p3, p4)
	return p3.blocks[p3:getKey(p4)];
end;
function v3.setBlock(p5, p6, p7)
	if p7 then
		p5.blocks[p5:getKey(p6)] = p7;
		return;
	end;
	p5.blocks[p5:getKey(p6)] = nil;
end;
function v3.removeBlockInstance(p8, p9)
	local v5 = p8.handlerRegistry:getHandler(p9.Name);
	if v5 then
		local v6, v7, v8 = ipairs((v5:getContainedPositions(p9)));
		while true do
			v6(v7, v8);
			if not v6 then
				break;
			end;
			v8 = v6;
			if p8:getBlockAt(v7) == p9 then
				p8:setBlock(v7, nil);
			end;		
		end;
	end;
end;
function v3.getBlocksInRegion3(p10, p11)
	local v9 = {};
	local l__Position__10 = (p11.CFrame - p11.Size / 2).Position;
	local l__Position__11 = (p11.CFrame + p11.Size / 2).Position;
	local v12 = l__Position__10.X;
	local v13 = false;
	while true do
		if v13 then
			v12 = v12 + 1;
		else
			v13 = true;
		end;
		if not (v12 <= l__Position__11.X) then
			break;
		end;
		local v14 = l__Position__10.Y;
		local v15 = false;
		while true do
			if v15 then
				v14 = v14 + 1;
			else
				v15 = true;
			end;
			if not (v14 <= l__Position__11.Y) then
				break;
			end;
			local v16 = l__Position__10.Z;
			local v17 = false;
			while true do
				if v17 then
					v16 = v16 + 1;
				else
					v17 = true;
				end;
				if not (v16 <= l__Position__11.Z) then
					break;
				end;
				local v18 = p10:getBlockAt(Vector3.new(v12, v14, v16));
				if v18 then
					v9[v18] = true;
				end;			
			end;		
		end;	
	end;
	return v9;
end;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v3.getAllBlocks(p12)
	return u4.values(p12.blocks);
end;
function v3.getKey(p13, p14)
	p14 = Vector3.new(math.round(p14.X), math.round(p14.Y), math.round(p14.Z));
	return tostring(p14);
end;
function v3.getBlockData(p15, p16, p17)
	if p17 == nil then
		p17 = true;
	end;
	local v19 = p15:getBlockAt(p16);
	if v19 then
		local v20 = p15.blockDataFolder:FindFirstChild(p15:getBlockDataName(v19, p16));
		if v20 then
			return v20;
		end;
	end;
	if not p17 or not l__RunService__1:IsServer() then
		return;
	end;
	return p15:createBlockData(p16);
end;
function v3.waitForBlockData(p18, p19)
	local v21 = p18:getBlockAt(p19);
	if not v21 then
		error("Block not found at position " .. tostring(p19));
	end;
	return p18.blockDataFolder:WaitForChild(p18:getBlockDataName(v21, p19));
end;
function v3.createBlockData(p20, p21)
	local v22 = p20:getBlockAt(p21);
	if not v22 then
		return;
	end;
	local v23 = p20:getBlockData(p21, false);
	if v23 then
		return v23;
	end;
	return u2("Folder", {
		Name = p20:getBlockDataName(v22, p21), 
		Parent = p20.blockDataFolder
	});
end;
function v3.getBlockDataName(p22, p23, p24)
	if p23:GetAttribute("GreedyBlock") ~= true then
		return p23:GetAttribute("BlockUUID");
	end;
	return tostring((p23:GetAttribute("BlockUUID"))) .. "_" .. tostring(p24);
end;
function v3.deleteBlockData(p25, p26)
	local v24 = p25:getBlockData(p26);
	if v24 ~= nil then
		v24:Destroy();
	end;
end;
return {
	BasicBlockStore = v3
};
