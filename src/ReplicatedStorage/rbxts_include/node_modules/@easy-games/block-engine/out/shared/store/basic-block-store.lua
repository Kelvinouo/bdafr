-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v3 = setmetatable({}, {
	__tostring = function()
		return "BasicBlockStore";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__RunService__1 = v2.RunService;
local u2 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
local l__Workspace__3 = v2.Workspace;
function v3.constructor(p1, p2)
	p1.handlerRegistry = p2;
	p1.blocks = {};
	if l__RunService__1:IsServer() then
		p1.blockDataFolder = u2("Folder", {
			Name = "BlockData", 
			Parent = l__Workspace__3
		});
		return;
	end;
	p1.blockDataFolder = l__Workspace__3:WaitForChild("BlockData");
end;
function v3.getBlockAt(p3, p4)
	return p3.blocks[p3:getKey(p4)];
end;
function v3.setBlock(p5, p6, p7)
	if p7 then
		p5.blocks[p5:getKey(p6)] = p7;
		return;
	end;
	p5.blocks[p5:getKey(p6)] = nil;
end;
function v3.removeBlockInstance(p8, p9)
	local v5 = p8.handlerRegistry:getHandler(p9.Name);
	if v5 then
		for v6, v7 in ipairs((v5:getContainedPositions(p9))) do
			if p8:getBlockAt(v7) == p9 then
				p8:setBlock(v7, nil);
			end;
		end;
	end;
end;
function v3.getBlocksInRegion3(p10, p11)
	local v8 = {};
	local l__Position__9 = (p11.CFrame - p11.Size / 2).Position;
	local l__Position__10 = (p11.CFrame + p11.Size / 2).Position;
	local v11 = l__Position__9.X;
	local v12 = false;
	while true do
		if v12 then
			v11 = v11 + 1;
		else
			v12 = true;
		end;
		if not (v11 <= l__Position__10.X) then
			break;
		end;
		local v13 = l__Position__9.Y;
		local v14 = false;
		while true do
			if v14 then
				v13 = v13 + 1;
			else
				v14 = true;
			end;
			if not (v13 <= l__Position__10.Y) then
				break;
			end;
			local v15 = l__Position__9.Z;
			local v16 = false;
			while true do
				if v16 then
					v15 = v15 + 1;
				else
					v16 = true;
				end;
				if not (v15 <= l__Position__10.Z) then
					break;
				end;
				local v17 = p10:getBlockAt(Vector3.new(v11, v13, v15));
				if v17 then
					v8[v17] = true;
				end;			
			end;		
		end;	
	end;
	return v8;
end;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v3.getAllBlocks(p12)
	return u4.values(p12.blocks);
end;
function v3.getKey(p13, p14)
	p14 = Vector3.new(math.round(p14.X), math.round(p14.Y), math.round(p14.Z));
	return tostring(p14);
end;
function v3.getBlockData(p15, p16)
	local v18 = p15:getBlockAt(p16);
	if v18 then
		local v19 = p15.blockDataFolder:FindFirstChild(p15:getBlockDataName(v18, p16));
		if v19 then
			return v19;
		end;
	end;
	return nil;
end;
function v3.waitForBlockData(p17, p18)
	local v20 = p17:getBlockAt(p18);
	if not v20 then
		error("Block not found at position " .. tostring(p18));
	end;
	return p17.blockDataFolder:WaitForChild(p17:getBlockDataName(v20, p18));
end;
function v3.createBlockData(p19, p20)
	local v21 = p19:getBlockAt(p20);
	if v21 then
		if not p19:getBlockData(p20) then
			local v22 = u2("Folder", {
				Name = p19:getBlockDataName(v21, p20), 
				Parent = p19.blockDataFolder
			});
			return;
		end;
	else
		return;
	end;
	return nil;
end;
function v3.getBlockDataName(p21, p22, p23)
	if p22:GetAttribute("GreedyBlock") ~= true then
		return p22:GetAttribute("BlockUUID");
	end;
	return tostring((p22:GetAttribute("BlockUUID"))) .. "_" .. tostring(p23);
end;
function v3.deleteBlockData(p24, p25)
	local v23 = p24:getBlockData(p25);
	if v23 ~= nil then
		v23:Destroy();
	end;
end;
return {
	BasicBlockStore = v3
};
