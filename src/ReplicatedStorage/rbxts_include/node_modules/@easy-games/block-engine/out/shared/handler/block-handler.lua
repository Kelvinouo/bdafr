-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	constructor = function(p1, p2, p3, p4)
		p1.blockType = p2;
		p1.encodeId = p3;
		p1.blockMeta = p4;
	end, 
	getBlockType = function(p5)
		return p5.blockType;
	end, 
	getEncodeId = function(p6)
		return p6.encodeId;
	end, 
	setBlockMeta = function(p7, p8)
		p7.blockMeta = p8;
	end, 
	getBlockMeta = function(p9)
		return p9.blockMeta;
	end
};
local l__PositionUtil__1 = _G[script].import(script, script.Parent.Parent, "lib", "position-util").PositionUtil;
function v1.getContainedPositions(p10, p11)
	return { l__PositionUtil__1.convertToBlockPosition(p11.Position) };
end;
function v1.getPlacementPositions(p12, p13, p14)
	return { p13 };
end;
function v1.getBounds(p15, p16)
	return {
		blockPos1 = l__PositionUtil__1.convertToBlockPosition(p16.Position), 
		blockPos2 = l__PositionUtil__1.convertToBlockPosition(p16.Position)
	};
end;
function v1.getAdjacentBlockPositions(p17, p18, p19, p20)
	return { p18.Position + Vector3.FromNormalId(p19) };
end;
function v1.getAllAdjacentBlockPositions(p21, p22, p23)
	local v2 = {};
	for v3, v4 in ipairs(Enum.NormalId:GetEnumItems()) do
		for v5, v6 in ipairs(p21:getAdjacentBlockPositions(p22, v4, p23)) do
			v2[#v2 + 1] = v6;
		end;
	end;
	return v2;
end;
return {
	BlockHandler = v1
};
