-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "IClientBlockEngine";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
local l__BlockSelector__1 = v1.import(script, script.Parent, "select", "block-selector").BlockSelector;
function v2.constructor(p1)
	p1.blockSelector = l__BlockSelector__1.new();
end;
local l__CollectionTagAdded__2 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).CollectionTagAdded;
local l__BlockEngine__3 = v1.import(script, script.Parent.Parent).BlockEngine;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
function v2.startBlockReplication(p2)
	l__CollectionTagAdded__2("block", function(p3)
		local v4 = l__BlockEngine__3:getHandlerRegistry():getHandler(p3.Name);
		if not v4 then
			warn("[ClientBlockEngine]: Failed to find handler during block instance stream: " .. p3.Name);
			return;
		end;
		local v5 = u4.new();
		local v6 = v4:getContainedPositions(p3);
		for v7, v8 in ipairs(v6) do
			l__BlockEngine__3:getStore():setBlock(v8, p3);
		end;
		local u5 = v6;
		v5:GiveTask(p3:GetPropertyChangedSignal("Size"):Connect(function()
			local v9 = v4:getContainedPositions(p3);
			local v10 = {};
			local v11 = 0;
			local v12, v13, v14 = ipairs(v9);
			while true do
				local v15, v16 = v12(v13, v14);
				if not v15 then
					break;
				end;
				if table.find(u5, v16) == nil == true then
					v11 = v11 + 1;
					v10[v11] = v16;
				end;			
			end;
			local v17 = {};
			local v18 = 0;
			local v19, v20, v21 = ipairs(u5);
			while true do
				local v22, v23 = v19(v20, v21);
				if not v22 then
					break;
				end;
				if table.find(v9, v23) == nil == true then
					v18 = v18 + 1;
					v17[v18] = v23;
				end;			
			end;
			u5 = v9;
			for v24, v25 in ipairs(v10) do
				l__BlockEngine__3:getStore():setBlock(v25, p3);
			end;
			for v26, v27 in ipairs(v17) do
				l__BlockEngine__3:getStore():setBlock(v27, nil);
			end;
		end));
		v5:GiveTask(p3.AncestryChanged:Connect(function(p4, p5)
			if p5 == nil then
				l__BlockEngine__3:getStore():removeBlockInstance(p3);
				v5:DoCleaning();
			end;
		end));
	end);
end;
function v2.getBlockSelector(p6)
	return p6.blockSelector;
end;
return {
	IClientBlockEngine = v2
};
