-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out);
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v4 = v1.import(script, script.Parent.Parent.Parent, "remotes");
local v5 = setmetatable({}, {
	__tostring = function()
		return "BlockBreaker";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "maid").Maid);
local l__BreakEffect__2 = v1.import(script, script.Parent, "break-effect").BreakEffect;
local u3 = v1.import(script, v1.getModule(script, "@rbxts", "roact").src);
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
local l__BlockHighlighter__5 = v1.import(script, script.Parent.Parent, "highlight", "block-highlighter").BlockHighlighter;
local l__BlockSelectorMode__6 = v1.import(script, script.Parent.Parent, "select", "block-selector").BlockSelectorMode;
local l__BlockEngineRemotes__7 = v4.BlockEngineRemotes;
local l__Players__8 = v3.Players;
local l__PositionUtil__9 = v1.import(script, script.Parent.Parent.Parent, "shared", "lib", "position-util").PositionUtil;
function v5.constructor(p1, p2)
	p1.clientManager = p2;
	p1.maid = u1.new();
	p1.clientPredictedBlockBreaks = {};
	p1.breakEffect = l__BreakEffect__2.new();
	p1.lastHitTime = 0;
	p1.blockHealth = -1;
	p1.blockPredictDestroyed = false;
	p1.healthbarProgressRef = u3.createRef();
	p1.healthbarMaid = u1.new();
	p1.onBreak = u4.new();
	p1.blockHighligher = l__BlockHighlighter__5.new(p2, l__BlockSelectorMode__6.SELECT);
	l__BlockEngineRemotes__7.Client:WaitFor("RemoteName"):andThen(function(p3)
		p3:Connect(function(p4)
			p1.clientPredictedBlockBreaks[p4.blockRef.blockPosition] = nil;
		end);
		p3:Connect(function(p5)
			if p5.player ~= l__Players__8.LocalPlayer then
				p1.breakEffect:playBreak(p5.blockType, p5.blockRef.blockPosition);
				if p1.healthbarBlockRef and l__PositionUtil__9.isEqual(p5.blockRef.blockPosition, p1.healthbarBlockRef.blockPosition) then
					p1.healthbarMaid:DoCleaning();
				end;
			end;
		end);
	end);
end;
local l__BlockEngine__10 = v1.import(script, script.Parent.Parent.Parent).BlockEngine;
local l__BlockEngineClientEvents__11 = v1.import(script, script.Parent.Parent, "block-engine-client-events").BlockEngineClientEvents;
local l__AnimationUtil__12 = v2.AnimationUtil;
local l__AnimationId__13 = v1.import(script, script.Parent.Parent.Parent, "shared", "animation", "animation-id").AnimationId;
local l__DamageBlockResponse__14 = v4.DamageBlockResponse;
local u15 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v5.hitBlock(p6, p7, p8)
	if l__Players__8.LocalPlayer:GetAttribute("DenyBlockBreak") == true then
		return nil;
	end;
	local v7 = p6.clientManager:getBlockSelector():getMouseInfo(l__BlockSelectorMode__6.SELECT, {
		ray = p8
	});
	local v8 = v7;
	if v8 ~= nil then
		v8 = v8.target;
	end;
	if v8 then
		local l__target__9 = v7.target;
		if l__BlockEngine__10:isBlockBreakable(l__target__9.blockRef, l__Players__8.LocalPlayer) then
			if l__BlockEngineClientEvents__11.DamageBlock:fire(l__target__9.blockInstance.Name, l__target__9.blockRef.blockPosition, l__target__9.blockInstance):isCancelled() then
				return nil;
			end;
			local v10 = u1.new();
			p6.lastHitTime = tick();
			if p6.blockHealth == -1 or l__target__9.blockRef.blockPosition ~= p6.breakingBlockPosition or p6.blockPredictDestroyed then
				p6.blockPredictDestroyed = false;
				local v11 = l__BlockEngine__10:getStore():getBlockData(l__target__9.blockRef.blockPosition);
				if v11 ~= nil then
					v11 = v11:GetAttribute(l__Players__8.LocalPlayer.Name .. "_Health");
				end;
				local v12 = v11;
				if v12 == nil then
					v12 = v7.target.blockInstance:GetAttribute("Health");
				end;
				p6.blockHealth = v12;
				p6.breakingBlockPosition = l__target__9.blockRef.blockPosition;
			end;
			local v13 = l__BlockEngine__10:calculateBlockDamage(l__Players__8.LocalPlayer, v7.target.blockRef);
			p6.blockHealth = p6.blockHealth - v13;
			if p6.blockHealth < 0 then
				p6.blockHealth = 0;
			end;
			local u16 = true;
			p6.healthbarMaid:GiveTask(function()
				u16 = false;
			end);
			v10:GiveTask(function()
				if u16 then
					p6.blockHealth = p6.blockHealth + v13;
				end;
			end);
			p6:updateHealthbar(v7.target.blockRef, p6.blockHealth, v7.target.blockInstance:GetAttribute("MaxHealth"), v13);
			local u17 = l__AnimationUtil__12.playAnimation(l__Players__8.LocalPlayer, l__BlockEngine__10:getAnimationController():getAssetId(l__AnimationId__13.BREAK_BLOCK));
			p7:GiveTask(function()
				if u17 ~= nil then
					u17:Stop();
				end;
				if u17 ~= nil then
					u17:Destroy();
				end;
			end);
			p6.onBreak:Fire();
			local v14 = false;
			local v15 = u1.new();
			if p6.blockHealth <= 0 then
				v14 = true;
				p6.blockPredictDestroyed = true;
				p6.breakEffect:playBreak(v7.target.blockInstance.Name, v7.target.blockRef.blockPosition, l__Players__8.LocalPlayer);
				p6.healthbarMaid:DoCleaning();
				local l__blockInstance__16 = v7.target.blockInstance;
				local v17 = l__blockInstance__16:GetAttribute("BlockUUID");
				local l__blockRef__18 = v7.target.blockRef;
				p6.clientPredictedBlockBreaks[l__blockRef__18.blockPosition] = true;
				local u18 = l__BlockEngine__10:destroyBlock(l__blockRef__18, {
					destroyingPlayer = l__Players__8.LocalPlayer
				});
				v15:GiveTask(function()
					local v19, v20, v21 = ipairs(u18.spawnedGreedyBlocks or {});
					while true do
						v19(v20, v21);
						if not v19 then
							break;
						end;
						v21 = v19;
						l__BlockEngine__10:getStore():removeBlockInstance(v20);
						v20:Destroy();					
					end;
				end);
				local l__Name__19 = l__blockInstance__16.Name;
				v10:GiveTask(function()
					if p6.clientPredictedBlockBreaks[l__blockRef__18.blockPosition] ~= nil then
						l__BlockEngine__10:placeBlock(l__Name__19, l__blockRef__18.blockPosition, {
							blockUUID = v17
						});
						p6.clientPredictedBlockBreaks[l__blockRef__18.blockPosition] = nil;
					end;
				end);
			else
				p6.breakEffect:playHit(v7.target.blockInstance.Name, v7.target.blockRef.blockPosition, l__Players__8.LocalPlayer);
			end;
			local l__blockRef__20 = v7.target.blockRef;
			local l__blockInstance__21 = l__target__9.blockInstance;
			l__BlockEngineRemotes__7.Client:Get("RemoteName"):CallServerAsync({
				blockRef = v7.target.blockRef, 
				hitPosition = v7.target.hitPosition, 
				hitNormal = v7.target.hitNormal
			}):andThen(function(p9)
				if p9 ~= l__DamageBlockResponse__14.DESTROYED and v14 then
					v10:DoCleaning();
				end;
				if not p9 or p9 == l__DamageBlockResponse__14.FAILED then
					error("Rejected: " .. u15(p9));
				end;
			end):catch(function(p10)
				warn("Failed block place:", u15(p10));
				warn(p10);
				v10:DoCleaning();
				if p6.clientPredictedBlockBreaks[l__blockRef__20.blockPosition] ~= nil then
					l__BlockEngine__10:placeBlock(l__blockInstance__21.Name, l__blockRef__20.blockPosition);
					p6.clientPredictedBlockBreaks[l__blockRef__20.blockPosition] = nil;
				end;
			end):finally(function()
				v15:DoCleaning();
			end);
		end;
	end;
end;
local l__UserInputService__22 = v3.UserInputService;
local l__RunService__23 = v3.RunService;
local l__Workspace__24 = v3.Workspace;
local l__ContextActionService__25 = v3.ContextActionService;
function v5.enable(p11)
	p11.blockHighligher:enable();
	p11.maid:GiveTask(function()
		p11.blockHighligher:disable();
	end);
	if l__UserInputService__22.TouchEnabled then
		local v22 = u1.new();
		p11.maid:GiveTask(v22);
		p11.maid:GiveTask(l__UserInputService__22.TouchStarted:Connect(function(p12, p13)
			if p13 then
				return nil;
			end;
			local v23 = u1.new();
			local u26 = true;
			v23:GiveTask(function()
				u26 = false;
				l__RunService__23:UnbindFromRenderStep("block-break-touch");
			end);
			v23:GiveTask(l__UserInputService__22.TouchEnded:Connect(function(p14, p15)
				if p14 ~= p12 then
					return nil;
				end;
				v23:DoCleaning();
			end));
			local u27 = false;
			v23:GiveTask(l__UserInputService__22.TouchMoved:Connect(function(p16, p17)
				if p16 ~= p12 or u27 then
					return nil;
				end;
				local v24 = l__Players__8.LocalPlayer.Character;
				if v24 ~= nil then
					v24 = v24:FindFirstChildWhichIsA("Humanoid");
					if v24 ~= nil then
						v24 = v24.MoveDirection;
					end;
				end;
				if v24 ~= nil and v24 ~= Vector3.new() then
					v23:DoCleaning();
				end;
			end));
			p11.maid:GiveTask(v23);
			local u28 = 0;
			local function u29(p18)
				u27 = true;
				while true do
					local v25 = nil;
					if l__Workspace__24.CurrentCamera then
						v25 = l__Workspace__24.CurrentCamera:ScreenPointToRay(p18.Position.X, p18.Position.Y);
					end;
					p11:hitBlock(v23, v25);
					local v26 = task.wait(v5.COOLDOWN);
					if v26 ~= 0 and v26 == v26 and v26 then
						v26 = u26;
					end;
					if v26 == 0 then
						break;
					end;
					if v26 ~= v26 then
						break;
					end;
					if not v26 then
						break;
					end;				
				end;
			end;
			l__RunService__23:BindToRenderStep("block-break-touch", Enum.RenderPriority.Input.Value, function(p19)
				u28 = u28 + p19;
				if u28 >= 0.25 then
					l__RunService__23:UnbindFromRenderStep("block-break-touch");
					v22:DoCleaning();
					v22:GiveTask(v23);
					p11.blockHighligher:setInputObject(p12);
					v23:GiveTask(function()
						p11.blockHighligher:setInputObject(nil);
					end);
					task.spawn(function()
						u29(p12);
					end);
				end;
			end);
		end));
	end;
	local u30 = u1.new();
	l__ContextActionService__25:BindAction("block-break", function(p20, p21, p22)
		if p21 == Enum.UserInputState.Begin then
			u30:DoCleaning();
			local u31 = true;
			u30:GiveTask(function()
				u31 = false;
			end);
			local v27 = tick() - p11.lastHitTime;
			if v27 < v5.COOLDOWN then
				wait(v5.COOLDOWN - v27);
				if not u31 then
					return nil;
				end;
			end;
			while true do
				p11:hitBlock(u30);
				if not { wait(v5.COOLDOWN) } then
					break;
				end;
				if not u31 then
					break;
				end;			
			end;
		end;
	end, false, Enum.UserInputType.MouseButton1);
	p11.maid:GiveTask(l__UserInputService__22.InputEnded:Connect(function(p23)
		if p23.UserInputType == Enum.UserInputType.MouseButton1 then
			u30:DoCleaning();
		end;
	end));
	p11.maid:GiveTask(function()
		l__ContextActionService__25:UnbindAction("block-break");
		u30:DoCleaning();
	end);
end;
local u32 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
local l__GameQueryUtil__33 = v2.GameQueryUtil;
local l__TweenService__34 = v3.TweenService;
function v5.updateHealthbar(p24, p25, p26, p27, p28)
	local v28 = not p24.healthbarPart;
	if not v28 then
		local v29 = p24.healthbarBlockRef;
		if v29 ~= nil then
			v29 = v29.blockPosition;
		end;
		v28 = v29 ~= p25.blockPosition;
	end;
	if v28 then
		p24.healthbarMaid:DoCleaning();
		p24.healthbarBlockRef = p25;
		p24.healthbarPart = u32("Part", {
			Size = Vector3.new(1, 1, 1), 
			CFrame = CFrame.new(l__PositionUtil__9.convertToWorldPosition(p25.blockPosition)), 
			Transparency = 1, 
			Anchored = true, 
			CanCollide = false, 
			Parent = l__Workspace__24
		});
		l__GameQueryUtil__33:setQueryIgnored(p24.healthbarPart, true);
		local u35 = true;
		local u36 = u3.mount(u3.createElement("BillboardGui", {
			Adornee = p24.healthbarPart, 
			Size = UDim2.fromScale(4, 0.2), 
			StudsOffset = Vector3.new(0, 2.5, 0), 
			MaxDistance = 40, 
			AlwaysOnTop = true
		}, { u3.createElement("Frame", {
				Size = UDim2.fromScale(1, 1), 
				BackgroundColor3 = Color3.fromRGB(0, 0, 0), 
				BackgroundTransparency = 0.3, 
				BorderSizePixel = 0
			}, { u3.createElement("Frame", {
					[u3.Ref] = p24.healthbarProgressRef, 
					Size = UDim2.fromScale(p26 / p27, 1), 
					BackgroundColor3 = Color3.fromRGB(39, 231, 68), 
					BorderSizePixel = 0
				}) }) }), p24.healthbarPart);
		p24.healthbarMaid:GiveTask(function()
			u35 = false;
			p24.healthbarBlockRef = nil;
			u3.unmount(u36);
			local l__healthbarPart__30 = p24.healthbarPart;
			if l__healthbarPart__30 ~= nil then
				l__healthbarPart__30:Destroy();
			end;
			p24.healthbarPart = nil;
		end);
		v1.Promise.delay(5):andThen(function()
			if u35 then
				p24.healthbarMaid:DoCleaning();
			end;
		end);
	end;
	l__TweenService__34:Create(p24.healthbarProgressRef:getValue(), TweenInfo.new(v5.COOLDOWN, Enum.EasingStyle.Quad), {
		Size = UDim2.fromScale(math.max((p26 - p28) / p27, 0), 1)
	}):Play();
end;
function v5.disable(p29)
	p29.maid:DoCleaning();
end;
v5.COOLDOWN = 0.3;
return {
	BlockBreaker = v5
};
