-- Decompiled with the Synapse X Luau decompiler.

local u1 = {
	incomingInvites = {}
};
return {
	PartyInvitesReducer = function(p1, p2)
		if p1 == nil then
			p1 = u1;
		end;
		if p2.type ~= "PartyAddIncomingInvite" then
			if p2.type == "PartyRemoveIncomingInvite" then
				local v1 = {};
				for v2, v3 in pairs(p1) do
					v1[v2] = v3;
				end;
				local v4 = {};
				local v5 = {};
				local v6 = 0;
				local v7, v8, v9 = ipairs(p1.incomingInvites);
				while true do
					local v10, v11 = v7(v8, v9);
					if not v10 then
						break;
					end;
					if v11.fromPlayer.userId ~= p2.userId == true then
						v6 = v6 + 1;
						v5[v6] = v11;
					end;				
				end;
				table.move(v5, 1, #v5, #v4 + 1, v4);
				v1.incomingInvites = v4;
				return v1;
			else
				return p1;
			end;
		end;
		local v12 = {};
		local l__incomingInvites__13 = p1.incomingInvites;
		table.move(l__incomingInvites__13, 1, #l__incomingInvites__13, #v12 + 1, v12);
		local v14 = {};
		local v15 = 0;
		local v16, v17, v18 = ipairs(v12);
		while true do
			local v19, v20 = v16(v17, v18);
			if not v19 then
				break;
			end;
			if v20.fromPlayer.userId ~= p2.invite.fromPlayer.userId == true then
				v15 = v15 + 1;
				v14[v15] = v20;
			end;		
		end;
		local v21 = { p2.invite };
		table.move(v14, 1, #v14, #v21 + 1, v21);
		local v22 = {};
		for v23, v24 in pairs(p1) do
			v22[v23] = v24;
		end;
		v22.incomingInvites = v21;
		return v22;
	end
};
