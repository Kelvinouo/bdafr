-- Script Hash: 175ff5a14bb31bc6a5f34d74bad97dd50c8ad74529ffc8d7ee7cb7bd2da0ea5eaef56b4b818f95c5bb0ee18bd46f9464
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "PlayerLocationService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "mock-memory-store-service").lib);
function v5.constructor(p1, p2)
	p1.gameTeleportService = p2;
	p1.playerMap = u1:GetSortedMap("PlayerLocations");
end;
function v5.onStart(p3)

end;
local l__default__2 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
v5.registerPlayer = v1.async(function(p4, p5, p6, p7)
	l__default__2.Info("Registering player {@Player} in match", p5);
	p4.playerMap:SetAsync(tostring(p5.UserId), {
		placeId = p6, 
		accessCode = p7
	}, 10800);
end);
local l__Flamework__3 = v2.Flamework;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
v5.teleportToMatch = v1.async(function(p8, p9, p10)
	l__default__2.Info("Attempting to teleport {@Player} to match of {Target}", p9, p10);
	local v7 = p8.playerMap:GetAsync(tostring(p10));
	if not v7 then
		return l__Flamework__3.resolveDependency("@easy-games/game-core:server/services/notification-service@NotificationService"):sendErrorNotification({ p9 }, {
			message = "This user isn't in a game!"
		});
	end;
	l__default__2.Info("Found server details for player {Player}, access code: {AccessCode}", p10, v7.accessCode);
	l__Flamework__3.resolveDependency("@easy-games/game-core:server/services/notification-service@NotificationService"):sendInfoNotification({ p9 }, {
		message = "Teleporting to server..."
	});
	local v8 = u4("TeleportOptions", {
		ReservedServerAccessCode = v7.accessCode
	});
	v8:SetTeleportData({
		isMod = true
	});
	v1.await(p8.gameTeleportService:teleportRetry(v7.placeId, { p9 }, v8));
end);
l__Reflect__3.defineMetadata(v5, "identifier", "@easy-games/lobby:server/services/player-location-service@PlayerLocationService");
l__Reflect__3.defineMetadata(v5, "flamework:parameters", { "@easy-games/lobby:server/services/game-teleport-service@GameTeleportService" });
l__Reflect__3.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.decorate(v5, "$:flamework@Service", v4.Service, { {} });
l__Reflect__3.decorate(v5, "$:flamework@External", v4.External, {});
return {
	PlayerLocationService = v5
};
