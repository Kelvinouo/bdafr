
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = setmetatable({}, {
	__tostring = function()
		return "PlayerLocationService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "mock-memory-store-service").lib);
function v4.constructor(p1, p2)
	p1.gameTeleportService = p2;
	p1.playerMap = u1:GetSortedMap("PlayerLocations");
end;
function v4.onStart(p3)

end;
local l__default__2 = v1.import(script, v1.getModule(script, "@rbxts", "log").out).default;
v4.registerPlayer = v1.async(function(p4, p5, p6, p7)
	l__default__2.Info("Registering player {@Player} in match", p5);
	p4.playerMap:SetAsync(tostring(p5.UserId), {
		placeId = p6, 
		accessCode = p7
	}, 10800);
end);
local l__Flamework__3 = v2.Flamework;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
v4.teleportToMatch = v1.async(function(p8, p9, p10)
	l__default__2.Info("Attempting to teleport {@Player} to match of {Target}", p9, p10);
	local v6 = p8.playerMap:GetAsync(tostring(p10));
	if not v6 then
		return l__Flamework__3.resolveDependency("@easy-games/game-core:server/services/notification-service@NotificationService"):sendErrorNotification({ p9 }, {
			message = "This user isn't in a game!"
		});
	end;
	l__default__2.Info("Found server details for player {Player}, access code: {AccessCode}", p10, v6.accessCode);
	l__Flamework__3.resolveDependency("@easy-games/game-core:server/services/notification-service@NotificationService"):sendInfoNotification({ p9 }, {
		message = "Teleporting to server..."
	});
	local v7 = u4("TeleportOptions", {
		ReservedServerAccessCode = v6.accessCode
	});
	v7:SetTeleportData({
		isMod = true
	});
	v1.await(p8.gameTeleportService:teleportRetry(v6.placeId, { p9 }, v7));
end);
l__Reflect__3.defineMetadata(v4, "identifier", "@easy-games/lobby:server/services/player-location-service@PlayerLocationService");
l__Reflect__3.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__3.defineMetadata(v4, "flamework:dependencies", { "@easy-games/lobby:server/services/game-teleport-service@GameTeleportService" });
l__Reflect__3.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.defineMetadata(v4, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__3.defineMetadata(v4, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	PlayerLocationService = v4
};

