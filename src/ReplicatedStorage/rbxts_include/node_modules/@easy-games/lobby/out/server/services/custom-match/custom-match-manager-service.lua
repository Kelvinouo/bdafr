-- Script Hash: 6b37808aaa0a8cde05d1b56dab18a1913de191bbacccfdf2ec24fdbbb2c66d6fd4f94237556b630c0542d1f0c0bfcee4
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local l__Reflect__3 = v2.Reflect;
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v6 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "lobby-networking");
local v7 = setmetatable({}, {
	__tostring = function()
		return "CustomMatchManagerService";
	end
});
v7.__index = v7;
function v7.new(...)
	local v8 = setmetatable({}, v7);
	return v8:constructor(...) and v8;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "mock-memory-store-service").lib);
function v7.constructor(p1)
	p1.customMatchStore = u1:GetSortedMap("lobby:CustomMatches");
end;
local l__Flamework__2 = v2.Flamework;
local l__LobbyNetEvents__3 = v6.LobbyNetEvents;
local l__LobbyNetFunctions__4 = v6.LobbyNetFunctions;
function v7.onStart(p2)
	local u5 = l__Flamework__2.resolveDependency("@easy-games/lobby:server/services/party-service@PartyService");
	l__LobbyNetEvents__3.server.createCustomMatch:connect(function(p3, p4, p5)
		local v9 = u5:getPartyForPlayer(p3);
		if not v9 then
			print("No party for player " .. tostring(p3) .. ", cannot create match");
			return false;
		end;
		local v10 = l__Flamework__2.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p4);
		if not v10 then
			print("No queue meta found for custom match queue type: " .. p4);
			return false;
		end;
		if p5 ~= nil and table.find(v10.maps, p5) == nil then
			print("Selected queue type does not support the selected map: " .. p5);
			return false;
		end;
		local v11 = p2:generateNewMatch(v9, p4, p5);
		if not v11 then
			return false;
		end;
		p2:teleportToCustomMatch(v9, v11);
		return true;
	end);
	l__LobbyNetFunctions__4.server.joinCustomMatch:setCallback(function(p6, p7)
		local v12 = u5:getPartyForPlayer(p6);
		if v12 then
			return p2:joinCustomMatch(v12, p7);
		end;
		print("No party for player " .. tostring(p6) .. ", cannot join by code");
		return false;
	end);
end;
function v7.joinCustomMatch(p8, p9, p10)
	local v13 = p8:getMatchByJoinCode(string.upper(p10));
	if v13 then
		p8:teleportToCustomMatch(p9, v13);
		return true;
	end;
	print("No match for data for player " .. p9:getLeader().Name .. " when joining by code");
	return false;
end;
local l__TeleportService__6 = v5.TeleportService;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v7.generateNewMatch(p11, p12, p13, p14)
	local v14 = v1.Promise.retry(v1.async(function()
		local v15 = p11:generateJoinCode(p12:getLeader());
		if p11:getMatchByJoinCode(v15) then
			error("Match already exists");
		end;
		return v15;
	end), 3):expect();
	if v14 == "" or not v14 then
		error("Could not get join code");
	end;
	local u8 = {
		hostUserId = p12:getLeader().UserId, 
		queueType = p13, 
		joinCode = v14, 
		selectedMap = p14, 
		accessCode = l__TeleportService__6:ReserveServer(l__Flamework__2.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p13).placeId)
	};
	v1.Promise.retry(v1.async(function()
		return p11.customMatchStore:SetAsync(v14, u8, 3600);
	end), 3);
	print("Generated new custom match with config: " .. u7(u8));
	return u8;
end;
function v7.getMatchByJoinCode(p15, p16)
	local v16 = {};
	v16[1] = v1.Promise.retry(v1.async(function()
		return p15.customMatchStore:GetAsync(p16);
	end), 3):await();
	if not v16[1] then
		return nil;
	end;
	return v16[2];
end;
function v7.teleportToCustomMatch(p17, p18, p19)
	local v17 = Instance.new("TeleportOptions");
	v17.ReservedServerAccessCode = p19.accessCode;
	l__Flamework__2.resolveDependency("@easy-games/lobby:server/services/game-teleport-service@GameTeleportService"):teleportPartyToPlace(l__Flamework__2.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p19.queueType).placeId, p18, {
		teleportData = p17:getTeleportData(p19), 
		teleportOptions = v17
	});
	print("Teleported party to custom match with teleport data: " .. u7(v17:GetTeleportData()));
end;
function v7.getTeleportData(p20, p21)
	if p21.selectedMap == nil then
		p21.selectedMap = "";
	end;
	return {
		customMatch = p21, 
		customMatchHash = p20:generateMatchConfigHash(p21)
	};
end;
local l__HttpService__9 = v5.HttpService;
function v7.generateMatchConfigHash(p22, p23)
	local v18 = l__HttpService__9:JSONEncode(p23);
	return "todo";
end;
function v7.generateJoinCode(p24, p25)
	local v19 = "";
	local v20 = 0;
	local v21 = false;
	while true do
		if v21 then
			v20 = v20 + 1;
		else
			v21 = true;
		end;
		if not (v20 < 4) then
			break;
		end;
		local v22 = math.ceil(math.random() * 34);
		v19 = v19 .. string.sub("ABCDEFGHIJKLMNPQRSTUVWXYZ123456789", v22, v22);	
	end;
	return v19;
end;
function v7.deleteCustomMatch(p26, p27)
	p26.customMatchStore:RemoveAsync(p27);
end;
l__Reflect__3.defineMetadata(v7, "identifier", "@easy-games/lobby:server/services/custom-match/custom-match-manager-service@CustomMatchManagerService");
l__Reflect__3.defineMetadata(v7, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__3.decorate(v7, "$:flamework@Service", v4.Service, { {} });
l__Reflect__3.decorate(v7, "$:flamework@External", v4.External, {});
return {
	CustomMatchManagerService = v7
};
