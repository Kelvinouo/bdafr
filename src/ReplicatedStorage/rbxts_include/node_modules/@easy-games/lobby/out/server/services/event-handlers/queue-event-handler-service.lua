-- Script Hash: 86aedd06297417b25231374ab53847526a777e0a5e50f72dd53bd05202692f6143f5463868175e4c1c0c6abca37edbc8
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out);
local v4 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "QueueEventHandlerService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
function v5.constructor(p1, p2, p3, p4, p5)
	p1.partyService = p2;
	p1.notificationService = p3;
	p1.queueService = p4;
	p1.lobbyServerService = p5;
end;
function v5.onInit(p6)
	p6:connectEvents();
end;
local l__LobbyServerEvents__1 = v1.import(script, script.Parent.Parent.Parent, "events", "events").LobbyServerEvents;
local l__PartyRole__2 = v1.import(script, script.Parent.Parent.Parent.Parent, "shared", "party", "party-role").PartyRole;
local l__ColorUtil__3 = v3.ColorUtil;
local l__GameTheme__4 = v3.GameTheme;
function v5.connectEvents(p7)
	l__LobbyServerEvents__1.joinQueue:connect(function(p8, p9)
		local v7 = p7.partyService:getPartyForPlayer(p8);
		if not v7 then
			p7.notificationService:sendErrorNotification({ p8 }, {
				message = "Unable to find party. Try rejoining."
			});
			return false;
		end;
		if v7:getPlayerRole(p8) ~= l__PartyRole__2.LEADER then
			p7.notificationService:sendErrorNotification({ p8 }, {
				message = "Only party leaders can join the queue."
			});
			return false;
		end;
		if v7:getQueueData() ~= nil then
			p7.notificationService:sendErrorNotification({ p8 }, {
				message = "You are already in a queue. Please leave the existing queue to join a new one."
			});
			return false;
		end;
		local v8 = p7.lobbyServerService:getQueueMeta(p9.queueType);
		if not (v8.queueSize.max < #v7:getPlayers()) then
			return ({ p7.queueService:joinQueue(v7, p9.queueType):await() })[1];
		end;
		p7.notificationService:sendErrorNotification({ p8 }, {
			message = "Max party size is " .. tostring(v8.queueSize.max) .. "."
		});
		return false;
	end);
	l__LobbyServerEvents__1.leaveQueue:connect(function(p10)
		local v9 = p7.partyService:getPartyForPlayer(p10);
		if not v9 then
			return false;
		end;
		p7.queueService:leaveQueue(v9);
		if #v9:getPlayers() > 1 then
			p7.notificationService:sendErrorNotification(v9:getPlayers(), {
				message = "<font color=\"" .. l__ColorUtil__3.richTextColor(l__GameTheme__4.mcAqua) .. "\">" .. p10.DisplayName .. "</font> cancelled the queue.<br/>"
			});
		end;
		return true;
	end);
end;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/lobby:server/services/event-handlers/queue-event-handler-service@QueueEventHandlerService");
l__Reflect__2.defineMetadata(v5, "flamework:parameters", { "@easy-games/lobby:server/services/party-service@PartyService", "@easy-games/game-core:server/services/notification-service@NotificationService", "@easy-games/lobby:server/services/queue-service@QueueService", "@easy-games/lobby:server/services/lobby-server-service@LobbyServerService" });
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnInit" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v4.Service, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v4.External, {});
return {
	QueueEventHandlerService = v5
};
