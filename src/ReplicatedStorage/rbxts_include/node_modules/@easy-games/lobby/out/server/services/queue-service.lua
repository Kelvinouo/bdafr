-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v5 = setmetatable({}, {
	__tostring = function()
		return "QueueService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "mock-memory-store-service").lib);
function v5.constructor(p1, p2, p3, p4, p5, p6)
	p1.playfabService = p2;
	p1.matchmakingService = p3;
	p1.gameTeleportService = p4;
	p1.notificationService = p5;
	p1.playerLocationService = p6;
	p1.Name = "QueueService";
	p1.Client = {};
	p1.reservingMatchAccessCodes = {};
	p1.matchConfigStore = u1:GetSortedMap("LobbyMatchConfig");
	p1.serverAccessCodes = u1:GetSortedMap("server_access_codes");
end;
function v5.onStart(p7)
	p7.matchmakingService:registerMatchFoundObserver(function(p8, p9, p10)
		return p7:onMatchFoundForParty(p8, p9, p10);
	end);
end;
local l__LobbyServerSyncEvents__2 = v1.import(script, script.Parent.Parent, "events", "events").LobbyServerSyncEvents;
local l__QueueState__3 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
v5.joinQueue = v1.async(function(p11, p12, p13)
	local v7 = p12:getLeader();
	if v7 and v1.await(p11.playfabService:getPlayerSession(v7)) then
		if l__LobbyServerSyncEvents__2.PartyJoinQueue:fire(p12, p13):isCancelled() then
			return false;
		end;
		local v8 = p12:getPlayers();
		local v9 = v1.async(function(p14)
			return v1.await(p11.playfabService:getPlayerSession(p14));
		end);
		local v10 = {};
		local v11 = 0;
		local v12, v13, v14 = ipairs(v8);
		while true do
			v12(v13, v14);
			if not v12 then
				break;
			end;
			v14 = v12;
			local v15 = v9(v13, v12 - 1, v8);
			if v15 ~= nil then
				v11 = v11 + 1;
				v10[v11] = v15;
			end;		
		end;
		v1.await(p11.matchmakingService:bulkCancelMatchmakingTickets(v1.await(v1.Promise.all(v10)), p13));
		p12:setQueueState(l__QueueState__3.JOINING_QUEUE);
		p12:sendPartyInfoEvent();
		local v16, v17 = v1.try(function()
			local v18 = v1.await(p11.matchmakingService:createMatchmakingTicketForParty(p12, p13));
			if not v18 then
				error("Missing matchResult");
			end;
			print("[Queue]: " .. v7.Name .. " joined queue \"" .. p13 .. "\"");
			p12:setQueueData({
				ticketId = v18.TicketId, 
				queueType = p13, 
				joinTime = os.time(), 
				pollAttempts = 0, 
				lastPollTime = 0
			});
			p12:setQueueState(l__QueueState__3.IN_QUEUE);
			p12:sendPartyInfoEvent();
			return v1.TRY_RETURN, { true };
		end, function(p15)
			p11.notificationService:sendErrorNotification({ v7 }, {
				message = "Failed to join the queue. Please try again."
			});
			p12:setQueueData(nil);
			p12:setQueueState(l__QueueState__3.NONE);
			p12:sendPartyInfoEvent();
			warn("Failed to join queue:", u4(p15));
		end);
		if v16 then
			return unpack(v17);
		end;
	end;
	return false;
end);
v5.leaveQueue = v1.async(function(p16, p17, p18)
	if p18 == nil then
		p18 = false;
	end;
	local v19 = p17:getQueueData();
	if v19 then
		local v20 = p17:getPlayers();
		local v21 = v1.async(function(p19)
			return v1.await(p16.playfabService:getPlayerSession(p19));
		end);
		local v22 = {};
		local v23 = 0;
		local v24, v25, v26 = ipairs(v20);
		while true do
			v24(v25, v26);
			if not v24 then
				break;
			end;
			v26 = v24;
			local v27 = v21(v25, v24 - 1, v20);
			if v27 ~= nil then
				v23 = v23 + 1;
				v22[v23] = v27;
			end;		
		end;
		v1.await(p16.matchmakingService:bulkCancelMatchmakingTickets(v1.await(v1.Promise.all(v22)), v19.queueType));
		p17:setQueueData(nil);
		p17:setQueueState(l__QueueState__3.NONE);
		p17:sendPartyInfoEvent();
		l__LobbyServerSyncEvents__2.PartyLeaveQueue:fire(p17, v19.queueType, p18);
	end;
end);
local l__AnalyticsService__5 = v4.AnalyticsService;
function v5.logMatchFound(p20, p21)
	l__AnalyticsService__5:FireCustomEvent(nil, "Teleport_To_Match", {
		party = p21:getPlayers(), 
		partySize = #p21:getPlayers()
	});
end;
local l__TeleportService__6 = v4.TeleportService;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
v5.onMatchFoundForParty = v1.async(function(p22, p23, p24, p25)
	local v28 = p23:getLeader();
	local v29 = p23:getQueueData();
	if not v29 then
		return nil;
	end;
	p23:setQueueState(l__QueueState__3.MATCH_FOUND);
	p23:sendPartyInfoEvent();
	local v30 = p23:getPlayers();
	local v31 = v1.async(function(p26)
		return v1.await(p22.playfabService:getPlayerSession(p26));
	end);
	local v32 = {};
	local v33 = 0;
	local v34, v35, v36 = ipairs(v30);
	while true do
		v34(v35, v36);
		if not v34 then
			break;
		end;
		v36 = v34;
		local v37 = v31(v35, v34 - 1, v30);
		if v37 ~= nil then
			v33 = v33 + 1;
			v32[v33] = v37;
		end;	
	end;
	local v38 = v1.async(function(p27)
		return v1.await(p27).Entity.Id;
	end);
	local v39 = table.create(#v32);
	local v40, v41, v42 = ipairs(v32);
	while true do
		v40(v41, v42);
		if not v40 then
			break;
		end;
		v42 = v40;
		v39[v40] = v38(v41, v40 - 1, v32);	
	end;
	local v43 = v1.await(v1.Promise.all(v39));
	local u8 = false;
	v1.Promise.defer(function()
		wait(12);
		if not u8 and p23:getQueueState() == l__QueueState__3.MATCH_FOUND then
			p22:joinQueue(p23, v29.queueType);
		end;
	end);
	print("[Queue]: Leader entity:", p25.Members[1].Entity.Id);
	if table.find(v43, p25.Members[1].Entity.Id) ~= nil then
		if p22.reservingMatchAccessCodes[p24] ~= nil then
			print("[Queue]: Already reserving match server " .. p24 .. ". Skipping..");
			return nil;
		end;
		p22.reservingMatchAccessCodes[p24] = true;
		local v44 = p22.gameTeleportService:getGamePlaceIdForQueueType(v29.queueType);
		local v45, v46 = l__TeleportService__6:ReserveServer(v44);
		task.spawn(function()
			p22:saveServerAccessCode(p24, v45);
			p22.reservingMatchAccessCodes[p24] = nil;
			local v47, v48, v49 = ipairs(p23:getPlayers());
			while true do
				v47(v48, v49);
				if not v47 then
					break;
				end;
				v49 = v47;
				p22.playerLocationService:registerPlayer(v48, v44, v45);			
			end;
		end);
		local v50 = u7("TeleportOptions", {
			ReservedServerAccessCode = v45
		});
		local v51 = p22:getMatchTeleportData(v29.queueType, p25, v28.UserId, #p23:getPlayers());
		v50:SetTeleportData(v51);
		p22.matchConfigStore:SetAsync(v46, v51, 180);
		if v1.await(p22.gameTeleportService:teleportRetry(p22.gameTeleportService:getGamePlaceIdForQueueType(v29.queueType), p23:getPlayers(), v50)) then
			p22:logMatchFound(p23);
		else
			print("[Queue]: Failed final teleport for match leader:", v28);
		end;
	else
		local v52 = p22:getServerAccessCode(p24);
		if v52 == nil then
			local v53 = 0;
			local v54 = 2;
			if v53 > 2 then
				v54 = 4;
			end;
			while v52 == nil and p23:getLeader().Parent ~= nil and v53 < 10 and { wait(v54) } do
				print("[Queue]: Retrying access code fetch (" .. tostring(v53 + 1) .. ")");
				local u9 = v52;
				v1.try(function()
					u9 = p22:getServerAccessCode(p24);
				end, function(p28)
					warn(p28);
				end);
				v53 = v53 + 1;			
			end;
		end;
		if v52 ~= "" and v52 then
			print("[Queue]: Found server access code: " .. v52);
			local v55 = u7("TeleportOptions", {
				ReservedServerAccessCode = v52
			});
			v55:SetTeleportData(p22:getMatchTeleportData(v29.queueType, p25, v28.UserId, #p23:getPlayers()));
			local u10 = p22.gameTeleportService:getGamePlaceIdForQueueType(v29.queueType);
			task.spawn(function()
				local v56, v57, v58 = ipairs(p23:getPlayers());
				while true do
					v56(v57, v58);
					if not v56 then
						break;
					end;
					v58 = v56;
					p22.playerLocationService:registerPlayer(v57, u10, v52);				
				end;
			end);
			v1.await(p22.gameTeleportService:teleportRetry(u10, p23:getPlayers(), v55));
			p22:logMatchFound(p23);
			u8 = true;
		else
			warn("[Queue]: Failed to find server access code for Party " .. p23:getLeader().Name);
		end;
	end;
end);
function v5.getMatchTeleportData(p29, p30, p31, p32, p33)
	return {
		match = {
			matchId = p31.MatchId, 
			queueType = p30, 
			teamLeaderUserId = p32
		}, 
		party = {
			leaderUserId = p32, 
			partySize = p33
		}
	};
end;
function v5.getServerAccessCode(p34, p35)
	if not p34.serverAccessCodes then
		return "offline";
	end;
	return p34.serverAccessCodes:GetAsync(p35);
end;
function v5.saveServerAccessCode(p36, p37, p38)
	if p36.serverAccessCodes then
		p36.serverAccessCodes:SetAsync(p37, p38, 30);
	end;
end;
function v5.downloadMatchConfig(p39)
	return p39.matchConfigStore:GetAsync(game.PrivateServerId);
end;
function v5.uploadMatchConfig(p40, p41, p42)
	return p40.matchConfigStore:SetAsync(p41, p42, 180);
end;
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/lobby:server/services/queue-service@QueueService");
l__Reflect__2.defineMetadata(v5, "flamework:parameters", { "@easy-games/lobby:server/services/playfab-service@PlayFabService", "@easy-games/lobby:server/services/matchmaking-service@MatchmakingService", "@easy-games/lobby:server/services/game-teleport-service@GameTeleportService", "@easy-games/game-core:server/services/notification-service@NotificationService", "@easy-games/lobby:server/services/player-location-service@PlayerLocationService" });
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v3.Service, {});
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	QueueService = v5
};
