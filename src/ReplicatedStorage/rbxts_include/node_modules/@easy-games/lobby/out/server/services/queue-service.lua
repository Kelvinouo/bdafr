-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "services"));
local v4 = setmetatable({}, {
	__tostring = function()
		return "QueueService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "mock-memory-store-service").lib);
function v4.constructor(p1, p2, p3, p4, p5, p6)
	p1.playfabService = p2;
	p1.matchmakingService = p3;
	p1.gameTeleportService = p4;
	p1.notificationService = p5;
	p1.playerLocationService = p6;
	p1.Name = "QueueService";
	p1.Client = {};
	p1.reservingMatchAccessCodes = {};
	p1.serverAccessCodes = u1:GetSortedMap("server_access_codes");
end;
function v4.onStart(p7)
	p7.matchmakingService:registerMatchFoundObserver(function(p8, p9, p10)
		return p7:onMatchFoundForParty(p8, p9, p10);
	end);
end;
local l__LobbyServerSyncEvents__2 = v1.import(script, script.Parent.Parent, "events", "events").LobbyServerSyncEvents;
local l__QueueState__3 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
local u4 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
v4.joinQueue = v1.async(function(p11, p12, p13)
	local v6 = p12:getLeader();
	if v6 and v1.await(p11.playfabService:getPlayerSession(v6)) then
		if l__LobbyServerSyncEvents__2.PartyJoinQueue:fire(p12, p13):isCancelled() then
			return false;
		end;
		local v7 = p12:getPlayers();
		local v8 = v1.async(function(p14)
			return v1.await(p11.playfabService:getPlayerSession(p14));
		end);
		local v9 = {};
		local v10 = 0;
		for v11, v12 in ipairs(v7) do
			local v13 = v8(v12, v11 - 1, v7);
			if v13 ~= nil then
				v10 = v10 + 1;
				v9[v10] = v13;
			end;
		end;
		v1.await(p11.matchmakingService:bulkCancelMatchmakingTickets(v1.await(v1.Promise.all(v9)), p13));
		p12:setQueueState(l__QueueState__3.JOINING_QUEUE);
		p12:sendPartyInfoEvent();
		local v14, v15 = v1.try(function()
			local v16 = v1.await(p11.matchmakingService:createMatchmakingTicketForParty(p12, p13));
			if not v16 then
				error("Missing matchResult");
			end;
			print("[Queue]: " .. v6.Name .. " joined queue \"" .. p13 .. "\"");
			p12:setQueueData({
				ticketId = v16.TicketId, 
				queueType = p13, 
				joinTime = os.time(), 
				pollAttempts = 0, 
				lastPollTime = 0
			});
			p12:setQueueState(l__QueueState__3.IN_QUEUE);
			p12:sendPartyInfoEvent();
			return v1.TRY_RETURN, { true };
		end, function(p15)
			p11.notificationService:sendErrorNotification({ v6 }, {
				message = "Failed to join the queue. Please try again."
			});
			p12:setQueueData(nil);
			p12:setQueueState(l__QueueState__3.NONE);
			p12:sendPartyInfoEvent();
			warn("Failed to join queue:", u4(p15));
		end);
		if v14 then
			return unpack(v15);
		end;
	end;
	return false;
end);
v4.leaveQueue = v1.async(function(p16, p17, p18)
	if p18 == nil then
		p18 = false;
	end;
	local v17 = p17:getQueueData();
	if v17 then
		local v18 = p17:getPlayers();
		local v19 = v1.async(function(p19)
			return v1.await(p16.playfabService:getPlayerSession(p19));
		end);
		local v20 = {};
		local v21 = 0;
		for v22, v23 in ipairs(v18) do
			local v24 = v19(v23, v22 - 1, v18);
			if v24 ~= nil then
				v21 = v21 + 1;
				v20[v21] = v24;
			end;
		end;
		v1.await(p16.matchmakingService:bulkCancelMatchmakingTickets(v1.await(v1.Promise.all(v20)), v17.queueType));
		p17:setQueueData(nil);
		p17:setQueueState(l__QueueState__3.NONE);
		p17:sendPartyInfoEvent();
		l__LobbyServerSyncEvents__2.PartyLeaveQueue:fire(p17, v17.queueType, p18);
	end;
end);
local l__AnalyticsService__5 = v3.AnalyticsService;
function v4.logMatchFound(p20, p21)
	l__AnalyticsService__5:FireCustomEvent(nil, "Teleport_To_Match", {
		party = p21:getPlayers(), 
		partySize = #p21:getPlayers()
	});
end;
local l__TeleportService__6 = v3.TeleportService;
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "make"));
v4.onMatchFoundForParty = v1.async(function(p22, p23, p24, p25)
	local v25 = p23:getLeader();
	local v26 = p23:getQueueData();
	if not v26 then
		return nil;
	end;
	p23:setQueueState(l__QueueState__3.MATCH_FOUND);
	p23:sendPartyInfoEvent();
	local v27 = p23:getPlayers();
	local v28 = v1.async(function(p26)
		return v1.await(p22.playfabService:getPlayerSession(p26));
	end);
	local v29 = {};
	local v30 = 0;
	for v31, v32 in ipairs(v27) do
		local v33 = v28(v32, v31 - 1, v27);
		if v33 ~= nil then
			v30 = v30 + 1;
			v29[v30] = v33;
		end;
	end;
	local v34 = v1.async(function(p27)
		return v1.await(p27).Entity.Id;
	end);
	local v35 = table.create(#v29);
	for v36, v37 in ipairs(v29) do
		v35[v36] = v34(v37, v36 - 1, v29);
	end;
	local v38 = v1.await(v1.Promise.all(v35));
	local u8 = false;
	v1.Promise.defer(function()
		wait(12);
		if not u8 and p23:getQueueState() == l__QueueState__3.MATCH_FOUND then
			p22:joinQueue(p23, v26.queueType);
		end;
	end);
	print("[Queue]: Leader entity:", p25.Members[1].Entity.Id);
	if table.find(v38, p25.Members[1].Entity.Id) ~= nil then
		if p22.reservingMatchAccessCodes[p24] ~= nil then
			print("[Queue]: Already reserving match server " .. p24 .. ". Skipping..");
			return nil;
		end;
		p22.reservingMatchAccessCodes[p24] = true;
		local v39 = p22.gameTeleportService:getGamePlaceIdForQueueType(v26.queueType);
		local v40, v41 = l__TeleportService__6:ReserveServer(v39);
		task.spawn(function()
			p22:saveServerAccessCode(p24, v40);
			p22.reservingMatchAccessCodes[p24] = nil;
			for v42, v43 in ipairs(p23:getPlayers()) do
				p22.playerLocationService:registerPlayer(v43, v39, v40);
			end;
		end);
		local v44 = u7("TeleportOptions", {
			ReservedServerAccessCode = v40
		});
		v44:SetTeleportData(p22:getMatchTeleportData(v26.queueType, p25, v25.UserId));
		if v1.await(p22.gameTeleportService:teleportRetry(p22.gameTeleportService:getGamePlaceIdForQueueType(v26.queueType), p23:getPlayers(), v44)) then
			p22:logMatchFound(p23);
		else
			print("[Queue]: Failed final teleport for match leader:", v25);
		end;
	else
		local v45 = p22:getServerAccessCode(p24);
		if v45 == nil then
			local v46 = 0;
			local v47 = 2;
			if v46 > 2 then
				v47 = 4;
			end;
			while v45 == nil and p23:getLeader().Parent ~= nil and v46 < 10 and { wait(v47) } do
				print("[Queue]: Retrying access code fetch (" .. tostring(v46 + 1) .. ")");
				v45 = p22:getServerAccessCode(p24);
				v46 = v46 + 1;			
			end;
		end;
		if v45 ~= "" and v45 then
			print("[Queue]: Found server access code: " .. v45);
			local v48 = u7("TeleportOptions", {
				ReservedServerAccessCode = v45
			});
			v48:SetTeleportData(p22:getMatchTeleportData(v26.queueType, p25, v25.UserId));
			local u9 = p22.gameTeleportService:getGamePlaceIdForQueueType(v26.queueType);
			task.spawn(function()
				for v49, v50 in ipairs(p23:getPlayers()) do
					p22.playerLocationService:registerPlayer(v50, u9, v45);
				end;
			end);
			v1.await(p22.gameTeleportService:teleportRetry(u9, p23:getPlayers(), v48));
			p22:logMatchFound(p23);
			u8 = true;
		else
			warn("[Queue]: Failed to find server access code for Party " .. p23:getLeader().Name);
		end;
	end;
end);
function v4.getMatchTeleportData(p28, p29, p30, p31)
	return {
		match = {
			matchId = p30.MatchId, 
			queueType = p29, 
			teamLeaderUserId = p31
		}, 
		party = {
			leaderUserId = p31
		}
	};
end;
function v4.getServerAccessCode(p32, p33)
	if not p32.serverAccessCodes then
		return "offline";
	end;
	return p32.serverAccessCodes:GetAsync(p33);
end;
function v4.saveServerAccessCode(p34, p35, p36)
	if p34.serverAccessCodes then
		p34.serverAccessCodes:SetAsync(p35, p36, 120);
	end;
end;
l__Reflect__2.defineMetadata(v4, "identifier", "@easy-games/lobby:server/services/queue-service@QueueService");
l__Reflect__2.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__2.defineMetadata(v4, "flamework:dependencies", { "@easy-games/lobby:server/services/playfab-service@PlayFabService", "@easy-games/lobby:server/services/matchmaking-service@MatchmakingService", "@easy-games/lobby:server/services/game-teleport-service@GameTeleportService", "@easy-games/game-core:server/services/notification-service@NotificationService", "@easy-games/lobby:server/services/player-location-service@PlayerLocationService" });
l__Reflect__2.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	QueueService = v4
};
