-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "PlayFabService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
local l__Settings__2 = v4.Settings;
local l__PlayerAdded__3 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).PlayerAdded;
function v5.constructor(p1, p2)
	p1.lobbyServerService = p2;
	p1.OnPlayerReady = u1.new();
	p1.playerSessions = {};
	local v7 = p1.lobbyServerService:getPlayFabConfig();
	l__Settings__2.titleId = v7.titleId;
	l__Settings__2.devSecretKey = v7.secretKey;
	l__PlayerAdded__3(function(p3)
		return p1:login(p3);
	end);
end;
function v5.onStart(p4)

end;
local l__PlayFabClient__4 = v4.PlayFabClient;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
local l__HttpService__6 = v1.import(script, v1.getModule(script, "@rbxts", "services")).HttpService;
local l__LobbyServerConfig__7 = v1.import(script, script.Parent.Parent, "config", "lobby-server-config").LobbyServerConfig;
function v5.login(p5, p6, p7)
	if p7 == nil then
		p7 = 0;
	end;
	local u8 = p7;
	l__PlayFabClient__4:LoginWithCustomID({
		CreateAccount = true, 
		CustomId = tostring(p6.UserId), 
		CustomTags = p5:getCustomTags(), 
		InfoRequestParameters = {
			GetCharacterInventories = false, 
			GetCharacterList = false, 
			GetPlayerProfile = true, 
			GetPlayerStatistics = false, 
			GetTitleData = false, 
			GetUserAccountInfo = false, 
			GetUserData = false, 
			GetUserInventory = false, 
			GetUserReadOnlyData = false, 
			GetUserVirtualCurrency = false
		}
	}):andThen((v1.async(function(p8)
		local v8 = p8.EntityToken;
		if v8 ~= nil then
			v8 = v8.Entity;
		end;
		local v9 = p8.EntityToken;
		if v9 ~= nil then
			v9 = v9.EntityToken;
		end;
		local l__SessionTicket__10 = p8.SessionTicket;
		if not v8 then
			error("Missing Entity");
		end;
		if v9 == "" or not v9 then
			error("Missing EntityToken");
		end;
		if l__SessionTicket__10 == "" or not l__SessionTicket__10 then
			error("Missing SessionTicket");
		end;
		local l__PlayFabId__11 = p8.PlayFabId;
		if l__PlayFabId__11 == "" or not l__PlayFabId__11 then
			error("No PlayFabId");
		end;
		local v12 = {
			Player = p6, 
			EntityToken = v9, 
			SessionTicket = l__SessionTicket__10, 
			Entity = v8, 
			PlayFabId = l__PlayFabId__11
		};
		p5.playerSessions[p6] = v12;
		p5.OnPlayerReady:Fire(p6, v12);
		local v13 = tostring(p6.UserId);
		local v14 = p8.InfoResultPayload;
		if v14 ~= nil then
			v14 = v14.PlayerProfile;
			if v14 ~= nil then
				v14 = v14.DisplayName;
			end;
		end;
		if v14 ~= v13 then
			print("PlayFab DisplayName for player " .. tostring(p6) .. " does not match, updating");
			v1.await(v1.Promise.retry(function()
				return l__PlayFabClient__4:UpdateUserTitleDisplayName(l__SessionTicket__10, {
					DisplayName = v13
				});
			end, 3):catch(function(p9)
				return warn("Error while updating PlayFab DisplayName for player " .. tostring(p6) .. ": " .. u5(p9));
			end));
			print("Updated PlayFab DisplayName for player " .. tostring(p6));
		end;
		print("Logged in and authenticated player " .. tostring(p6) .. " with PlayFab");
	end))):catch(function(p10)
		warn("Failed to authenticate player " .. tostring(p6) .. " with PlayFab:", u5(p10));
		local u9 = 1;
		v1.try(function()
			local l__Body__15 = p10.Body;
			if l__Body__15 ~= "" and l__Body__15 then
				local v16 = l__HttpService__6:JSONDecode(p10.Body);
				local l__retryAfterSeconds__17 = v16.retryAfterSeconds;
				if l__retryAfterSeconds__17 ~= 0 and l__retryAfterSeconds__17 == l__retryAfterSeconds__17 and l__retryAfterSeconds__17 then
					u9 = v16.retryAfterSeconds;
				end;
			end;
		end, function(p11)

		end);
		u8 = u8 + 1;
		if u8 <= 5 then
			task.wait(math.min(u9, 10));
			if p6.Parent ~= nil then
				p5:login(p6, u8);
				return nil;
			end;
		end;
		local l__analytics__18 = l__LobbyServerConfig__7.analytics;
		if l__analytics__18 ~= nil then
			l__analytics__18:track({
				userId = p6.UserId, 
				event = "MatchmakingLoginFail", 
				properties = {
					userId = p6.UserId, 
					errorInfo = p10, 
					retryDelaySec = u9
				}, 
				context = {
					jobId = game.JobId, 
					placeId = game.PlaceId
				}
			});
		end;
		p6:Kick("Failed to login to matchmaking: " .. u5(p10) .. "\n\nThis is a major bug, please report it in our community server and try again.");
	end);
end;
v5.loginByUserId = v1.async(function(p12, p13)
	local v19 = v1.await(l__PlayFabClient__4:LoginWithCustomID({
		CreateAccount = true, 
		CustomId = tostring(p13), 
		CustomTags = p12:getCustomTags(), 
		InfoRequestParameters = {
			GetCharacterInventories = false, 
			GetCharacterList = false, 
			GetPlayerProfile = true, 
			GetPlayerStatistics = false, 
			GetTitleData = false, 
			GetUserAccountInfo = false, 
			GetUserData = false, 
			GetUserInventory = false, 
			GetUserReadOnlyData = false, 
			GetUserVirtualCurrency = false
		}
	}));
	local v20 = v19.EntityToken;
	if v20 ~= nil then
		v20 = v20.Entity;
	end;
	local v21 = v19.EntityToken;
	if v21 ~= nil then
		v21 = v21.EntityToken;
	end;
	local l__SessionTicket__22 = v19.SessionTicket;
	local l__PlayFabId__23 = v19.PlayFabId;
	if not v20 then
		error("Missing Entity");
	end;
	if v21 == "" or not v21 then
		error("Missing EntityToken");
	end;
	if l__SessionTicket__22 == "" or not l__SessionTicket__22 then
		error("Missing SessionTicket");
	end;
	if l__PlayFabId__23 == "" or not l__PlayFabId__23 then
		error("No PlayFabId");
	end;
	return {
		EntityToken = v21, 
		SessionTicket = l__SessionTicket__22, 
		Entity = v20, 
		PlayFabId = l__PlayFabId__23
	};
end);
v5.getPlayerSession = v1.async(function(p14, p15)
	local v24 = p14.playerSessions[p15];
	if v24 then
		local v25 = v24;
	else
		v25 = nil;
	end;
	if v25 then
		return v25;
	end;
	warn(string.format("Session data for %s not found, yielding until it exists", p15.Name));
	local v26 = 0;
	while v26 <= 100 do
		v26 = v26 + 1;
		local v27 = p14.playerSessions[p15];
		if v27 then
			local v28 = v27;
		else
			v28 = nil;
		end;
		if v28 then
			print(string.format("Got session data for %s after %s attempts", p15.Name, v26));
			return v28;
		end;
		p14.OnPlayerReady:Wait();	
	end;
end);
local u10 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v5.bulkGetPlayerSessions(p16, p17)
	local v29 = {};
	local v30 = 0;
	local v31, v32, v33 = ipairs((u10.values(p16.playerSessions)));
	while true do
		v31(v32, v33);
		if not v31 then
			break;
		end;
		if table.find(p17, v32.Player) ~= nil == true then
			v30 = v30 + 1;
			v29[v30] = v32;
		end;	
	end;
	return v29;
end;
function v5.getPlayerSessions(p18)
	return p18.playerSessions;
end;
function v5.getCustomTags(p19)
	return {
		version = tostring(game.PlaceVersion)
	};
end;
local l__PlayFabAuthentication__11 = v4.PlayFabAuthentication;
v5.getServerEntity = v1.async(function(p20)
	if p20.cachedServerEntity then
		return p20.cachedServerEntity;
	end;
	v1.await(l__PlayFabAuthentication__11:GetEntityToken({
		Entity = {
			Type = "title", 
			Id = p20.lobbyServerService:getPlayFabConfig().titleId
		}, 
		CustomTags = p20:getCustomTags()
	}):andThen(function(p21)
		if p21.Entity then
			p20.cachedServerEntity = p21.Entity;
		end;
	end):catch(function(p22)
		warn("Error while retrieving server Entity");
		warn(p22);
	end));
	return p20.cachedServerEntity;
end);
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/lobby:server/services/playfab-service@PlayFabService");
l__Reflect__2.defineMetadata(v5, "flamework:parameters", { "@easy-games/lobby:server/services/lobby-server-service@LobbyServerService" });
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v3.Service, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	PlayFabService = v5
};
