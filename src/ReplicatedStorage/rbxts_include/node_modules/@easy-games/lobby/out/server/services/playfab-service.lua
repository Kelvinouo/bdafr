-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "PlayFabService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
local l__Settings__2 = v4.Settings;
local l__PlayerAdded__3 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).PlayerAdded;
function v5.constructor(p1, p2)
	p1.lobbyServerService = p2;
	p1.OnPlayerReady = u1.new();
	p1.playerSessions = {};
	local v7 = p1.lobbyServerService:getPlayFabConfig();
	l__Settings__2.titleId = v7.titleId;
	l__Settings__2.devSecretKey = v7.secretKey;
	l__PlayerAdded__3(function(p3)
		return p1:login(p3);
	end);
end;
function v5.onStart(p4)

end;
local l__PlayFabClient__4 = v4.PlayFabClient;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
local l__LobbyServerConfig__6 = v1.import(script, script.Parent.Parent, "config", "lobby-server-config").LobbyServerConfig;
function v5.login(p5, p6, p7)
	if p7 == nil then
		p7 = 0;
	end;
	local u7 = p7;
	l__PlayFabClient__4:LoginWithCustomID({
		CreateAccount = true, 
		CustomId = tostring(p6.UserId), 
		CustomTags = p5:getCustomTags(), 
		InfoRequestParameters = {
			GetCharacterInventories = false, 
			GetCharacterList = false, 
			GetPlayerProfile = true, 
			GetPlayerStatistics = false, 
			GetTitleData = false, 
			GetUserAccountInfo = false, 
			GetUserData = false, 
			GetUserInventory = false, 
			GetUserReadOnlyData = false, 
			GetUserVirtualCurrency = false
		}
	}):andThen((v1.async(function(p8)
		local v8 = p8.EntityToken;
		if v8 ~= nil then
			v8 = v8.Entity;
		end;
		local v9 = p8.EntityToken;
		if v9 ~= nil then
			v9 = v9.EntityToken;
		end;
		local l__SessionTicket__10 = p8.SessionTicket;
		if not v8 then
			error("Missing Entity");
		end;
		if v9 == "" or not v9 then
			error("Missing EntityToken");
		end;
		if l__SessionTicket__10 == "" or not l__SessionTicket__10 then
			error("Missing SessionTicket");
		end;
		local l__PlayFabId__11 = p8.PlayFabId;
		if l__PlayFabId__11 == "" or not l__PlayFabId__11 then
			error("No PlayFabId");
		end;
		local v12 = {
			Player = p6, 
			EntityToken = v9, 
			SessionTicket = l__SessionTicket__10, 
			Entity = v8, 
			PlayFabId = l__PlayFabId__11
		};
		p5.playerSessions[p6] = v12;
		p5.OnPlayerReady:Fire(p6, v12);
		local v13 = tostring(p6.UserId);
		local v14 = p8.InfoResultPayload;
		if v14 ~= nil then
			v14 = v14.PlayerProfile;
			if v14 ~= nil then
				v14 = v14.DisplayName;
			end;
		end;
		if v14 ~= v13 then
			print("PlayFab DisplayName for player " .. tostring(p6) .. " does not match, updating");
			v1.await(v1.Promise.retry(function()
				return l__PlayFabClient__4:UpdateUserTitleDisplayName(l__SessionTicket__10, {
					DisplayName = v13
				});
			end, 3):catch(function(p9)
				return warn("Error while updating PlayFab DisplayName for player " .. tostring(p6) .. ": " .. u5(p9));
			end));
			print("Updated PlayFab DisplayName for player " .. tostring(p6));
		end;
		print("Logged in and authenticated player " .. tostring(p6) .. " with PlayFab");
	end))):catch(function(p10)
		warn("Failed to authenticate player " .. tostring(p6) .. " with PlayFab:", u5(p10));
		u7 = u7 + 1;
		if u7 <= 5 then
			local v15 = p10.retryAfterSeconds;
			if v15 == nil then
				v15 = 1;
			end;
			task.wait(math.min(v15, 10));
			if p6.Parent ~= nil then
				p5:login(p6, u7);
				return nil;
			end;
		end;
		local l__analytics__16 = l__LobbyServerConfig__6.analytics;
		if l__analytics__16 ~= nil then
			l__analytics__16:track({
				userId = p6.UserId, 
				event = "MatchmakingLoginFail", 
				properties = {
					userId = p6.UserId, 
					errorInfo = p10
				}, 
				context = {
					jobId = game.JobId, 
					placeId = game.PlaceId
				}
			});
		end;
		p6:Kick("Failed to login to matchmaking: " .. u5(p10) .. "\n\nThis is a major bug, please report it in our community server and try again.");
	end);
end;
v5.loginByUserId = v1.async(function(p11, p12)
	local v17 = v1.await(l__PlayFabClient__4:LoginWithCustomID({
		CreateAccount = true, 
		CustomId = tostring(p12), 
		CustomTags = p11:getCustomTags(), 
		InfoRequestParameters = {
			GetCharacterInventories = false, 
			GetCharacterList = false, 
			GetPlayerProfile = true, 
			GetPlayerStatistics = false, 
			GetTitleData = false, 
			GetUserAccountInfo = false, 
			GetUserData = false, 
			GetUserInventory = false, 
			GetUserReadOnlyData = false, 
			GetUserVirtualCurrency = false
		}
	}));
	local v18 = v17.EntityToken;
	if v18 ~= nil then
		v18 = v18.Entity;
	end;
	local v19 = v17.EntityToken;
	if v19 ~= nil then
		v19 = v19.EntityToken;
	end;
	local l__SessionTicket__20 = v17.SessionTicket;
	local l__PlayFabId__21 = v17.PlayFabId;
	if not v18 then
		error("Missing Entity");
	end;
	if v19 == "" or not v19 then
		error("Missing EntityToken");
	end;
	if l__SessionTicket__20 == "" or not l__SessionTicket__20 then
		error("Missing SessionTicket");
	end;
	if l__PlayFabId__21 == "" or not l__PlayFabId__21 then
		error("No PlayFabId");
	end;
	return {
		EntityToken = v19, 
		SessionTicket = l__SessionTicket__20, 
		Entity = v18, 
		PlayFabId = l__PlayFabId__21
	};
end);
v5.getPlayerSession = v1.async(function(p13, p14)
	local v22 = p13.playerSessions[p14];
	if v22 then
		local v23 = v22;
	else
		v23 = nil;
	end;
	if v23 then
		return v23;
	end;
	warn(string.format("Session data for %s not found, yielding until it exists", p14.Name));
	local v24 = 0;
	while v24 <= 100 do
		v24 = v24 + 1;
		local v25 = p13.playerSessions[p14];
		if v25 then
			local v26 = v25;
		else
			v26 = nil;
		end;
		if v26 then
			print(string.format("Got session data for %s after %s attempts", p14.Name, v24));
			return v26;
		end;
		p13.OnPlayerReady:Wait();	
	end;
end);
local u8 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v5.bulkGetPlayerSessions(p15, p16)
	local v27 = {};
	local v28 = 0;
	local v29, v30, v31 = ipairs((u8.values(p15.playerSessions)));
	while true do
		v29(v30, v31);
		if not v29 then
			break;
		end;
		if table.find(p16, v30.Player) ~= nil == true then
			v28 = v28 + 1;
			v27[v28] = v30;
		end;	
	end;
	return v27;
end;
function v5.getPlayerSessions(p17)
	return p17.playerSessions;
end;
function v5.getCustomTags(p18)
	return {
		version = tostring(game.PlaceVersion)
	};
end;
local l__PlayFabAuthentication__9 = v4.PlayFabAuthentication;
v5.getServerEntity = v1.async(function(p19)
	if p19.cachedServerEntity then
		return p19.cachedServerEntity;
	end;
	v1.await(l__PlayFabAuthentication__9:GetEntityToken({
		Entity = {
			Type = "title", 
			Id = p19.lobbyServerService:getPlayFabConfig().titleId
		}, 
		CustomTags = p19:getCustomTags()
	}):andThen(function(p20)
		if p20.Entity then
			p19.cachedServerEntity = p20.Entity;
		end;
	end):catch(function(p21)
		warn("Error while retrieving server Entity");
		warn(p21);
	end));
	return p19.cachedServerEntity;
end);
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/lobby:server/services/playfab-service@PlayFabService");
l__Reflect__2.defineMetadata(v5, "flamework:parameters", { "@easy-games/lobby:server/services/lobby-server-service@LobbyServerService" });
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v3.Service, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	PlayFabService = v5
};
