-- Script Hash: 9629eb45c0753edb7e8853acc9edfa52985fce87bdfcdbe33fa2e5176d7348081e32f85616fd54043eab131a8fd3baf7
-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out);
local v5 = setmetatable({}, {
	__tostring = function()
		return "PlayFabService";
	end
});
v5.__index = v5;
function v5.new(...)
	local v6 = setmetatable({}, v5);
	return v6:constructor(...) and v6;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
local l__Settings__2 = v4.Settings;
local l__PlayerAdded__3 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).PlayerAdded;
function v5.constructor(p1, p2)
	p1.lobbyServerService = p2;
	p1.OnPlayerReady = u1.new();
	p1.playerSessions = {};
	local v7 = p1.lobbyServerService:getPlayFabConfig();
	l__Settings__2.titleId = v7.titleId;
	l__Settings__2.devSecretKey = v7.secretKey;
	l__PlayerAdded__3(function(p3)
		return p1:login(p3);
	end);
end;
function v5.onStart(p4)

end;
local l__PlayFabClient__4 = v4.PlayFabClient;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v5.login(p5, p6, p7)
	if p7 == nil then
		p7 = 0;
	end;
	local u6 = p7;
	v1.Promise.retry(function()
		return l__PlayFabClient__4:LoginWithCustomID({
			CreateAccount = true, 
			CustomId = tostring(p6.UserId), 
			CustomTags = p5:getCustomTags(), 
			InfoRequestParameters = {
				GetCharacterInventories = false, 
				GetCharacterList = false, 
				GetPlayerProfile = true, 
				GetPlayerStatistics = false, 
				GetTitleData = false, 
				GetUserAccountInfo = false, 
				GetUserData = false, 
				GetUserInventory = false, 
				GetUserReadOnlyData = false, 
				GetUserVirtualCurrency = false
			}
		});
	end, 3):andThen((v1.async(function(p8)
		local v8 = p8.EntityToken;
		if v8 ~= nil then
			v8 = v8.Entity;
		end;
		local v9 = p8.EntityToken;
		if v9 ~= nil then
			v9 = v9.EntityToken;
		end;
		local l__SessionTicket__10 = p8.SessionTicket;
		if not v8 then
			error("Missing Entity");
		end;
		if v9 == "" or not v9 then
			error("Missing EntityToken");
		end;
		if l__SessionTicket__10 == "" or not l__SessionTicket__10 then
			error("Missing SessionTicket");
		end;
		local l__PlayFabId__11 = p8.PlayFabId;
		if l__PlayFabId__11 == "" or not l__PlayFabId__11 then
			error("No PlayFabId");
		end;
		local v12 = {
			Player = p6, 
			EntityToken = v9, 
			SessionTicket = l__SessionTicket__10, 
			Entity = v8, 
			PlayFabId = l__PlayFabId__11
		};
		p5.playerSessions[p6] = v12;
		p5.OnPlayerReady:Fire(p6, v12);
		local v13 = tostring(p6.UserId);
		local v14 = p8.InfoResultPayload;
		if v14 ~= nil then
			v14 = v14.PlayerProfile;
			if v14 ~= nil then
				v14 = v14.DisplayName;
			end;
		end;
		if v14 ~= v13 then
			print("PlayFab DisplayName for player " .. tostring(p6) .. " does not match, updating");
			v1.await(v1.Promise.retry(function()
				return l__PlayFabClient__4:UpdateUserTitleDisplayName(l__SessionTicket__10, {
					DisplayName = v13
				});
			end, 3):catch(function(p9)
				return warn("Error while updating PlayFab DisplayName for player " .. tostring(p6) .. ": " .. u5(p9));
			end));
			print("Updated PlayFab DisplayName for player " .. tostring(p6));
		end;
		print("Logged in and authenticated player " .. tostring(p6) .. " with PlayFab");
	end))):catch(function(p10)
		warn("Failed to authenticate player " .. tostring(p6) .. " with PlayFab:", u5(p10));
		u6 = u6 + 1;
		if u6 <= 3 then
			wait(1);
			if p6.Parent ~= nil then
				p5:login(p6, u6);
				return nil;
			end;
		end;
		p6:Kick("Failed to login to matchmaking: " .. tostring(p10) .. "\n\nThis is a major bug, please report it in our community server and try again.");
	end);
end;
v5.loginByUserId = v1.async(function(p11, p12)
	local v15 = v1.await(l__PlayFabClient__4:LoginWithCustomID({
		CreateAccount = true, 
		CustomId = tostring(p12), 
		CustomTags = p11:getCustomTags(), 
		InfoRequestParameters = {
			GetCharacterInventories = false, 
			GetCharacterList = false, 
			GetPlayerProfile = true, 
			GetPlayerStatistics = false, 
			GetTitleData = false, 
			GetUserAccountInfo = false, 
			GetUserData = false, 
			GetUserInventory = false, 
			GetUserReadOnlyData = false, 
			GetUserVirtualCurrency = false
		}
	}));
	local v16 = v15.EntityToken;
	if v16 ~= nil then
		v16 = v16.Entity;
	end;
	local v17 = v15.EntityToken;
	if v17 ~= nil then
		v17 = v17.EntityToken;
	end;
	local l__SessionTicket__18 = v15.SessionTicket;
	local l__PlayFabId__19 = v15.PlayFabId;
	if not v16 then
		error("Missing Entity");
	end;
	if v17 == "" or not v17 then
		error("Missing EntityToken");
	end;
	if l__SessionTicket__18 == "" or not l__SessionTicket__18 then
		error("Missing SessionTicket");
	end;
	if l__PlayFabId__19 == "" or not l__PlayFabId__19 then
		error("No PlayFabId");
	end;
	return {
		EntityToken = v17, 
		SessionTicket = l__SessionTicket__18, 
		Entity = v16, 
		PlayFabId = l__PlayFabId__19
	};
end);
v5.getPlayerSession = v1.async(function(p13, p14)
	local function v20(p15)
		local v21 = p15[p14];
		if not v21 then
			return;
		end;
		return v21;
	end;
	local v22 = v20(p13.playerSessions);
	if v22 then
		return v22;
	end;
	warn(string.format("Session data for %s not found, yielding until it exists", p14.Name));
	local v23 = 0;
	while v23 <= 10 do
		v23 = v23 + 1;
		local v24 = v20(p13.playerSessions);
		if v24 then
			print(string.format("Got session data for %s after %s attempts", p14.Name, v23));
			return v24;
		end;
		p13.OnPlayerReady:Wait();	
	end;
end);
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v5.bulkGetPlayerSessions(p16, p17)
	local v25 = u7.values(p16.playerSessions);
	local function v26(p18)
		return table.find(p17, p18.Player) ~= nil;
	end;
	local v27 = {};
	local v28 = 0;
	for v29, v30 in ipairs(v25) do
		if v26(v30, v29 - 1, v25) == true then
			v28 = v28 + 1;
			v27[v28] = v30;
		end;
	end;
	return v27;
end;
function v5.getPlayerSessions(p19)
	return p19.playerSessions;
end;
function v5.getCustomTags(p20)
	return {
		version = tostring(game.PlaceVersion)
	};
end;
local l__PlayFabAuthentication__8 = v4.PlayFabAuthentication;
v5.getServerEntity = v1.async(function(p21)
	if p21.cachedServerEntity then
		return p21.cachedServerEntity;
	end;
	v1.await(l__PlayFabAuthentication__8:GetEntityToken({
		Entity = {
			Type = "title", 
			Id = p21.lobbyServerService:getPlayFabConfig().titleId
		}, 
		CustomTags = p21:getCustomTags()
	}):andThen(function(p22)
		if p22.Entity then
			p21.cachedServerEntity = p22.Entity;
		end;
	end):catch(function(p23)
		warn("Error while retrieving server Entity");
		warn(p23);
	end));
	return p21.cachedServerEntity;
end);
l__Reflect__2.defineMetadata(v5, "identifier", "@easy-games/lobby:server/services/playfab-service@PlayFabService");
l__Reflect__2.defineMetadata(v5, "flamework:parameters", { "@easy-games/lobby:server/services/lobby-server-service@LobbyServerService" });
l__Reflect__2.defineMetadata(v5, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v5, "$:flamework@Service", v3.Service, { {} });
l__Reflect__2.decorate(v5, "$:flamework@External", v3.External, {});
return {
	PlayFabService = v5
};
