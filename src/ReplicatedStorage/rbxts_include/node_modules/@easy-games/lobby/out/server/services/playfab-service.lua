-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out);
local v4 = setmetatable({}, {
	__tostring = function()
		return "PlayFabService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = v1.import(script, v1.getModule(script, "@rbxts", "signal"));
local l__Settings__2 = v3.Settings;
local l__PlayerAdded__3 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).PlayerAdded;
function v4.constructor(p1, p2)
	p1.lobbyServerService = p2;
	p1.OnPlayerReady = u1.new();
	p1.playerSessions = {};
	local v6 = p1.lobbyServerService:getPlayFabConfig();
	l__Settings__2.titleId = v6.titleId;
	l__Settings__2.devSecretKey = v6.secretKey;
	l__PlayerAdded__3(function(p3)
		return p1:login(p3);
	end);
end;
function v4.onStart(p4)

end;
local l__PlayFabClient__4 = v3.PlayFabClient;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v4.login(p5, p6, p7)
	if p7 == nil then
		p7 = 0;
	end;
	local u6 = p7;
	v1.Promise.retry(function()
		return l__PlayFabClient__4:LoginWithCustomID({
			CreateAccount = true, 
			CustomId = tostring(p6.UserId), 
			CustomTags = p5:getCustomTags(), 
			InfoRequestParameters = {
				GetCharacterInventories = false, 
				GetCharacterList = false, 
				GetPlayerProfile = true, 
				GetPlayerStatistics = false, 
				GetTitleData = false, 
				GetUserAccountInfo = false, 
				GetUserData = false, 
				GetUserInventory = false, 
				GetUserReadOnlyData = false, 
				GetUserVirtualCurrency = false
			}
		});
	end, 3):andThen((v1.async(function(p8)
		local v7 = p8.EntityToken;
		if v7 ~= nil then
			v7 = v7.Entity;
		end;
		local v8 = p8.EntityToken;
		if v8 ~= nil then
			v8 = v8.EntityToken;
		end;
		local l__SessionTicket__9 = p8.SessionTicket;
		if not v7 then
			error("Missing Entity");
		end;
		if v8 == "" or not v8 then
			error("Missing EntityToken");
		end;
		if l__SessionTicket__9 == "" or not l__SessionTicket__9 then
			error("Missing SessionTicket");
		end;
		local l__PlayFabId__10 = p8.PlayFabId;
		if l__PlayFabId__10 == "" or not l__PlayFabId__10 then
			error("No PlayFabId");
		end;
		local v11 = {
			Player = p6, 
			EntityToken = v8, 
			SessionTicket = l__SessionTicket__9, 
			Entity = v7, 
			PlayFabId = l__PlayFabId__10
		};
		p5.playerSessions[p6] = v11;
		p5.OnPlayerReady:Fire(p6, v11);
		local v12 = tostring(p6.UserId);
		local v13 = p8.InfoResultPayload;
		if v13 ~= nil then
			v13 = v13.PlayerProfile;
			if v13 ~= nil then
				v13 = v13.DisplayName;
			end;
		end;
		if v13 ~= v12 then
			print("PlayFab DisplayName for player " .. tostring(p6) .. " does not match, updating");
			v1.await(v1.Promise.retry(function()
				return l__PlayFabClient__4:UpdateUserTitleDisplayName(l__SessionTicket__9, {
					DisplayName = v12
				});
			end, 3):catch(function(p9)
				return warn("Error while updating PlayFab DisplayName for player " .. tostring(p6) .. ": " .. u5(p9));
			end));
			print("Updated PlayFab DisplayName for player " .. tostring(p6));
		end;
		print("Logged in and authenticated player " .. tostring(p6) .. " with PlayFab");
	end))):catch(function(p10)
		warn("Failed to authenticate player " .. tostring(p6) .. " with PlayFab:", u5(p10));
		u6 = u6 + 1;
		if u6 <= 3 then
			wait(1);
			if p6.Parent ~= nil then
				p5:login(p6, u6);
				return nil;
			end;
		end;
		p6:Kick("Failed to login to matchmaking: " .. tostring(p10) .. "\n\nThis is a major bug, please report it in our community server and try again.");
	end);
end;
v4.loginByUserId = v1.async(function(p11, p12)
	local v14 = v1.await(l__PlayFabClient__4:LoginWithCustomID({
		CreateAccount = true, 
		CustomId = tostring(p12), 
		CustomTags = p11:getCustomTags(), 
		InfoRequestParameters = {
			GetCharacterInventories = false, 
			GetCharacterList = false, 
			GetPlayerProfile = true, 
			GetPlayerStatistics = false, 
			GetTitleData = false, 
			GetUserAccountInfo = false, 
			GetUserData = false, 
			GetUserInventory = false, 
			GetUserReadOnlyData = false, 
			GetUserVirtualCurrency = false
		}
	}));
	local v15 = v14.EntityToken;
	if v15 ~= nil then
		v15 = v15.Entity;
	end;
	local v16 = v14.EntityToken;
	if v16 ~= nil then
		v16 = v16.EntityToken;
	end;
	local l__SessionTicket__17 = v14.SessionTicket;
	local l__PlayFabId__18 = v14.PlayFabId;
	if not v15 then
		error("Missing Entity");
	end;
	if v16 == "" or not v16 then
		error("Missing EntityToken");
	end;
	if l__SessionTicket__17 == "" or not l__SessionTicket__17 then
		error("Missing SessionTicket");
	end;
	if l__PlayFabId__18 == "" or not l__PlayFabId__18 then
		error("No PlayFabId");
	end;
	return {
		EntityToken = v16, 
		SessionTicket = l__SessionTicket__17, 
		Entity = v15, 
		PlayFabId = l__PlayFabId__18
	};
end);
v4.getPlayerSession = v1.async(function(p13, p14)
	local function v19(p15)
		local v20 = p15[p14];
		if not v20 then
			return;
		end;
		return v20;
	end;
	local v21 = v19(p13.playerSessions);
	if v21 then
		return v21;
	end;
	warn(string.format("Session data for %s not found, yielding until it exists", p14.Name));
	local v22 = 0;
	while v22 <= 10 do
		v22 = v22 + 1;
		local v23 = v19(p13.playerSessions);
		if v23 then
			print(string.format("Got session data for %s after %s attempts", p14.Name, v22));
			return v23;
		end;
		p13.OnPlayerReady:Wait();	
	end;
end);
local u7 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v4.bulkGetPlayerSessions(p16, p17)
	local v24 = u7.values(p16.playerSessions);
	local function v25(p18)
		return table.find(p17, p18.Player) ~= nil;
	end;
	local v26 = {};
	local v27 = 0;
	for v28, v29 in ipairs(v24) do
		if v25(v29, v28 - 1, v24) == true then
			v27 = v27 + 1;
			v26[v27] = v29;
		end;
	end;
	return v26;
end;
function v4.getPlayerSessions(p19)
	return p19.playerSessions;
end;
function v4.getCustomTags(p20)
	return {
		version = tostring(game.PlaceVersion)
	};
end;
local l__PlayFabAuthentication__8 = v3.PlayFabAuthentication;
v4.getServerEntity = v1.async(function(p21)
	if p21.cachedServerEntity then
		return p21.cachedServerEntity;
	end;
	v1.await(l__PlayFabAuthentication__8:GetEntityToken({
		Entity = {
			Type = "title", 
			Id = p21.lobbyServerService:getPlayFabConfig().titleId
		}, 
		CustomTags = p21:getCustomTags()
	}):andThen(function(p22)
		if p22.Entity then
			p21.cachedServerEntity = p22.Entity;
		end;
	end):catch(function(p23)
		warn("Error while retrieving server Entity");
		warn(p23);
	end));
	return p21.cachedServerEntity;
end);
l__Reflect__2.defineMetadata(v4, "identifier", "@easy-games/lobby:server/services/playfab-service@PlayFabService");
l__Reflect__2.defineMetadata(v4, "flamework:isExternal", true);
l__Reflect__2.defineMetadata(v4, "flamework:dependencies", { "@easy-games/lobby:server/services/lobby-server-service@LobbyServerService" });
l__Reflect__2.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__2.defineMetadata(v4, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	PlayFabService = v4
};
