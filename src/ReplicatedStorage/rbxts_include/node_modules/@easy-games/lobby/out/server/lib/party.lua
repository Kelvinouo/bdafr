-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out);
local v3 = setmetatable({}, {
	__tostring = function()
		return "Party";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__QueueState__1 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
function v3.constructor(p1, p2)
	p1.leader = p2;
	p1.invitedPlayerUserIds = {};
	p1.queueState = l__QueueState__1.NONE;
	p1.members = {};
end;
function v3.getLeader(p3)
	return p3.leader;
end;
function v3.getMembers(p4)
	return p4.members;
end;
function v3.getPlayers(p5)
	local v5 = { p5:getLeader() };
	local v6 = p5:getMembers();
	table.move(v6, 1, #v6, #v5 + 1, v5);
	return v5;
end;
local l__PartyRole__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party-role").PartyRole;
function v3.getPlayerRole(p6, p7)
	if p6.leader == p7 then
		return l__PartyRole__2.LEADER;
	end;
	if table.find(p6.members, p7) ~= nil then
		return l__PartyRole__2.MEMBER;
	end;
	return l__PartyRole__2.NONE;
end;
local l__LobbyNetFunctions__3 = v1.import(script, script.Parent.Parent.Parent, "shared", "lobby-networking").LobbyNetFunctions;
function v3.invitePlayer(p8, p9, p10)
	if p8.invitedPlayerUserIds[p9.UserId] == nil then
		p8.invitedPlayerUserIds[p9.UserId] = true;
		local v7, v8 = v1.Promise.retry(v1.async(function()
			local u4 = false;
			v1.try(function()
				u4 = v1.await(l__LobbyNetFunctions__3.server.receivedPartyInvite:invoke(p9, {
					invite = {
						fromPlayer = p10, 
						time = os.time()
					}
				}));
			end, function(p11)
				wait(0.5);
				error("Client failed to receive party invite.");
			end);
			return false;
		end), 10):await();
		if not v7 then
			p8.invitedPlayerUserIds[p9.UserId] = nil;
		end;
	end;
end;
function v3.isInvited(p12, p13)
	return p12.invitedPlayerUserIds[p13.UserId] ~= nil;
end;
function v3.addPlayer(p14, p15)
	if table.find(p14.members, p15) == nil then
		local l__members__9 = p14.members;
		l__members__9[#l__members__9 + 1] = p15;
	end;
end;
function v3.removePlayer(p16, p17)
	if table.find(p16.members, p17) ~= nil then
		table.remove(p16.members, (table.find(p16.members, p17) and 0) - 1 + 1);
	end;
end;
function v3.cancelInvite(p18, p19)
	p18.invitedPlayerUserIds[p19] = nil;
end;
function v3.getQueueData(p20)
	return p20.queueData;
end;
local l__OfflinePlayerUtil__5 = v2.OfflinePlayerUtil;
local u6 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v3.getDto(p21)
	local v10 = nil;
	if p21.queueData then
		local v11 = {};
		for v12, v13 in pairs(p21.queueData) do
			v11[v12] = v13;
		end;
		v11.ticketId = "";
		v10 = v11;
	end;
	local v14 = {
		leader = l__OfflinePlayerUtil__5.getOfflinePlayer(p21.leader)
	};
	local l__members__15 = p21.members;
	local v16 = table.create(#l__members__15);
	for v17, v18 in ipairs(l__members__15) do
		v16[v17] = l__OfflinePlayerUtil__5.getOfflinePlayer(v18);
	end;
	v14.members = v16;
	v14.queueData = v10;
	v14.queueState = p21.queueState;
	v14.outgoingInviteUserIds = u6.keys(p21.invitedPlayerUserIds);
	return v14;
end;
function v3.setQueueData(p22, p23)
	p22.queueData = p23;
end;
local l__LobbyServerEvents__7 = v1.import(script, script.Parent.Parent, "events", "events").LobbyServerEvents;
function v3.sendPartyInfoEvent(p24)
	l__LobbyServerEvents__7.partyInfoEvent:fire(p24:getPlayers(), {
		party = p24:getDto()
	});
end;
function v3.getQueueState(p25)
	return p25.queueState;
end;
function v3.setQueueState(p26, p27)
	p26.queueState = p27;
end;
local u8 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v3.toString(p28)
	return "Party: Leader=" .. p28.leader.Name .. " Members=" .. u8(p28.members) .. " QueueState=" .. tostring(p28.queueState) .. " QueueData=" .. u8(p28.queueData);
end;
local l__Flamework__9 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Flamework;
function v3.getSkillRating(p29, p30)
	local v19 = l__Flamework__9.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p30);
	if not v19.skillResolver then
		return 0;
	end;
	return v19.skillResolver(p29:getPlayers());
end;
local l__DeviceType__10 = v2.DeviceType;
function v3.isMobileOnly(p31)
	for v20, v21 in ipairs(p31:getPlayers()) do
		local v22 = l__Flamework__9.resolveDependency("@easy-games/lobby:server/services/device-info-service@DeviceInfoService"):getDeviceInfo(v21.UserId);
		if not v22 then
			return false;
		end;
		if v22.device ~= l__DeviceType__10.Mobile then
			return false;
		end;
	end;
	return true;
end;
function v3.__tostring(p32)
	return p32:toString();
end;
v3.MAX_SIZE = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party").PARTY_SIZE_MAX;
return {
	Party = v3
};
