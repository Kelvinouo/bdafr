-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = setmetatable({}, {
	__tostring = function()
		return "Party";
	end
});
v2.__index = v2;
function v2.new(...)
	local v3 = setmetatable({}, v2);
	return v3:constructor(...) and v3;
end;
local l__QueueState__1 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
function v2.constructor(p1, p2)
	p1.leader = p2;
	p1.invitedPlayerUserIds = {};
	p1.queueState = l__QueueState__1.NONE;
	p1.members = {};
end;
function v2.getLeader(p3)
	return p3.leader;
end;
function v2.getMembers(p4)
	return p4.members;
end;
function v2.getPlayers(p5)
	local v4 = { p5:getLeader() };
	local v5 = p5:getMembers();
	table.move(v5, 1, #v5, #v4 + 1, v4);
	return v4;
end;
local l__PartyRole__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party-role").PartyRole;
function v2.getPlayerRole(p6, p7)
	if p6.leader == p7 then
		return l__PartyRole__2.LEADER;
	end;
	if table.find(p6.members, p7) ~= nil then
		return l__PartyRole__2.MEMBER;
	end;
	return l__PartyRole__2.NONE;
end;
local l__LobbyServerEvents__3 = v1.import(script, script.Parent.Parent, "events", "events").LobbyServerEvents;
function v2.invitePlayer(p8, p9, p10)
	if p8.invitedPlayerUserIds[p9.UserId] == nil then
		p8.invitedPlayerUserIds[p9.UserId] = true;
		l__LobbyServerEvents__3.receivedPartyInvite:fire(p9, {
			invite = {
				fromPlayer = p10, 
				time = os.time()
			}
		});
	end;
end;
function v2.isInvited(p11, p12)
	return p11.invitedPlayerUserIds[p12.UserId] ~= nil;
end;
function v2.addPlayer(p13, p14)
	if table.find(p13.members, p14) == nil then
		local l__members__6 = p13.members;
		l__members__6[#l__members__6 + 1] = p14;
	end;
end;
function v2.removePlayer(p15, p16)
	if table.find(p15.members, p16) ~= nil then
		table.remove(p15.members, (table.find(p15.members, p16) and 0) - 1 + 1);
	end;
end;
function v2.cancelInvite(p17, p18)
	p17.invitedPlayerUserIds[p18] = nil;
end;
function v2.getQueueData(p19)
	return p19.queueData;
end;
local l__OfflinePlayerUtil__4 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).OfflinePlayerUtil;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v2.getDto(p20)
	local v7 = nil;
	if p20.queueData then
		local v8 = {};
		for v9, v10 in pairs(p20.queueData) do
			v8[v9] = v10;
		end;
		v8.ticketId = "";
		v7 = v8;
	end;
	local v11 = {
		leader = l__OfflinePlayerUtil__4.getOfflinePlayer(p20.leader)
	};
	local l__members__12 = p20.members;
	local v13 = table.create(#l__members__12);
	for v14, v15 in ipairs(l__members__12) do
		v13[v14] = l__OfflinePlayerUtil__4.getOfflinePlayer(v15);
	end;
	v11.members = v13;
	v11.queueData = v7;
	v11.queueState = p20.queueState;
	v11.outgoingInviteUserIds = u5.keys(p20.invitedPlayerUserIds);
	return v11;
end;
function v2.setQueueData(p21, p22)
	p21.queueData = p22;
end;
function v2.sendPartyInfoEvent(p23)
	l__LobbyServerEvents__3.partyInfoEvent:fire(p23:getPlayers(), {
		party = p23:getDto()
	});
end;
function v2.getQueueState(p24)
	return p24.queueState;
end;
function v2.setQueueState(p25, p26)
	p25.queueState = p26;
end;
local u6 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v2.toString(p27)
	return "Party: Leader=" .. p27.leader.Name .. " Members=" .. u6(p27.members) .. " QueueState=" .. tostring(p27.queueState) .. " QueueData=" .. u6(p27.queueData);
end;
local l__Flamework__7 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Flamework;
function v2.getSkillRating(p28, p29)
	local v16 = l__Flamework__7.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p29);
	if not v16.skillResolver then
		return 0;
	end;
	return v16.skillResolver(p28:getPlayers());
end;
function v2.__tostring(p30)
	return p30:toString();
end;
v2.MAX_SIZE = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party").PARTY_SIZE_MAX;
return {
	Party = v2
};
