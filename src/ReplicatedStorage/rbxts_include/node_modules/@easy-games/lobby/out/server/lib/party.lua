-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out);
local v3 = setmetatable({}, {
	__tostring = function()
		return "Party";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__Flamework__1 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Flamework;
local l__QueueState__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
function v3.constructor(p1, p2)
	p1.leader = p2;
	p1.partyService = l__Flamework__1.resolveDependency("@easy-games/lobby:server/services/party-service@PartyService");
	p1.invitedPlayerUserIds = {};
	p1.queueState = l__QueueState__2.NONE;
	p1.members = {};
end;
function v3.getLeader(p3)
	return p3.leader;
end;
function v3.getMembers(p4)
	return p4.members;
end;
function v3.getPlayers(p5)
	local v5 = { p5:getLeader() };
	local v6 = p5:getMembers();
	table.move(v6, 1, #v6, #v5 + 1, v5);
	return v5;
end;
local l__PartyRole__3 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party-role").PartyRole;
function v3.getPlayerRole(p6, p7)
	if p6.leader == p7 then
		return l__PartyRole__3.LEADER;
	end;
	if table.find(p6.members, p7) ~= nil then
		return l__PartyRole__3.MEMBER;
	end;
	return l__PartyRole__3.NONE;
end;
local l__LobbyServerConfig__4 = v1.import(script, script.Parent.Parent, "config", "lobby-server-config").LobbyServerConfig;
local l__MapUtil__5 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
local l__ExpireList__6 = v2.ExpireList;
local l__Workspace__7 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace;
local l__LobbyNetFunctions__8 = v1.import(script, script.Parent.Parent.Parent, "shared", "lobby-networking").LobbyNetFunctions;
function v3.invitePlayer(p8, p9, p10)
	local v7 = 10;
	if table.find(l__LobbyServerConfig__4.lobbyPlaceIds, game.PlaceId) == nil then
		v7 = 300;
	end;
	if p8.invitedPlayerUserIds[p9.UserId] == nil then
		local u9 = l__MapUtil__5.getOrCreate(p8.partyService.inviteExpireLists, tostring(p10.userId) .. "_" .. tostring(p9.UserId), l__ExpireList__6.new(v7));
		task.spawn(function()
			if p9:IsFriendsWith(p10.userId) then
				u9:clear();
			end;
		end);
		if not (#u9:getValues() >= 3) then
			u9:add(l__Workspace__7:GetServerTimeNow());
			p8.invitedPlayerUserIds[p9.UserId] = true;
			local v8, v9 = v1.Promise.retry(v1.async(function()
				local u10 = false;
				v1.try(function()
					u10 = v1.await(l__LobbyNetFunctions__8.server.receivedPartyInvite:invoke(p9, {
						invite = {
							fromPlayer = p10, 
							time = os.time()
						}
					}));
				end, function(p11)
					wait(0.5);
					error("Client failed to receive party invite.");
				end);
				return false;
			end), 10):await();
			if not v8 then
				p8.invitedPlayerUserIds[p9.UserId] = nil;
			end;
			return;
		end;
	else
		return;
	end;
	return nil;
end;
function v3.isInvited(p12, p13)
	return p12.invitedPlayerUserIds[p13.UserId] ~= nil;
end;
function v3.addPlayer(p14, p15)
	if table.find(p14.members, p15) == nil then
		local l__members__10 = p14.members;
		l__members__10[#l__members__10 + 1] = p15;
	end;
end;
function v3.removePlayer(p16, p17)
	if table.find(p16.members, p17) ~= nil then
		table.remove(p16.members, (table.find(p16.members, p17) and 0) - 1 + 1);
	end;
end;
function v3.cancelInvite(p18, p19)
	p18.invitedPlayerUserIds[p19] = nil;
end;
function v3.getQueueData(p20)
	return p20.queueData;
end;
local l__OfflinePlayerUtil__11 = v2.OfflinePlayerUtil;
local u12 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v3.getDto(p21)
	local v11 = nil;
	if p21.queueData then
		local v12 = {};
		for v13, v14 in pairs(p21.queueData) do
			v12[v13] = v14;
		end;
		v12.ticketId = "";
		v11 = v12;
	end;
	local v15 = {
		leader = l__OfflinePlayerUtil__11.getOfflinePlayer(p21.leader)
	};
	local l__members__16 = p21.members;
	local v17 = table.create(#l__members__16);
	local v18, v19, v20 = ipairs(l__members__16);
	while true do
		v18(v19, v20);
		if not v18 then
			break;
		end;
		v20 = v18;
		v17[v18] = l__OfflinePlayerUtil__11.getOfflinePlayer(v19);	
	end;
	v15.members = v17;
	v15.queueData = v11;
	v15.queueState = p21.queueState;
	v15.outgoingInviteUserIds = u12.keys(p21.invitedPlayerUserIds);
	return v15;
end;
function v3.setQueueData(p22, p23)
	p22.queueData = p23;
end;
local l__LobbyServerEvents__13 = v1.import(script, script.Parent.Parent, "events", "events").LobbyServerEvents;
function v3.sendPartyInfoEvent(p24)
	l__LobbyServerEvents__13.partyInfoEvent:fire(p24:getPlayers(), {
		party = p24:getDto()
	});
end;
function v3.getQueueState(p25)
	return p25.queueState;
end;
function v3.setQueueState(p26, p27)
	p26.queueState = p27;
end;
local u14 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v3.toString(p28)
	return "Party: Leader=" .. p28.leader.Name .. " Members=" .. u14(p28.members) .. " QueueState=" .. tostring(p28.queueState) .. " QueueData=" .. u14(p28.queueData);
end;
function v3.getSkillRating(p29, p30)
	local v21 = l__Flamework__1.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p30);
	if not v21.skillResolver then
		return 0;
	end;
	return v21.skillResolver(p29:getPlayers());
end;
local l__DeviceType__15 = v2.DeviceType;
function v3.isMobileOnly(p31)
	local v22, v23, v24 = ipairs(p31:getPlayers());
	while true do
		v22(v23, v24);
		if not v22 then
			break;
		end;
		v24 = v22;
		local v25 = l__Flamework__1.resolveDependency("@easy-games/lobby:server/services/device-info-service@DeviceInfoService"):getDeviceInfo(v23.UserId);
		if not v25 then
			return false;
		end;
		if v25.device ~= l__DeviceType__15.Mobile then
			return false;
		end;	
	end;
	return true;
end;
function v3.__tostring(p32)
	return p32:toString();
end;
v3.MAX_SIZE = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party").PARTY_SIZE_MAX;
return {
	Party = v3
};
