-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out);
local v3 = setmetatable({}, {
	__tostring = function()
		return "Party";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
local l__QueueState__1 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
function v3.constructor(p1, p2)
	p1.leader = p2;
	p1.invitedPlayerUserIds = {};
	p1.queueState = l__QueueState__1.NONE;
	p1.members = {};
end;
function v3.getLeader(p3)
	return p3.leader;
end;
function v3.getMembers(p4)
	return p4.members;
end;
function v3.getPlayers(p5)
	local v5 = { p5:getLeader() };
	local v6 = p5:getMembers();
	table.move(v6, 1, #v6, #v5 + 1, v5);
	return v5;
end;
local l__PartyRole__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party-role").PartyRole;
function v3.getPlayerRole(p6, p7)
	if p6.leader == p7 then
		return l__PartyRole__2.LEADER;
	end;
	if table.find(p6.members, p7) ~= nil then
		return l__PartyRole__2.MEMBER;
	end;
	return l__PartyRole__2.NONE;
end;
local l__LobbyServerEvents__3 = v1.import(script, script.Parent.Parent, "events", "events").LobbyServerEvents;
function v3.invitePlayer(p8, p9, p10)
	if p8.invitedPlayerUserIds[p9.UserId] == nil then
		p8.invitedPlayerUserIds[p9.UserId] = true;
		l__LobbyServerEvents__3.receivedPartyInvite:fire(p9, {
			invite = {
				fromPlayer = p10, 
				time = os.time()
			}
		});
	end;
end;
function v3.isInvited(p11, p12)
	return p11.invitedPlayerUserIds[p12.UserId] ~= nil;
end;
function v3.addPlayer(p13, p14)
	if table.find(p13.members, p14) == nil then
		local l__members__7 = p13.members;
		l__members__7[#l__members__7 + 1] = p14;
	end;
end;
function v3.removePlayer(p15, p16)
	if table.find(p15.members, p16) ~= nil then
		table.remove(p15.members, (table.find(p15.members, p16) and 0) - 1 + 1);
	end;
end;
function v3.cancelInvite(p17, p18)
	p17.invitedPlayerUserIds[p18] = nil;
end;
function v3.getQueueData(p19)
	return p19.queueData;
end;
local l__OfflinePlayerUtil__4 = v2.OfflinePlayerUtil;
local u5 = v1.import(script, v1.getModule(script, "@rbxts", "object-utils"));
function v3.getDto(p20)
	local v8 = nil;
	if p20.queueData then
		local v9 = {};
		for v10, v11 in pairs(p20.queueData) do
			v9[v10] = v11;
		end;
		v9.ticketId = "";
		v8 = v9;
	end;
	local v12 = {
		leader = l__OfflinePlayerUtil__4.getOfflinePlayer(p20.leader)
	};
	local l__members__13 = p20.members;
	local v14 = table.create(#l__members__13);
	for v15, v16 in ipairs(l__members__13) do
		v14[v15] = l__OfflinePlayerUtil__4.getOfflinePlayer(v16);
	end;
	v12.members = v14;
	v12.queueData = v8;
	v12.queueState = p20.queueState;
	v12.outgoingInviteUserIds = u5.keys(p20.invitedPlayerUserIds);
	return v12;
end;
function v3.setQueueData(p21, p22)
	p21.queueData = p22;
end;
function v3.sendPartyInfoEvent(p23)
	l__LobbyServerEvents__3.partyInfoEvent:fire(p23:getPlayers(), {
		party = p23:getDto()
	});
end;
function v3.getQueueState(p24)
	return p24.queueState;
end;
function v3.setQueueState(p25, p26)
	p25.queueState = p26;
end;
local u6 = v1.import(script, v1.getModule(script, "@rbxts", "inspect").inspect);
function v3.toString(p27)
	return "Party: Leader=" .. p27.leader.Name .. " Members=" .. u6(p27.members) .. " QueueState=" .. tostring(p27.queueState) .. " QueueData=" .. u6(p27.queueData);
end;
local l__Flamework__7 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Flamework;
function v3.getSkillRating(p28, p29)
	local v17 = l__Flamework__7.resolveDependency("@easy-games/lobby:server/services/lobby-server-service@LobbyServerService"):getQueueMeta(p29);
	if not v17.skillResolver then
		return 0;
	end;
	return v17.skillResolver(p28:getPlayers());
end;
local l__DeviceType__8 = v2.DeviceType;
function v3.isMobileOnly(p30)
	for v18, v19 in ipairs(p30:getPlayers()) do
		local v20 = l__Flamework__7.resolveDependency("@easy-games/lobby:server/services/device-info-service@DeviceInfoService"):getDeviceInfo(v19.UserId);
		if not v20 then
			return false;
		end;
		if v20.device ~= l__DeviceType__8.Mobile then
			return false;
		end;
	end;
	return true;
end;
function v3.__tostring(p31)
	return p31:toString();
end;
v3.MAX_SIZE = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "party").PARTY_SIZE_MAX;
return {
	Party = v3
};
