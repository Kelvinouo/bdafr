-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = setmetatable({}, {
	__tostring = function()
		return "MatchmakingService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
function v4.constructor(p1, p2, p3)
	p1.playFabService = p2;
	p1.deviceInfoService = p3;
	p1.matchFoundObservers = {};
	p1.partiesInQueue = {};
	function p1.partyProducer()
		return {};
	end;
end;
function v4.onStart(p4)
	p4:pollMatchmakingTickets();
end;
local l__PlayFabMultiplayer__1 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out).PlayFabMultiplayer;
v4.createMatchmakingTicketForParty = v1.async(function(p5, p6, p7)
	local v6 = p6:getLeader();
	local v7 = v1.await(p5.playFabService:getPlayerSession(v6));
	if not v7 then
		return nil;
	end;
	local v8 = p6:getMembers();
	local v9 = p5.playFabService:bulkGetPlayerSessions(v8);
	local v10 = {
		Creator = p5:createMatchmakingPlayer(v7, {
			skill = p6:getSkillRating(p7)
		}), 
		GiveUpAfterSeconds = 120, 
		QueueName = p7
	};
	local function v11(p8)
		return p8.Entity;
	end;
	local v12 = table.create(#v9);
	for v13, v14 in ipairs(v9) do
		v12[v13] = v11(v14, v13 - 1, v9);
	end;
	v10.MembersToMatchWith = v12;
	local v15 = v1.await(l__PlayFabMultiplayer__1:CreateMatchmakingTicket(v7.EntityToken, v10));
	p5.partiesInQueue[p6] = os.clock();
	print("[Matchmaker] Created primary matchmaking ticket for party leader: " .. tostring(v6));
	local v16 = table.create(#v8);
	local v17, v18, v19 = ipairs(v8);
	while true do
		local v20, v21 = v17(v18, v19);
		if not v20 then
			break;
		end;
		local function v22(p9)
			return p9.Player == v21;
		end;
		local v23 = nil;
		for v24, v25 in ipairs(v9) do
			if v22(v25, v24 - 1, v9) == true then
				v23 = v25;
				break;
			end;
		end;
		if v23 then
			v16[#v16 + 1] = l__PlayFabMultiplayer__1:JoinMatchmakingTicket(v23.EntityToken, {
				TicketId = v15.TicketId, 
				QueueName = p7, 
				Member = p5:createMatchmakingPlayer(v23, {
					skill = p6:getSkillRating(p7)
				})
			});
		end;	
	end;
	print("[Matchmaker] Added " .. tostring(#v16) .. " party members to the ticket");
	v1.await(v1.Promise.all(v16));
	return v15;
end);
v4.bulkCancelMatchmakingTickets = v1.async(function(p10, p11, p12)
	for v26, v27 in ipairs(p11) do
		v1.try(function()
			v1.await(l__PlayFabMultiplayer__1:CancelAllMatchmakingTicketsForPlayer(v27.EntityToken, {
				QueueName = p12
			}));
		end, function(p13)
			warn("Failed to cancel all matchmaking tickets for player:", p13);
		end);
	end;
end);
local l__QueueState__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
local l__Workspace__3 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace;
v4.pollMatchmakingTickets = v1.async(function(p14)
	local v28 = p14.partyProducer();
	local u4 = 0;
	local function v29(p15)
		if p15:getQueueState() ~= l__QueueState__2.IN_QUEUE then
			p14.partiesInQueue[p15] = nil;
			return nil;
		end;
		u4 = u4 + 1;
		local v30 = p15:getQueueData();
		if not v30 then
			return nil;
		end;
		local l__pollAttempts__31 = v30.pollAttempts;
		if l__pollAttempts__31 < 3 then
			local v32 = 3;
		elseif l__pollAttempts__31 < 4 then
			v32 = 4;
		elseif l__pollAttempts__31 < 5 then
			v32 = 6;
		elseif l__pollAttempts__31 < 6 then
			v32 = 8;
		elseif l__pollAttempts__31 < 11 then
			v32 = 11;
		else
			v32 = 6;
		end;
		if v32 <= l__Workspace__3:GetServerTimeNow() - v30.lastPollTime then
			v30.pollAttempts = v30.pollAttempts + 1;
			v30.lastPollTime = l__Workspace__3:GetServerTimeNow();
			task.spawn(function()
				p14:pollQueueStatusForParty(p15);
			end);
		end;
	end;
	for v33, v34 in ipairs(v28) do
		v29(v34, v33 - 1, v28);
	end;
	task.delay(1, v1.async(function()
		v1.await(p14:pollMatchmakingTickets());
	end));
end);
v4.pollQueueStatusForParty = v1.async(function(p16, p17)
	local v35 = p17:getQueueData();
	if not v35 then
		return nil;
	end;
	local v36 = p17:getLeader();
	local v37 = v1.await(p16.playFabService:getPlayerSession(v36));
	if not v37 then
		return warn("Party leader " .. tostring(v36) .. " has no stored PlayFab session, unable to poll queue");
	end;
	local l__MatchId__38 = v1.await(l__PlayFabMultiplayer__1:GetMatchmakingTicket(v37.EntityToken, {
		TicketId = v35.ticketId, 
		QueueName = v35.queueType, 
		EscapeObject = true
	})).MatchId;
	if l__MatchId__38 == "" or not l__MatchId__38 then
		return nil;
	end;
	local v39 = v1.await(l__PlayFabMultiplayer__1:GetMatch(v37.EntityToken, {
		MatchId = l__MatchId__38, 
		QueueName = v35.queueType, 
		ReturnMemberAttributes = false, 
		EscapeObject = true
	}));
	local v40 = p16.partiesInQueue[p17];
	if v40 ~= 0 and v40 == v40 and v40 then
		print("Found match in " .. tostring(os.clock() - v40) .. " seconds");
	end;
	print("Found match for party leader " .. tostring(v36) .. ", ID: \"" .. l__MatchId__38 .. "\"");
	p16.partiesInQueue[p17] = nil;
	local l__matchFoundObservers__41 = p16.matchFoundObservers;
	local function v42(p18)
		return p18(p17, l__MatchId__38, v39);
	end;
	for v43, v44 in ipairs(l__matchFoundObservers__41) do
		v42(v44, v43 - 1, l__matchFoundObservers__41);
	end;
end);
local l__DeviceType__5 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).DeviceType;
function v4.createMatchmakingPlayer(p19, p20, p21)
	local v45 = p19.deviceInfoService:getDeviceInfo(p20.Player.UserId);
	if not v45 then
		return {
			Entity = p20.Entity
		};
	end;
	return {
		Entity = p20.Entity, 
		Attributes = {
			DataObject = {
				Region = p19.deviceInfoService:getRegionCode(v45.region), 
				IsMobile = tostring(v45.device == l__DeviceType__5.Mobile), 
				Skill = p21.skill
			}
		}
	};
end;
function v4.registerMatchFoundObserver(p22, p23)
	local l__matchFoundObservers__46 = p22.matchFoundObservers;
	l__matchFoundObservers__46[#l__matchFoundObservers__46 + 1] = p23;
end;
function v4.registerPartyProducer(p24, p25)
	p24.partyProducer = p25;
end;
l__Reflect__2.defineMetadata(v4, "identifier", "@easy-games/lobby:server/services/matchmaking-service@MatchmakingService");
l__Reflect__2.defineMetadata(v4, "flamework:parameters", { "@easy-games/lobby:server/services/playfab-service@PlayFabService", "@easy-games/lobby:server/services/device-info-service@DeviceInfoService" });
l__Reflect__2.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v4, "$:flamework@Service", v3.Service, {});
l__Reflect__2.decorate(v4, "$:flamework@External", v3.External, {});
return {
	MatchmakingService = v4
};
