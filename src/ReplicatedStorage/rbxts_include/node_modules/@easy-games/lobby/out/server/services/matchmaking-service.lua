-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = setmetatable({}, {
	__tostring = function()
		return "MatchmakingService";
	end
});
v3.__index = v3;
function v3.new(...)
	local v4 = setmetatable({}, v3);
	return v4:constructor(...) and v4;
end;
function v3.constructor(p1, p2, p3)
	p1.playFabService = p2;
	p1.deviceInfoService = p3;
	p1.matchFoundObservers = {};
	p1.partiesInQueue = {};
	function p1.partyProducer()
		return {};
	end;
end;
function v3.onStart(p4)
	p4:pollMatchmakingTickets();
end;
local l__PlayFabMultiplayer__1 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out).PlayFabMultiplayer;
v3.createMatchmakingTicketForParty = v1.async(function(p5, p6, p7)
	local v5 = p6:getLeader();
	local v6 = v1.await(p5.playFabService:getPlayerSession(v5));
	if not v6 then
		return nil;
	end;
	local v7 = p6:getMembers();
	local v8 = p5.playFabService:bulkGetPlayerSessions(v7);
	local v9 = {
		Creator = p5:createMatchmakingPlayer(v6, {
			skill = p6:getSkillRating(p7)
		}), 
		GiveUpAfterSeconds = 120, 
		QueueName = p7
	};
	local function v10(p8)
		return p8.Entity;
	end;
	local v11 = table.create(#v8);
	for v12, v13 in ipairs(v8) do
		v11[v12] = v10(v13, v12 - 1, v8);
	end;
	v9.MembersToMatchWith = v11;
	local v14 = v1.await(l__PlayFabMultiplayer__1:CreateMatchmakingTicket(v6.EntityToken, v9));
	p5.partiesInQueue[p6] = os.clock();
	print("[Matchmaker] Created primary matchmaking ticket for party leader: " .. tostring(v5));
	local v15 = table.create(#v7);
	local v16, v17, v18 = ipairs(v7);
	while true do
		local v19, v20 = v16(v17, v18);
		if not v19 then
			break;
		end;
		local function v21(p9)
			return p9.Player == v20;
		end;
		local v22 = nil;
		for v23, v24 in ipairs(v8) do
			if v21(v24, v23 - 1, v8) == true then
				v22 = v24;
				break;
			end;
		end;
		if v22 then
			v15[#v15 + 1] = l__PlayFabMultiplayer__1:JoinMatchmakingTicket(v22.EntityToken, {
				TicketId = v14.TicketId, 
				QueueName = p7, 
				Member = p5:createMatchmakingPlayer(v22, {
					skill = p6:getSkillRating(p7)
				})
			});
		end;	
	end;
	print("[Matchmaker] Added " .. tostring(#v15) .. " party members to the ticket");
	v1.await(v1.Promise.all(v15));
	return v14;
end);
v3.bulkCancelMatchmakingTickets = v1.async(function(p10, p11, p12)
	for v25, v26 in ipairs(p11) do
		v1.try(function()
			v1.await(l__PlayFabMultiplayer__1:CancelAllMatchmakingTicketsForPlayer(v26.EntityToken, {
				QueueName = p12
			}));
		end, function(p13)
			warn("Failed to cancel all matchmaking tickets for player:", p13);
		end);
	end;
end);
local l__QueueState__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
local l__Workspace__3 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace;
v3.pollMatchmakingTickets = v1.async(function(p14)
	local v27 = p14.partyProducer();
	local u4 = 0;
	local function v28(p15)
		if p15:getQueueState() ~= l__QueueState__2.IN_QUEUE then
			p14.partiesInQueue[p15] = nil;
			return nil;
		end;
		u4 = u4 + 1;
		local v29 = p15:getQueueData();
		if not v29 then
			return nil;
		end;
		local l__pollAttempts__30 = v29.pollAttempts;
		if l__pollAttempts__30 < 3 then
			local v31 = 3;
		elseif l__pollAttempts__30 < 4 then
			v31 = 4;
		elseif l__pollAttempts__30 < 5 then
			v31 = 6;
		elseif l__pollAttempts__30 < 6 then
			v31 = 8;
		elseif l__pollAttempts__30 < 11 then
			v31 = 11;
		else
			v31 = 6;
		end;
		if v31 <= l__Workspace__3:GetServerTimeNow() - v29.lastPollTime then
			v29.pollAttempts = v29.pollAttempts + 1;
			v29.lastPollTime = l__Workspace__3:GetServerTimeNow();
			task.spawn(function()
				p14:pollQueueStatusForParty(p15);
			end);
		end;
	end;
	for v32, v33 in ipairs(v27) do
		v28(v33, v32 - 1, v27);
	end;
	task.delay(1, v1.async(function()
		v1.await(p14:pollMatchmakingTickets());
	end));
end);
v3.pollQueueStatusForParty = v1.async(function(p16, p17)
	local v34 = p17:getQueueData();
	if not v34 then
		return nil;
	end;
	local v35 = p17:getLeader();
	local v36 = v1.await(p16.playFabService:getPlayerSession(v35));
	if not v36 then
		return warn("Party leader " .. tostring(v35) .. " has no stored PlayFab session, unable to poll queue");
	end;
	local l__MatchId__37 = v1.await(l__PlayFabMultiplayer__1:GetMatchmakingTicket(v36.EntityToken, {
		TicketId = v34.ticketId, 
		QueueName = v34.queueType, 
		EscapeObject = true
	})).MatchId;
	if l__MatchId__37 == "" or not l__MatchId__37 then
		return nil;
	end;
	local v38 = v1.await(l__PlayFabMultiplayer__1:GetMatch(v36.EntityToken, {
		MatchId = l__MatchId__37, 
		QueueName = v34.queueType, 
		ReturnMemberAttributes = false, 
		EscapeObject = true
	}));
	local v39 = p16.partiesInQueue[p17];
	if v39 ~= 0 and v39 == v39 and v39 then
		print("Found match in " .. tostring(os.clock() - v39) .. " seconds");
	end;
	print("Found match for party leader " .. tostring(v35) .. ", ID: \"" .. l__MatchId__37 .. "\"");
	p16.partiesInQueue[p17] = nil;
	local l__matchFoundObservers__40 = p16.matchFoundObservers;
	local function v41(p18)
		return p18(p17, l__MatchId__37, v38);
	end;
	for v42, v43 in ipairs(l__matchFoundObservers__40) do
		v41(v43, v42 - 1, l__matchFoundObservers__40);
	end;
end);
function v3.createMatchmakingPlayer(p19, p20, p21)
	local v44 = p19.deviceInfoService:getDeviceInfo(p20.Player.UserId);
	if not v44 then
		return {
			Entity = p20.Entity
		};
	end;
	return {
		Entity = p20.Entity, 
		Attributes = {
			DataObject = {
				Region = p19.deviceInfoService:getRegionCode(v44.region), 
				IsMobile = tostring(v44.isMobile), 
				Skill = p21.skill
			}
		}
	};
end;
function v3.registerMatchFoundObserver(p22, p23)
	local l__matchFoundObservers__45 = p22.matchFoundObservers;
	l__matchFoundObservers__45[#l__matchFoundObservers__45 + 1] = p23;
end;
function v3.registerPartyProducer(p24, p25)
	p24.partyProducer = p25;
end;
l__Reflect__2.defineMetadata(v3, "identifier", "@easy-games/lobby:server/services/matchmaking-service@MatchmakingService");
l__Reflect__2.defineMetadata(v3, "flamework:isExternal", true);
l__Reflect__2.defineMetadata(v3, "flamework:dependencies", { "@easy-games/lobby:server/services/playfab-service@PlayFabService", "@easy-games/lobby:server/services/device-info-service@DeviceInfoService" });
l__Reflect__2.defineMetadata(v3, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.defineMetadata(v3, "flamework:decorators", { "$:flamework@Service" });
l__Reflect__2.defineMetadata(v3, "flamework:decorators.$:flamework@Service", {
	type = "Service"
});
return {
	MatchmakingService = v3
};
