-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local l__Reflect__2 = v1.import(script, v1.getModule(script, "@flamework", "core").out).Reflect;
local v3 = v1.import(script, v1.getModule(script, "@flamework", "core").out);
local v4 = setmetatable({}, {
	__tostring = function()
		return "MatchmakingService";
	end
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
function v4.constructor(p1, p2, p3)
	p1.playFabService = p2;
	p1.deviceInfoService = p3;
	p1.matchFoundObservers = {};
	p1.partiesInQueue = {};
	function p1.partyProducer()
		return {};
	end;
end;
function v4.onStart(p4)
	p4:pollMatchmakingTickets();
end;
local l__PlayFabMultiplayer__1 = v1.import(script, v1.getModule(script, "@rbxts", "playfab").out).PlayFabMultiplayer;
v4.createMatchmakingTicketForParty = v1.async(function(p5, p6, p7)
	local v6 = p6:getLeader();
	local v7 = v1.await(p5.playFabService:getPlayerSession(v6));
	if not v7 then
		return nil;
	end;
	local v8 = p6:getMembers();
	local v9 = p5.playFabService:bulkGetPlayerSessions(v8);
	local v10 = {
		Creator = p5:createMatchmakingPlayer(v7, {
			skill = p6:getSkillRating(p7), 
			partyIsMobile = p6:isMobileOnly()
		}), 
		GiveUpAfterSeconds = 120, 
		QueueName = p7
	};
	local v11 = table.create(#v9);
	for v12, v13 in ipairs(v9) do
		v11[v12] = v13.Entity;
	end;
	v10.MembersToMatchWith = v11;
	local v14 = v1.await(l__PlayFabMultiplayer__1:CreateMatchmakingTicket(v7.EntityToken, v10));
	p5.partiesInQueue[p6] = os.clock();
	print("[Matchmaker] Created primary matchmaking ticket for party leader: " .. tostring(v6));
	local v15 = table.create(#v8);
	local v16, v17, v18 = ipairs(v8);
	while true do
		local v19, v20 = v16(v17, v18);
		if not v19 then
			break;
		end;
		local v21 = nil;
		for v22, v23 in ipairs(v9) do
			if v23.Player == v20 == true then
				v21 = v23;
				break;
			end;
		end;
		if v21 then
			v15[#v15 + 1] = l__PlayFabMultiplayer__1:JoinMatchmakingTicket(v21.EntityToken, {
				TicketId = v14.TicketId, 
				QueueName = p7, 
				Member = p5:createMatchmakingPlayer(v21, {
					skill = p6:getSkillRating(p7), 
					partyIsMobile = p6:isMobileOnly()
				})
			});
		end;	
	end;
	print("[Matchmaker] Added " .. tostring(#v15) .. " party members to the ticket");
	v1.await(v1.Promise.all(v15));
	return v14;
end);
v4.bulkCancelMatchmakingTickets = v1.async(function(p8, p9, p10)
	for v24, v25 in ipairs(p9) do
		v1.try(function()
			v1.await(l__PlayFabMultiplayer__1:CancelAllMatchmakingTicketsForPlayer(v25.EntityToken, {
				QueueName = p10
			}));
		end, function(p11)
			warn("Failed to cancel all matchmaking tickets for player:", p11);
		end);
	end;
end);
local l__QueueState__2 = v1.import(script, script.Parent.Parent.Parent, "shared", "party", "queue-state").QueueState;
local l__LobbyServerConfig__3 = v1.import(script, script.Parent.Parent, "config", "lobby-server-config").LobbyServerConfig;
local l__Workspace__4 = v1.import(script, v1.getModule(script, "@rbxts", "services")).Workspace;
v4.pollMatchmakingTickets = v1.async(function(p12)
	local v26 = p12.partyProducer();
	local u5 = 0;
	local function v27(p13)
		if p13:getQueueState() ~= l__QueueState__2.IN_QUEUE then
			p12.partiesInQueue[p13] = nil;
			return nil;
		end;
		u5 = u5 + 1;
		local v28 = p13:getQueueData();
		if not v28 then
			return nil;
		end;
		local l__pollAttempts__29 = v28.pollAttempts;
		if l__LobbyServerConfig__3.matchmakingPollMode == "aggresive" then
			if l__pollAttempts__29 < 3 then
				local v30 = 3;
			elseif l__pollAttempts__29 < 4 then
				v30 = 4;
			elseif l__pollAttempts__29 < 5 then
				v30 = 6;
			elseif l__pollAttempts__29 < 6 then
				v30 = 8;
			elseif l__pollAttempts__29 < 11 then
				v30 = 11;
			else
				v30 = 6;
			end;
		else
			v30 = 6;
		end;
		if v30 <= l__Workspace__4:GetServerTimeNow() - v28.lastPollTime then
			v28.pollAttempts = v28.pollAttempts + 1;
			v28.lastPollTime = l__Workspace__4:GetServerTimeNow();
			task.spawn(function()
				p12:pollQueueStatusForParty(p13);
			end);
		end;
	end;
	for v31, v32 in ipairs(v26) do
		v27(v32, v31 - 1, v26);
	end;
	task.delay(1, v1.async(function()
		v1.await(p12:pollMatchmakingTickets());
	end));
end);
v4.pollQueueStatusForParty = v1.async(function(p14, p15)
	local v33 = p15:getQueueData();
	if not v33 then
		return nil;
	end;
	local v34 = p15:getLeader();
	local v35 = v1.await(p14.playFabService:getPlayerSession(v34));
	if not v35 then
		return warn("Party leader " .. tostring(v34) .. " has no stored PlayFab session, unable to poll queue");
	end;
	local l__MatchId__36 = v1.await(l__PlayFabMultiplayer__1:GetMatchmakingTicket(v35.EntityToken, {
		TicketId = v33.ticketId, 
		QueueName = v33.queueType, 
		EscapeObject = true
	})).MatchId;
	if l__MatchId__36 == "" or not l__MatchId__36 then
		return nil;
	end;
	local v37 = v1.await(l__PlayFabMultiplayer__1:GetMatch(v35.EntityToken, {
		MatchId = l__MatchId__36, 
		QueueName = v33.queueType, 
		ReturnMemberAttributes = false, 
		EscapeObject = true
	}));
	local v38 = p14.partiesInQueue[p15];
	if v38 ~= 0 and v38 == v38 and v38 then
		print("Found match in " .. tostring(os.clock() - v38) .. " seconds");
	end;
	print("Found match for party leader " .. tostring(v34) .. ", ID: \"" .. l__MatchId__36 .. "\"");
	p14.partiesInQueue[p15] = nil;
	for v39, v40 in ipairs(p14.matchFoundObservers) do
		local v41 = v40(p15, l__MatchId__36, v37);
	end;
end);
local l__DeviceType__6 = v1.import(script, v1.getModule(script, "@easy-games", "game-core").out).DeviceType;
function v4.createMatchmakingPlayer(p16, p17, p18)
	local v42 = p16.deviceInfoService:getDeviceInfo(p17.Player.UserId);
	if not v42 then
		return {
			Entity = p17.Entity
		};
	end;
	local v43 = {
		Entity = p17.Entity
	};
	local v44 = {};
	local v45 = {
		Region = p16.deviceInfoService:getRegionCode(v42.region)
	};
	local v46 = p18.partyIsMobile;
	if v46 == nil then
		v46 = v42.device == l__DeviceType__6.Mobile;
	end;
	v45.IsMobile = tostring(v46);
	v45.Skill = p18.skill;
	v44.DataObject = v45;
	v43.Attributes = v44;
	return v43;
end;
function v4.registerMatchFoundObserver(p19, p20)
	local l__matchFoundObservers__47 = p19.matchFoundObservers;
	l__matchFoundObservers__47[#l__matchFoundObservers__47 + 1] = p20;
end;
function v4.registerPartyProducer(p21, p22)
	p21.partyProducer = p22;
end;
l__Reflect__2.defineMetadata(v4, "identifier", "@easy-games/lobby:server/services/matchmaking-service@MatchmakingService");
l__Reflect__2.defineMetadata(v4, "flamework:parameters", { "@easy-games/lobby:server/services/playfab-service@PlayFabService", "@easy-games/lobby:server/services/device-info-service@DeviceInfoService" });
l__Reflect__2.defineMetadata(v4, "flamework:implements", { "$:flamework@OnStart" });
l__Reflect__2.decorate(v4, "$:flamework@Service", v3.Service, {});
l__Reflect__2.decorate(v4, "$:flamework@External", v3.External, {});
return {
	MatchmakingService = v4
};
