-- Decompiled with the Synapse X Luau decompiler.

local v1 = _G[script];
local v2 = v1.import(script, script.Parent.Parent, "event-template");
local l__EventTemplate__3 = v2.EventTemplate;
local v4 = setmetatable({}, {
	__tostring = function()
		return "AsyncEvent";
	end, 
	__index = l__EventTemplate__3
});
v4.__index = v4;
function v4.new(...)
	local v5 = setmetatable({}, v4);
	return v5:constructor(...) and v5;
end;
local u1 = l__EventTemplate__3;
function v4.constructor(p1, ...)
	u1.constructor(p1, ...);
	p1.entries = {};
end;
local l__HttpService__2 = v1.import(script, v1.getModule(script, "@rbxts", "services")).HttpService;
local l__EventConnection__3 = v2.EventConnection;
function v4.connect(p2, p3, p4)
	if p4 == nil then
		p4 = 0;
	end;
	local v6 = l__HttpService__2:GenerateGUID(false);
	p2:insertEntry({
		id = v6, 
		callbackInfo = {
			callback = p3, 
			callingThreadInfo = p2:getCallingThreadInfo(p4)
		}
	});
	return l__EventConnection__3.new(function()
		p2.entries[v6] = nil;
	end);
end;
local l__MapUtil__4 = v1.import(script, v1.getModule(script, "@easy-games", "data-structure").out).MapUtil;
v4.fire = v1.async(function(p5, ...)
	local v7 = p5:constructEvent({ ... });
	local v8 = {};
	for v9, v10 in ipairs((l__MapUtil__4.values(p5.entries))) do
		table.insert(v8, (v1.Promise.new(function(p6)
			p5:wrapCallback(v10.callbackInfo.callingThreadInfo, function()
				v10.callbackInfo.callback(v7);
			end);
			p6();
		end)));
	end;
	return v1.Promise.all(v8);
end);
function v4.insertEntry(p7, p8)
	p7.entries[p8.id] = p8;
end;
u1 = {
	AsyncEvent = v4
};
return l__EventTemplate__3;
