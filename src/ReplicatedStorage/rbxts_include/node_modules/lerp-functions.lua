-- Decompiled with the Synapse X Luau decompiler.

local v1 = {
	boolean = function(p1, p2)
		return function(p3)
			if p3 < 0.5 then
				return p1;
			end;
			return p2;
		end;
	end, 
	number = function(p4, p5)
		local u1 = p5 - p4;
		return function(p6)
			return p4 + u1 * p6;
		end;
	end
};
local u2 = Color3.new(0, 0, 0);
local u3 = Color3.new;
function v1.Color3(p7, p8)
	local l__r__2 = p7.r;
	local l__g__3 = p7.g;
	local l__b__4 = p7.b;
	if l__r__2 < 0.0404482362771076 then
		local v5 = l__r__2 / 12.92;
	else
		v5 = 0.87941546140213 * (l__r__2 + 0.055) ^ 2.4;
	end;
	if l__g__3 < 0.0404482362771076 then
		local v6 = l__g__3 / 12.92;
	else
		v6 = 0.87941546140213 * (l__g__3 + 0.055) ^ 2.4;
	end;
	if l__b__4 < 0.0404482362771076 then
		local v7 = l__b__4 / 12.92;
	else
		v7 = 0.87941546140213 * (l__b__4 + 0.055) ^ 2.4;
	end;
	local v8 = 0.2125862307855956 * v5 + 0.7151703037034108 * v6 + 0.0722004986433362 * v7;
	local v9 = 3.6590806972265884 * v5 + 11.442689580057424 * v6 + 4.114991502426484 * v7;
	if v8 > 0.008856451679035631 then
		local v10 = 116 * v8 ^ 0.3333333333333333 - 16;
	else
		v10 = 903.296296296296 * v8;
	end;
	if v9 > 1E-15 then
		local v11 = v10 * (0.9257063972951867 * v5 - 0.8333736323779866 * v6 - 0.09209820666085898 * v7) / v9;
		local v12 = v10 * (9 * v8 / v9 - 0.46832);
	else
		v11 = -0.19783 * v10;
		v12 = -0.46832 * v10;
	end;
	local l__r__13 = p8.r;
	local l__g__14 = p8.g;
	local l__b__15 = p8.b;
	if l__r__13 < 0.0404482362771076 then
		local v16 = l__r__13 / 12.92;
	else
		v16 = 0.87941546140213 * (l__r__13 + 0.055) ^ 2.4;
	end;
	if l__g__14 < 0.0404482362771076 then
		local v17 = l__g__14 / 12.92;
	else
		v17 = 0.87941546140213 * (l__g__14 + 0.055) ^ 2.4;
	end;
	if l__b__15 < 0.0404482362771076 then
		local v18 = l__b__15 / 12.92;
	else
		v18 = 0.87941546140213 * (l__b__15 + 0.055) ^ 2.4;
	end;
	local v19 = 0.2125862307855956 * v16 + 0.7151703037034108 * v17 + 0.0722004986433362 * v18;
	local v20 = 3.6590806972265884 * v16 + 11.442689580057424 * v17 + 4.114991502426484 * v18;
	if v19 > 0.008856451679035631 then
		local v21 = 116 * v19 ^ 0.3333333333333333 - 16;
	else
		v21 = 903.296296296296 * v19;
	end;
	if v20 > 1E-15 then
		local v22 = v21 * (0.9257063972951867 * v16 - 0.8333736323779866 * v17 - 0.09209820666085898 * v18) / v20;
		local v23 = v21 * (9 * v19 / v20 - 0.46832);
	else
		v22 = -0.19783 * v21;
		v23 = -0.46832 * v21;
	end;
	return function(p9)
		local v24 = (1 - p9) * v10 + p9 * v21;
		if v24 < 0.0197955 then
			return u2;
		end;
		local v25 = ((1 - p9) * v11 + p9 * v22) / v24 + 0.19783;
		local v26 = ((1 - p9) * v12 + p9 * v23) / v24 + 0.46832;
		local v27 = (v24 + 16) / 116;
		if v27 > 0.20689655172413793 then
			local v28 = v27 * v27 * v27;
		else
			v28 = 0.12841854934601665 * v27 - 0.01771290335807126;
		end;
		local v29 = v28 * v25 / v26;
		local v30 = v28 * ((3 - 0.75 * v25) / v26 - 5);
		local v31 = 7.2914074 * v29 - 1.537208 * v28 - 0.4986286 * v30;
		local v32 = -2.180094 * v29 + 1.8757561 * v28 + 0.0415175 * v30;
		local v33 = 0.1253477 * v29 - 0.2040211 * v28 + 1.0569959 * v30;
		if v31 < 0 and v31 < v32 and v31 < v33 then
			v32 = v32 - v31;
			v33 = v33 - v31;
			v31 = 0;
		elseif v32 < 0 and v32 < v33 then
			v31 = v31 - v32;
			v33 = v33 - v32;
			v32 = 0;
		elseif v33 < 0 then
			v31 = v31 - v33;
			v32 = v32 - v33;
			v33 = 0;
		end;
		if v31 < 0.0031306684425 then
			local v34 = 12.92 * v31;
		else
			v34 = 1.055 * v31 ^ 0.4166666666666667 - 0.055;
		end;
		if v32 < 0.0031306684425 then
			local v35 = 12.92 * v32;
		else
			v35 = 1.055 * v32 ^ 0.4166666666666667 - 0.055;
		end;
		if v33 < 0.0031306684425 then
			local v36 = 12.92 * v33;
		else
			v36 = 1.055 * v33 ^ 0.4166666666666667 - 0.055;
		end;
		if v34 < 0 then
			v34 = 0;
		elseif v34 > 1 then
			v34 = 1;
		end;
		if v35 < 0 then
			v35 = 0;
		elseif v35 > 1 then
			v35 = 1;
		end;
		if v36 < 0 then
			v36 = 0;
		elseif v36 > 1 then
			v36 = 1;
		end;
		return u3(v34, v35, v36);
	end;
end;
u3 = string.match;
u2 = string.format;
local u4 = tonumber;
function v1.string(p10, p11)
	local v37 = nil;
	local v38, v39, v40, v41 = u3(p10, "^([+-]?)(%d*):[+-]?(%d*):[+-]?(%d*)$");
	local v42, v43, v44, v45 = u3(p11, "^([+-]?)(%d*):[+-]?(%d*):[+-]?(%d*)$");
	if v38 and v42 then
		local v46 = 3600 * (u4(v39) and 0) + 60 * (u4(v40) and 0) + (u4(v41) and 0);
		local v47 = 3600 * (u4(v43) and 0) + 60 * (u4(v44) and 0) + (u4(v45) and 0);
		if v38 == "-" then
			v46 = -v46;
		end;
		v37 = (43200 + (v42 ~= "-" and v47 or -v47) - nil) % 86400 - 43200;
	else
		error("Invalid TimeOfDay string", 4);
	end;
	local u5 = nil;
	return function(p12)
		local v48 = (u5 + v37 * p12) % 86400;
		local v49 = v48 > 0 and v48 or -v48;
		if v48 < 0 then
			local v50 = "-%.2u:%.2u:%.2u";
		else
			v50 = "%.2u:%.2u:%.2u";
		end;
		return u2(v50, (v49 - v49 % 3600) / 3600, (v49 % 3600 - v49 % 60) / 60, v49 % 60);
	end;
end;
u2 = CFrame.new;
u2 = u2();
u3 = u2.lerp;
u2 = function(p13, p14)
	return function(p15)
		return u3(p13, p14, p15);
	end;
end;
v1.CFrame = u2;
u3 = NumberRange.new;
u2 = function(p16, p17)
	local l__Min__51 = p16.Min;
	local l__Max__52 = p16.Max;
	p16 = nil;
	p17 = nil;
	local u6 = p17.Min - l__Min__51;
	local u7 = p17.Max - l__Max__52;
	return function(p18)
		return u3(l__Min__51 + p18 * u6, l__Max__52 + p18 * u7);
	end;
end;
v1.NumberRange = u2;
u3 = NumberSequenceKeypoint.new;
u2 = function(p19, p20)
	local l__Time__53 = p19.Time;
	local l__Value__54 = p19.Value;
	local l__Envelope__55 = p19.Envelope;
	p20 = nil;
	local u8 = p20.Time - l__Time__53;
	local u9 = p20.Value - l__Value__54;
	local u10 = p20.Envelope - l__Envelope__55;
	return function(p21)
		return u3(l__Time__53 + p21 * u8, l__Value__54 + p21 * u9, l__Envelope__55 + p21 * u10);
	end;
end;
v1.NumberSequenceKeypoint = u2;
u3 = PhysicalProperties.new;
u2 = function(p22, p23)
	local l__Density__56 = p22.Density;
	local l__Elasticity__57 = p22.Elasticity;
	local l__ElasticityWeight__58 = p22.ElasticityWeight;
	local l__Friction__59 = p22.Friction;
	local l__FrictionWeight__60 = p22.FrictionWeight;
	p22 = nil;
	p23 = nil;
	local u11 = p23.Density - l__Density__56;
	local u12 = p23.Elasticity - l__Elasticity__57;
	local u13 = p23.ElasticityWeight - l__ElasticityWeight__58;
	local u14 = p23.Friction - l__Friction__59;
	local u15 = p23.FrictionWeight - l__FrictionWeight__60;
	return function(p24)
		return u3(l__Density__56 + p24 * u11, l__Elasticity__57 + p24 * u12, l__ElasticityWeight__58 + p24 * u13, l__Friction__59 + p24 * u14, l__FrictionWeight__60 + p24 * u15);
	end;
end;
v1.PhysicalProperties = u2;
u3 = Ray.new;
u2 = Vector3.new;
u4 = function(p25, p26)
	local l__Origin__61 = p25.Origin;
	local l__Direction__62 = p25.Direction;
	local l__Origin__63 = p26.Origin;
	local l__Direction__64 = p26.Direction;
	local l__x__65 = l__Origin__61.x;
	local l__y__66 = l__Origin__61.y;
	local l__z__67 = l__Origin__61.z;
	local l__x__68 = l__Direction__62.x;
	local l__y__69 = l__Direction__62.y;
	local l__z__70 = l__Direction__62.z;
	local l__x__71 = l__Direction__64.x;
	local l__y__72 = l__Direction__64.y;
	local l__z__73 = l__Direction__64.z;
	p25 = nil;
	p26 = nil;
	local u16 = l__Origin__63.x - l__x__65;
	local u17 = l__Origin__63.y - l__y__66;
	local u18 = l__Origin__63.z - l__z__67;
	local u19 = l__Direction__64.x - l__x__68;
	local u20 = l__Direction__64.y - l__y__69;
	local u21 = l__Direction__64.z - l__z__70;
	return function(p27)
		return u3(u2(l__x__65 + p27 * u16, l__y__66 + p27 * u17, l__z__67 + p27 * u18), u2(l__x__68 + p27 * u19, l__y__69 + p27 * u20, l__z__70 + p27 * u21));
	end;
end;
v1.Ray = u4;
u3 = Rect.new;
newRect = u3;
u3 = function(p28, p29)
	local l__X__74 = p28.Min.X;
	local l__Y__75 = p28.Min.Y;
	local l__X__76 = p28.Max.X;
	local l__Y__77 = p28.Max.Y;
	p28 = nil;
	p29 = nil;
	local u22 = p29.Min.X - l__X__74;
	local u23 = p29.Min.Y - l__Y__75;
	local u24 = p29.Max.X - l__X__76;
	local u25 = p29.Max.Y - l__Y__77;
	return function(p30)
		return newRect(l__X__74 + p30 * u22, l__Y__75 + p30 * u23, l__X__76 + p30 * u24, l__Y__77 + p30 * u25);
	end;
end;
v1.Rect = u3;
u3 = UDim.new;
u2 = function(p31, p32)
	local l__Scale__78 = p31.Scale;
	local l__Offset__79 = p31.Offset;
	p31 = nil;
	p32 = nil;
	local u26 = p32.Scale - l__Scale__78;
	local u27 = p32.Offset - l__Offset__79;
	return function(p33)
		return u3(l__Scale__78 + p33 * u26, l__Offset__79 + p33 * u27);
	end;
end;
v1.UDim = u2;
u2 = UDim2.new;
u2 = u2();
u3 = u2.Lerp;
u2 = function(p34, p35)
	return function(p36)
		return u3(p34, p35, p36);
	end;
end;
v1.UDim2 = u2;
u3 = Vector2.new;
u2 = function(p37, p38)
	local l__x__80 = p37.x;
	local l__y__81 = p37.y;
	p37 = nil;
	p38 = nil;
	local u28 = p38.x - l__x__80;
	local u29 = p38.y - l__y__81;
	return function(p39)
		return u3(l__x__80 + p39 * u28, l__y__81 + p39 * u29);
	end;
end;
v1.Vector2 = u2;
u3 = Vector3.new;
u2 = function(p40, p41)
	local l__x__82 = p40.x;
	local l__y__83 = p40.y;
	local l__z__84 = p40.z;
	p40 = nil;
	p41 = nil;
	local u30 = p41.x - l__x__82;
	local u31 = p41.y - l__y__83;
	local u32 = p41.z - l__z__84;
	return function(p42)
		return u3(l__x__82 + p42 * u30, l__y__83 + p42 * u31, l__z__84 + p42 * u32);
	end;
end;
v1.Vector3 = u2;
u3 = ColorSequence.new;
u2 = v1.Color3;
u4 = function(p43, p44)
	local u33 = u2(p43[1], p44[1]);
	local u34 = u2(p43[2], p44[2]);
	return function(p45)
		return u3(u33(p45), u34(p45));
	end;
end;
v1.ColorSequence = u4;
u3 = Region3.new;
u2 = Vector3.new;
u4 = function(p46, p47)
	local v85 = p46.CFrame * (-p46.Size * 0.5);
	local v86 = p46.CFrame * (p46.Size * 0.5);
	local u35 = p47.CFrame * (-p47.Size * 0.5) - v85;
	local u36 = p47.CFrame * (p47.Size * 0.5) - v86;
	return function(p48)
		local v87 = v85 + p48 * u35;
		local v88 = v86 + p48 * u36;
		local l__x__89 = v87.x;
		local l__x__90 = v88.x;
		local l__y__91 = v87.y;
		local l__y__92 = v88.y;
		local l__z__93 = v87.z;
		local l__z__94 = v88.z;
		if l__x__89 < l__x__90 then
			local v95 = l__x__89;
			local v96 = l__x__90;
		else
			v95 = l__x__90;
			v96 = l__x__89;
		end;
		if l__y__91 < l__y__92 then
			local v97 = l__y__91;
			local v98 = l__y__92;
		else
			v97 = l__y__92;
			v98 = l__y__91;
		end;
		if l__z__93 < l__z__94 then
			local v99 = l__z__93;
			local v100 = l__z__94;
		else
			v99 = l__z__94;
			v100 = l__z__93;
		end;
		return u3(u2(v95, v97, v99), u2(v96, v98, v100));
	end;
end;
v1.Region3 = u4;
local function u37(p49, p50)
	return p49.Time < p50.Time;
end;
u3 = function(p51, p52)
	return function(p53)
		local v101 = {};
		local v102 = {};
		local l__next__103 = next;
		local l__Keypoints__104 = p51.Keypoints;
		local v105 = nil;
		while true do
			local v106, v107 = l__next__103(l__Keypoints__104, v105);
			if not v106 then
				break;
			end;
			local v108 = nil;
			local v109 = nil;
			for v110, v111 in next, p52.Keypoints do
				if v111.Time == v107.Time then
					v108 = v111;
					v109 = v111;
					break;
				end;
				if v111.Time < v107.Time and (v109 == nil or v109.Time < v111.Time) then
					v109 = v111;
				elseif v107.Time < v111.Time and (v108 == nil or v111.Time < v108.Time) then
					v108 = v111;
				end;
			end;
			if v108 == v109 then
				local v112 = v108.Value;
				local v113 = v108.Envelope;
			else
				local v114 = (v107.Time - v109.Time) / (v108.Time - v109.Time);
				v112 = (v108.Value - v109.Value) * v114 + v109.Value;
				v113 = (v108.Envelope - v109.Envelope) * v114 + v109.Envelope;
			end;
			table.insert(v101, (NumberSequenceKeypoint.new(v107.Time, (v112 - v107.Value) * p53 + v107.Value, (v113 - v107.Envelope) * p53 + v107.Envelope)));
			v102[v107.Time] = true;		
		end;
		for v115, v116 in next, p52.Keypoints do
			if not v102[v116.Time] then
				local v117 = nil;
				local v118 = nil;
				for v119, v120 in next, p51.Keypoints do
					if v120.Time == v116.Time then
						v117 = v120;
						v118 = v120;
						break;
					end;
					if v120.Time < v116.Time and (v118 == nil or v118.Time < v120.Time) then
						v118 = v120;
					elseif v116.Time < v120.Time and (v117 == nil or v120.Time < v117.Time) then
						v117 = v120;
					end;
				end;
				if v117 == v118 then
					local v121 = v117.Value;
					local v122 = v117.Envelope;
				else
					local v123 = (v116.Time - v118.Time) / (v117.Time - v118.Time);
					v121 = (v117.Value - v118.Value) * v123 + v118.Value;
					v122 = (v117.Envelope - v118.Envelope) * v123 + v118.Envelope;
				end;
				table.insert(v101, (NumberSequenceKeypoint.new(v116.Time, (v116.Value - v121) * p53 + v121, (v116.Envelope - v122) * p53 + v122)));
			end;
		end;
		table.sort(v101, u37);
		return NumberSequence.new(v101);
	end;
end;
v1.NumberSequence = u3;
return v1;
