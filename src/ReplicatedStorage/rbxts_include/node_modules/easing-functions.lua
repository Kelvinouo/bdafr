-- Decompiled with the Synapse X Luau decompiler.

local v1 = require(assert(script.Parent:FindFirstChild("cubic-bezier"), "[@rbxts/easing-functions] Please `npm install @rbxts/cubic-bezier` to use this library."));
local l__math_sin__1 = math.sin;
local l__math_cos__2 = math.cos;
local l__math_exp__3 = math.exp;
local l__math_asin__4 = math.asin;
local function u5(p1, p2, p3, p4, p5, p6)
	p1 = p1 / p4;
	if p1 == 0 then
		return p2;
	end;
	if p1 == 1 then
		return p2 + p3;
	end;
	p6 = p6 or p4 * 0.3;
	if p3 < 0 then
		local v2 = -p3;
	else
		v2 = p3;
	end;
	if p5 == nil or p5 < v2 then
		return p3 * l__math_exp__3(-6.931471805599453 * p1) * l__math_sin__1((p1 * p4 - p6 * 0.25) * 6.283185307179586 / p6) + p3 + p2;
	end;
	return p5 * l__math_exp__3(-6.931471805599453 * p1) * l__math_sin__1((p1 * p4 - p6 / 6.283185307179586 * l__math_asin__4(p3 / p5)) * 6.283185307179586 / p6) + p3 + p2;
end;
local function u6(p7, p8, p9, p10, p11, p12)
	p7 = p7 / p10 - 1;
	if p7 == -1 then
		return p8;
	end;
	if p7 == 0 then
		return p8 + p9;
	end;
	p12 = p12 or p10 * 0.3;
	if p9 < 0 then
		local v3 = -p9;
	else
		v3 = p9;
	end;
	if p11 == nil or p11 < v3 then
		return -(p9 * 1024 ^ p7 * l__math_sin__1((p7 * p10 - p12 * 0.25) * 6.283185307179586 / p12)) + p8;
	end;
	return -(p11 * 1024 ^ p7 * l__math_sin__1((p7 * p10 - p12 / 6.283185307179586 * l__math_asin__4(p9 / p11)) * 6.283185307179586 / p12)) + p8;
end;
local function u7(p13, p14, p15, p16)
	p13 = p13 / p16;
	if p13 < 0.36363636363636365 then
		return p15 * (7.5625 * p13 * p13) + p14;
	end;
	if p13 < 0.7272727272727273 then
		p13 = p13 - 0.5454545454545454;
		return p15 * (7.5625 * p13 * p13 + 0.75) + p14;
	end;
	if p13 < 0.9090909090909091 then
		p13 = p13 - 0.8181818181818182;
		return p15 * (7.5625 * p13 * p13 + 0.9375) + p14;
	end;
	p13 = p13 - 0.9545454545454546;
	return p15 * (7.5625 * p13 * p13 + 0.984375) + p14;
end;
local function u8(p17, p18, p19, p20)
	return p19 - u7(p20 - p17, 0, p19, p20) + p18;
end;
return {
	Standard = v1.new(0.4, 0, 0.2, 1), 
	Deceleration = v1.new(0, 0, 0.2, 1), 
	Acceleration = v1.new(0.4, 0, 1, 1), 
	Sharp = v1.new(0.4, 0, 0.6, 1), 
	Linear = function(p21, p22, p23, p24)
		return p23 * p21 / p24 + p22;
	end, 
	InSine = function(p25, p26, p27, p28)
		return -p27 * l__math_cos__2(p25 / p28 * 1.5707963267948966) + p27 + p26;
	end, 
	OutSine = function(p29, p30, p31, p32)
		return p31 * l__math_sin__1(p29 / p32 * 1.5707963267948966) + p30;
	end, 
	InOutSine = function(p33, p34, p35, p36)
		return -p35 * 0.5 * (l__math_cos__2(3.141592653589793 * p33 / p36) - 1) + p34;
	end, 
	OutInSine = function(p37, p38, p39, p40)
		p39 = p39 * 0.5;
		if p37 < p40 * 0.5 then
			return p39 * l__math_sin__1(p37 * 2 / p40 * 1.5707963267948966) + p38;
		end;
		return -p39 * l__math_cos__2((p37 * 2 - p40) / p40 * 1.5707963267948966) + 2 * p39 + p38;
	end, 
	InBack = function(p41, p42, p43, p44, p45)
		p45 = p45 and 1.70158;
		p41 = p41 / p44;
		return p43 * p41 * p41 * ((p45 + 1) * p41 - p45) + p42;
	end, 
	OutBack = function(p46, p47, p48, p49, p50)
		p50 = p50 and 1.70158;
		p46 = p46 / p49 - 1;
		return p48 * (p46 * p46 * ((p50 + 1) * p46 + p50) + 1) + p47;
	end, 
	InOutBack = function(p51, p52, p53, p54, p55)
		p55 = (p55 and 1.70158) * 1.525;
		p51 = p51 / p54 * 2;
		if p51 < 1 then
			return p53 * 0.5 * (p51 * p51 * ((p55 + 1) * p51 - p55)) + p52;
		end;
		p51 = p51 - 2;
		return p53 * 0.5 * (p51 * p51 * ((p55 + 1) * p51 + p55) + 2) + p52;
	end, 
	OutInBack = function(p56, p57, p58, p59, p60)
		p58 = p58 * 0.5;
		p60 = p60 and 1.70158;
		if p56 < p59 * 0.5 then
			p56 = p56 * 2 / p59 - 1;
			return p58 * (p56 * p56 * ((p60 + 1) * p56 + p60) + 1) + p57;
		end;
		p56 = (p56 * 2 - p59) / p59;
		return p58 * p56 * p56 * ((p60 + 1) * p56 - p60) + p57 + p58;
	end, 
	InQuad = function(p61, p62, p63, p64)
		p61 = p61 / p64;
		return p63 * p61 * p61 + p62;
	end, 
	OutQuad = function(p65, p66, p67, p68)
		p65 = p65 / p68;
		return -p67 * p65 * (p65 - 2) + p66;
	end, 
	InOutQuad = function(p69, p70, p71, p72)
		p69 = p69 / p72 * 2;
		if p69 < 1 then
			return p71 * 0.5 * p69 * p69 + p70;
		end;
		return -p71 * 0.5 * ((p69 - 1) * (p69 - 3) - 1) + p70;
	end, 
	OutInQuad = function(p73, p74, p75, p76)
		if p73 < p76 * 0.5 then
			p73 = 2 * p73 / p76;
			return -0.5 * p75 * p73 * (p73 - 2) + p74;
		end;
		p73 = (p73 * 2 - p76) / p76;
		p75 = 0.5 * p75;
		return p75 * p73 * p73 + p74 + p75;
	end, 
	InQuart = function(p77, p78, p79, p80)
		p77 = p77 / p80;
		return p79 * p77 * p77 * p77 * p77 + p78;
	end, 
	OutQuart = function(p81, p82, p83, p84)
		p81 = p81 / p84 - 1;
		return -p83 * (p81 * p81 * p81 * p81 - 1) + p82;
	end, 
	InOutQuart = function(p85, p86, p87, p88)
		p85 = p85 / p88 * 2;
		if p85 < 1 then
			return p87 * 0.5 * p85 * p85 * p85 * p85 + p86;
		end;
		p85 = p85 - 2;
		return -p87 * 0.5 * (p85 * p85 * p85 * p85 - 2) + p86;
	end, 
	OutInQuart = function(p89, p90, p91, p92)
		if not (p89 < p92 * 0.5) then
			p89 = (p89 * 2 - p92) / p92;
			p91 = p91 * 0.5;
			return p91 * p89 * p89 * p89 * p89 + p90 + p91;
		end;
		p89 = p89 * 2 / p92 - 1;
		p91 = p91 * 0.5;
		return -p91 * (p89 * p89 * p89 * p89 - 1) + p90;
	end, 
	InQuint = function(p93, p94, p95, p96)
		p93 = p93 / p96;
		return p95 * p93 * p93 * p93 * p93 * p93 + p94;
	end, 
	OutQuint = function(p97, p98, p99, p100)
		p97 = p97 / p100 - 1;
		return p99 * (p97 * p97 * p97 * p97 * p97 + 1) + p98;
	end, 
	InOutQuint = function(p101, p102, p103, p104)
		p101 = p101 / p104 * 2;
		if p101 < 1 then
			return p103 * 0.5 * p101 * p101 * p101 * p101 * p101 + p102;
		end;
		p101 = p101 - 2;
		return p103 * 0.5 * (p101 * p101 * p101 * p101 * p101 + 2) + p102;
	end, 
	OutInQuint = function(p105, p106, p107, p108)
		if p105 < p108 * 0.5 then
			p105 = p105 * 2 / p108 - 1;
			return p107 * 0.5 * (p105 * p105 * p105 * p105 * p105 + 1) + p106;
		end;
		p105 = (p105 * 2 - p108) / p108;
		p107 = p107 * 0.5;
		return p107 * p105 * p105 * p105 * p105 * p105 + p106 + p107;
	end, 
	InBounce = u8, 
	OutBounce = u7, 
	InOutBounce = function(p109, p110, p111, p112)
		if p109 < p112 * 0.5 then
			return u8(p109 * 2, 0, p111, p112) * 0.5 + p110;
		end;
		return u7(p109 * 2 - p112, 0, p111, p112) * 0.5 + p111 * 0.5 + p110;
	end, 
	OutInBounce = function(p113, p114, p115, p116)
		if p113 < p116 * 0.5 then
			return u7(p113 * 2, p114, p115 * 0.5, p116);
		end;
		return u8(p113 * 2 - p116, p114 + p115 * 0.5, p115 * 0.5, p116);
	end, 
	InElastic = u6, 
	OutElastic = u5, 
	InOutElastic = function(p117, p118, p119, p120, p121, p122)
		if p117 == 0 then
			return p118;
		end;
		p117 = p117 / p120 * 2 - 1;
		if p117 == 1 then
			return p118 + p119;
		end;
		p122 = p122 or p120 * 0.45;
		p121 = p121 and 0;
		if p119 < 0 then
			local v4 = -p119;
		else
			v4 = p119;
		end;
		if p121 == nil or p121 < v4 then
			p121 = p119;
			local v5 = p122 * 0.25;
		else
			v5 = p122 / 6.283185307179586 * l__math_asin__4(p119 / p121);
		end;
		if p117 < 1 then
			return -0.5 * p121 * 1024 ^ p117 * l__math_sin__1((p117 * p120 - v5) * 6.283185307179586 / p122) + p118;
		end;
		return p121 * l__math_exp__3(-6.931471805599453 * p117) * l__math_sin__1((p117 * p120 - v5) * 6.283185307179586 / p122) * 0.5 + p119 + p118;
	end, 
	OutInElastic = function(p123, p124, p125, p126, p127, p128)
		if p123 < p126 * 0.5 then
			return u5(p123 * 2, p124, p125 * 0.5, p126, p127, p128);
		end;
		return u6(p123 * 2 - p126, p124 + p125 * 0.5, p125 * 0.5, p126, p127, p128);
	end, 
	InCirc = function(p129, p130, p131, p132)
		p129 = p129 / p132;
		return -p131 * ((1 - p129 * p129) ^ 0.5 - 1) + p130;
	end, 
	OutCirc = function(p133, p134, p135, p136)
		p133 = p133 / p136 - 1;
		return p135 * (1 - p133 * p133) ^ 0.5 + p134;
	end, 
	InOutCirc = function(p137, p138, p139, p140)
		p137 = p137 / p140 * 2;
		if p137 < 1 then
			return -p139 * 0.5 * ((1 - p137 * p137) ^ 0.5 - 1) + p138;
		end;
		p137 = p137 - 2;
		return p139 * 0.5 * ((1 - p137 * p137) ^ 0.5 + 1) + p138;
	end, 
	OutInCirc = function(p141, p142, p143, p144)
		p143 = p143 * 0.5;
		if p141 < p144 * 0.5 then
			p141 = p141 * 2 / p144 - 1;
			return p143 * (1 - p141 * p141) ^ 0.5 + p142;
		end;
		p141 = (p141 * 2 - p144) / p144;
		return -p143 * ((1 - p141 * p141) ^ 0.5 - 1) + p142 + p143;
	end, 
	InCubic = function(p145, p146, p147, p148)
		p145 = p145 / p148;
		return p147 * p145 * p145 * p145 + p146;
	end, 
	OutCubic = function(p149, p150, p151, p152)
		p149 = p149 / p152 - 1;
		return p151 * (p149 * p149 * p149 + 1) + p150;
	end, 
	InOutCubic = function(p153, p154, p155, p156)
		p153 = p153 / p156 * 2;
		if p153 < 1 then
			return p155 * 0.5 * p153 * p153 * p153 + p154;
		end;
		p153 = p153 - 2;
		return p155 * 0.5 * (p153 * p153 * p153 + 2) + p154;
	end, 
	OutInCubic = function(p157, p158, p159, p160)
		if p157 < p160 * 0.5 then
			p157 = p157 * 2 / p160 - 1;
			return p159 * 0.5 * (p157 * p157 * p157 + 1) + p158;
		end;
		p157 = (p157 * 2 - p160) / p160;
		p159 = p159 * 0.5;
		return p159 * p157 * p157 * p157 + p158 + p159;
	end, 
	InExpo = function(p161, p162, p163, p164)
		if p161 == 0 then
			return p162;
		end;
		return p163 * 1024 ^ (p161 / p164 - 1) + p162 - p163 * 0.001;
	end, 
	OutExpo = function(p165, p166, p167, p168)
		if p165 == p168 then
			return p166 + p167;
		end;
		return p167 * 1.001 * (1 - l__math_exp__3(-6.931471805599453 * (p165 / p168))) + p166;
	end, 
	InOutExpo = function(p169, p170, p171, p172)
		p169 = p169 / p172 * 2;
		if p169 == 0 then
			return p170;
		end;
		if p169 == 2 then
			return p170 + p171;
		end;
		if p169 < 1 then
			return p171 * 0.5 * 1024 ^ (p169 - 1) + p170 - p171 * 0.0005;
		end;
		return p171 * 0.50025 * (2 - l__math_exp__3(-6.931471805599453 * (p169 - 1))) + p170;
	end, 
	OutInExpo = function(p173, p174, p175, p176)
		p175 = p175 * 0.5;
		if p173 < p176 * 0.5 then
			if p173 * 2 == p176 then
				return p174 + p175;
			else
				return p175 * 1.001 * (1 - l__math_exp__3(13.862943611198906 * p173 / p176)) + p174;
			end;
		end;
		if p173 * 2 - p176 == 0 then
			return p174 + p175;
		end;
		return p175 * 1024 ^ ((p173 * 2 - p176) / p176 - 1) + p174 + p175 - p175 * 0.001;
	end, 
	Smooth = function(p177, p178, p179, p180)
		p177 = p177 / p180;
		return p179 * p177 * p177 * (3 - 2 * p177) + p178;
	end, 
	Smoother = function(p181, p182, p183, p184)
		p181 = p181 / p184;
		return p183 * p181 * p181 * p181 * (p181 * (6 * p181 - 15) + 10) + p182;
	end, 
	RevBack = function(p185, p186, p187, p188)
		p185 = 1 - p185 / p188;
		return p187 * (1 - (l__math_sin__1(p185 * 1.5707963267948966) + l__math_sin__1(p185 * 3.141592653589793) * (l__math_cos__2(p185 * 3.141592653589793) + 1) * 0.5)) + p186;
	end, 
	RidiculousWiggle = function(p189, p190, p191, p192)
		p189 = p189 / p192;
		return p191 * l__math_sin__1(l__math_sin__1(p189 * 3.141592653589793) * 1.5707963267948966) + p190;
	end, 
	Spring = function(p193, p194, p195, p196)
		p193 = p193 / p196;
		return (1 + -l__math_exp__3(-6.9 * p193) * l__math_cos__2(-20.106192982974676 * p193)) * p195 + p194;
	end, 
	SoftSpring = function(p197, p198, p199, p200)
		p197 = p197 / p200;
		return (1 + -l__math_exp__3(-7.5 * p197) * l__math_cos__2(-10.053096491487338 * p197)) * p199 + p198;
	end
};
